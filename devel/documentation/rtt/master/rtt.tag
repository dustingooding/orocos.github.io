<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Buffer.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/base/</path>
    <filename>Buffer_8hpp</filename>
    <class kind="class">RTT::base::Buffer</class>
    <namespace>RTT</namespace>
    <namespace>RTT::base</namespace>
  </compound>
  <compound kind="file">
    <name>Buffers.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/base/</path>
    <filename>Buffers_8hpp</filename>
    <includes id="Buffer_8hpp" name="Buffer.hpp" local="yes" imported="no">Buffer.hpp</includes>
    <includes id="DataObject_8hpp" name="DataObject.hpp" local="yes" imported="no">DataObject.hpp</includes>
  </compound>
  <compound kind="file">
    <name>DataObject.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/base/</path>
    <filename>DataObject_8hpp</filename>
    <class kind="class">RTT::base::DataObject</class>
    <namespace>RTT</namespace>
    <namespace>RTT::base</namespace>
  </compound>
  <compound kind="file">
    <name>Component.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>Component_8hpp</filename>
    <class kind="class">RTT::ComponentFactories</class>
    <class kind="class">RTT::ComponentFactoryLoader</class>
    <namespace>RTT</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ORO_CREATE_COMPONENT</name>
      <anchorfile>Component_8hpp.html</anchorfile>
      <anchor>a3c394cfbb02f00290c88f2a9bf86ceac</anchor>
      <arglist>(CNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ORO_CREATE_COMPONENT_LIBRARY</name>
      <anchorfile>Component_8hpp.html</anchorfile>
      <anchor>a7698aa87b094f15fe48825ee27dfe619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ORO_LIST_COMPONENT_TYPE</name>
      <anchorfile>Component_8hpp.html</anchorfile>
      <anchor>ae1fecb579cec7c96e9179536e22a3813</anchor>
      <arglist>(CLASS_NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ORO_CREATE_COMPONENT_TYPE</name>
      <anchorfile>Component_8hpp.html</anchorfile>
      <anchor>aa0acfd10dbbc121e1a48026e704ae808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TaskContext *(*</type>
      <name>ComponentLoaderSignature</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a3ae509ae0e8187d05670f4e57b6a8d0e</anchor>
      <arglist>)(std::string instance_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Activities.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/extras/</path>
    <filename>Activities_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Properties.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/extras/</path>
    <filename>Properties_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>TaskContexts.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/extras/</path>
    <filename>TaskContexts_8hpp</filename>
    <includes id="Port_8hpp" name="Port.hpp" local="yes" imported="no">../Port.hpp</includes>
  </compound>
  <compound kind="file">
    <name>FactoryExceptions.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>FactoryExceptions_8hpp</filename>
    <class kind="struct">RTT::name_not_found_exception</class>
    <class kind="struct">RTT::invalid_handle_exception</class>
    <class kind="struct">RTT::wrong_number_of_args_exception</class>
    <class kind="struct">RTT::wrong_types_of_args_exception</class>
    <class kind="struct">RTT::no_asynchronous_operation_exception</class>
    <class kind="struct">RTT::non_lvalue_args_exception</class>
    <namespace>RTT</namespace>
  </compound>
  <compound kind="file">
    <name>CatchConfig.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/internal/</path>
    <filename>CatchConfig_8hpp</filename>
    <namespace>RTT</namespace>
    <namespace>RTT::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRY</name>
      <anchorfile>CatchConfig_8hpp.html</anchorfile>
      <anchor>a04ea92c8095ad01ec4a78d74f72060db</anchor>
      <arglist>(C)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exceptions.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/internal/</path>
    <filename>Exceptions_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>List.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/internal/</path>
    <filename>List_8hpp</filename>
    <class kind="class">RTT::internal::List</class>
    <namespace>RTT</namespace>
    <namespace>RTT::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Queue.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/internal/</path>
    <filename>Queue_8hpp</filename>
    <class kind="class">RTT::internal::Queue</class>
    <namespace>RTT</namespace>
    <namespace>RTT::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Logger.inl</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>Logger_8inl</filename>
    <namespace>RTT</namespace>
  </compound>
  <compound kind="file">
    <name>OperationInterfacePart.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>OperationInterfacePart_8hpp</filename>
    <class kind="class">RTT::OperationInterfacePart</class>
    <namespace>RTT</namespace>
  </compound>
  <compound kind="file">
    <name>fosi_interface.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>fosi__interface_8h</filename>
    <member kind="typedef">
      <type>long long</type>
      <name>NANO_TIME</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a384fff99a7383ab85bc17d20e28bb581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>TICK_TIME</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a601e8a2bfeeebb68b58e6a8654da6966</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>NANO_TIME</type>
      <name>rtos_get_time_ns</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a86faa704540130956d12e5df711c48aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TICK_TIME</type>
      <name>rtos_get_time_ticks</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a0b9b5e658779f86a151ed7ddb1745982</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TICK_TIME</type>
      <name>nano2ticks</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>ae12eda76d0ccfdc818ad52786346ec5c</anchor>
      <arglist>(NANO_TIME nano)</arglist>
    </member>
    <member kind="function">
      <type>NANO_TIME</type>
      <name>ticks2nano</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a79a3a083cf7c11a71f962467c914519b</anchor>
      <arglist>(TICK_TIME count)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_sem_init</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a24aaba870a425c1038bd672e70c0e078</anchor>
      <arglist>(rt_sem_t *m, int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_printf</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>af353573e15935061b8b235a39e4c2372</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_enable_rt_warning</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a3c2760ce545e19f106eaf3010bc6999f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_disable_rt_warning</name>
      <anchorfile>fosi__interface_8h.html</anchorfile>
      <anchor>a48aa552f20431b54d364a02e68fafbb1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fosi_internal_interface.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>fosi__internal__interface_8hpp</filename>
    <namespace>RTT</namespace>
    <namespace>RTT::os</namespace>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_create_main</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>aa319232bbd7d78d759935b24f8bbb0cb</anchor>
      <arglist>(RTOS_TASK *main_task)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_delete_main</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>acd19e0cae31ab63a81fad180b3bdd0cb</anchor>
      <arglist>(RTOS_TASK *main_task)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_create</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a8efad6db6f063c77b485752566d077b4</anchor>
      <arglist>(RTOS_TASK *task, int priority, unsigned cpu_affinity, const char *name, int sched_type, size_t stack_size, void *(*start_routine)(void *), ThreadInterface *obj)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL void</type>
      <name>rtos_task_yield</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a1747cd3054d03590167081addcdb31d2</anchor>
      <arglist>(RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rtos_task_get_pid</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a5f2df2e67170d279a3b073f9d992b014</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_set_scheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a602ffa710e4c011f181051f7480e6a44</anchor>
      <arglist>(RTOS_TASK *t, int sched_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_get_scheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a8d3bbd67c2625e757221f0d7ed61ba8b</anchor>
      <arglist>(const RTOS_TASK *t)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL void</type>
      <name>rtos_task_make_periodic</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ab54481e0c77bd488ff10d09e9819a3f6</anchor>
      <arglist>(RTOS_TASK *mytask, NANO_TIME nanosecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_task_set_period</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>aed049c50d4196acb7e8fd18173f17a5a</anchor>
      <arglist>(RTOS_TASK *mytask, NANO_TIME nanosecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_task_set_wait_period_policy</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ac1ccb6a3b312871524744cba9872fe6e</anchor>
      <arglist>(RTOS_TASK *task, int policy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_wait_period</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>adbb2de6b7e0f9b404d92162095511528</anchor>
      <arglist>(RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_task_delete</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ad70c7f423aab28b0d75cf4d124f4b2b3</anchor>
      <arglist>(RTOS_TASK *mytask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_check_scheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a10cd773604c82f6bd44adbd91a6d7ac5</anchor>
      <arglist>(int *sched_type)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_check_priority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a0e8344bb99f804040e197a841a141776</anchor>
      <arglist>(int *sched_type, int *priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_set_priority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a9473decdf2a1119eeba68486701e61b7</anchor>
      <arglist>(RTOS_TASK *task, int priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_get_priority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a2d1e79384fef5400db0cc6d3f8b2a621</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_set_cpu_affinity</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a8cca55292cd209cd35936a92a0fc7ede</anchor>
      <arglist>(RTOS_TASK *task, unsigned cpu_affinity)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>rtos_task_get_cpu_affinity</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a1eafae3a1b7a4151fc63bcf64f939861</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>rtos_task_get_name</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a72a4a1e7cfe5a457476e9308c76c8a7c</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_is_self</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a05b4c086c593b54c5b81b83d525fe20d</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gnulinux.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/gnulinux/</path>
    <filename>gnulinux_8h</filename>
  </compound>
  <compound kind="file">
    <name>lxrt.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/lxrt/</path>
    <filename>lxrt_8h</filename>
  </compound>
  <compound kind="file">
    <name>macosx.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/macosx/</path>
    <filename>macosx_8h</filename>
  </compound>
  <compound kind="file">
    <name>main.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>main_8h</filename>
    <includes id="startstop_8h" name="startstop.h" local="yes" imported="no">startstop.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ORO_main</name>
      <anchorfile>main_8h.html</anchorfile>
      <anchor>a28d71bc6fdacfef4c37b47661ee4d69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ORO_main_impl</name>
      <anchorfile>main_8h.html</anchorfile>
      <anchor>a7834429391fe8c8983f090ddf3b0fa60</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oro_arch_interface.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>oro__arch__interface_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>ORO_ATOMIC_SETUP</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>ac2119d582200fcce3b60ec2da4966741</anchor>
      <arglist>(oro_atomic_t *a, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORO_ATOMIC_CLEANUP</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>af30f939c0501f01d1b1268cfb69e2f99</anchor>
      <arglist>(oro_atomic_t *a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>oro_atomic_read</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>a7062627f054d754c78a42b6b29562068</anchor>
      <arglist>(oro_atomic_t *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oro_atomic_set</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>ad83db2af61c979d658ad2d95256a8827</anchor>
      <arglist>(oro_atomic_t *a, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oro_atomic_add</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>ac894aec2a68eb7e9e43651ae8a9640a4</anchor>
      <arglist>(oro_atomic_t *a, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oro_atomic_sub</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>aee89235265c9f15134f637688addc74e</anchor>
      <arglist>(int n, oro_atomic_t *a, int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>oro_atomic_sub_and_test</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>ad515ffa22f1bf59e0ce35ef6c15b4933</anchor>
      <arglist>(oro_atomic_t *a, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oro_atomic_inc</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>af86230f87017f4dfd762ff6f27543bf0</anchor>
      <arglist>(oro_atomic_t *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oro_atomic_dec</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>af365849570cecc5d59e3164fabd45ed3</anchor>
      <arglist>(oro_atomic_t *a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>oro_atomic_dec_and_test</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>a41838459c68a9dc60dc05f0a911b2971</anchor>
      <arglist>(oro_atomic_t *a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>oro_atomic_inc_and_test</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>a8aa16f959b3d4ecb2e45ab0075350c0b</anchor>
      <arglist>(oro_atomic_t *a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>oro_cmpxchg</name>
      <anchorfile>oro__arch__interface_8h.html</anchorfile>
      <anchor>a9635c9230f0a8f80524c4247fbd539d1</anchor>
      <arglist>(void volatile *ptr, unsigned long o, unsigned long n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oro_malloc.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>oro__malloc_8h</filename>
  </compound>
  <compound kind="file">
    <name>OS.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>OS_8hpp</filename>
    <namespace>RTT</namespace>
    <namespace>RTT::os</namespace>
  </compound>
  <compound kind="file">
    <name>rtstreams.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>rtstreams_8hpp</filename>
    <class kind="class">RTT::os::basic_streams</class>
    <class kind="class">RTT::os::basic_istreams</class>
    <class kind="class">RTT::os::basic_ostreams</class>
    <class kind="class">RTT::os::basic_iostreams</class>
    <class kind="class">RTT::os::printstream</class>
    <class kind="class">RTT::os::stringstreams</class>
    <namespace>RTT</namespace>
    <namespace>RTT::os</namespace>
    <member kind="function">
      <type>basic_ostreams &amp;</type>
      <name>endl</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a336aa8fb4f6d18c6f78913d81c8e133d</anchor>
      <arglist>(basic_ostreams &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>startstop.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>startstop_8h</filename>
    <member kind="function">
      <type>RTT_API int</type>
      <name>__os_init</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>a07f666f568b3c6fbc0ffb5528ddb0b11</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API void</type>
      <name>__os_exit</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>af8154d57b1bf4d2aed2d2f934d22e057</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API void</type>
      <name>__os_printFailure</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>a23f079551519c4d4cb504fa5c3fff615</anchor>
      <arglist>(const char *prog)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API void</type>
      <name>__os_printException</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>afa794f100160fceabced8f02a53683b2</anchor>
      <arglist>(const char *prog, std::exception &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API int</type>
      <name>__os_checkException</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>a5c0548db0b012c7784bf9d1b47d40fe1</anchor>
      <arglist>(int &amp;, char **)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API int</type>
      <name>__os_main_argc</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>a836e34b8c3791808425e8b5572712d74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API char **</type>
      <name>__os_main_argv</name>
      <anchorfile>startstop_8h.html</anchorfile>
      <anchor>a04a3a12823912b67374e238955a0f591</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>win32.h</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/win32/</path>
    <filename>win32_8h</filename>
  </compound>
  <compound kind="file">
    <name>Plugin.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/plugin/</path>
    <filename>Plugin_8hpp</filename>
    <namespace>RTT</namespace>
    <member kind="function">
      <type>RTT_EXPORT bool</type>
      <name>loadRTTPlugin</name>
      <anchorfile>Plugin_8hpp.html</anchorfile>
      <anchor>a9550ba5d838666c5d16de652e3c207ac</anchor>
      <arglist>(RTT::TaskContext *t)</arglist>
    </member>
    <member kind="function">
      <type>RTT_EXPORT std::string</type>
      <name>getRTTPluginName</name>
      <anchorfile>Plugin_8hpp.html</anchorfile>
      <anchor>ab6dfef32d6409e1bb9b9d77b2a172578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTT_EXPORT std::string</type>
      <name>getRTTTargetName</name>
      <anchorfile>Plugin_8hpp.html</anchorfile>
      <anchor>a7c200e39cd09316c331697fab41fbf93</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Port.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>Port_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>RTT.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>RTT_8hpp</filename>
    <includes id="Port_8hpp" name="Port.hpp" local="yes" imported="no">Port.hpp</includes>
    <namespace>RTT</namespace>
    <namespace>Orocos</namespace>
  </compound>
  <compound kind="file">
    <name>TaskContext.idl</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/transports/corba/</path>
    <filename>TaskContext_8idl</filename>
    <class kind="interface">RTT::corba::CTaskContext</class>
    <namespace>RTT</namespace>
    <namespace>RTT::corba</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CTaskState</name>
      <anchorfile>group__CompIDL.html</anchorfile>
      <anchor>ga099e6ccd5476aa8ec1020e27b5e39558</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>binary_data_archive.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/transports/mqueue/</path>
    <filename>binary__data__archive_8hpp</filename>
    <class kind="class">RTT::mqueue::binary_data_iarchive</class>
    <class kind="struct">RTT::mqueue::binary_data_iarchive::use_array_optimization</class>
    <class kind="class">RTT::mqueue::binary_data_oarchive</class>
    <class kind="struct">RTT::mqueue::binary_data_oarchive::use_array_optimization</class>
    <namespace>RTT</namespace>
  </compound>
  <compound kind="file">
    <name>RTTTypes.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/typekit/</path>
    <filename>RTTTypes_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Operators.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/types/</path>
    <filename>Operators_8hpp</filename>
    <class kind="class">RTT::types::UnaryOp</class>
    <class kind="class">RTT::types::OperatorRepository</class>
    <namespace>RTT</namespace>
    <namespace>RTT::types</namespace>
    <member kind="function">
      <type>RTT_API OperatorRepository::shared_ptr</type>
      <name>operators</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a392a189a6f0424bf29e29d16f9ca187e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_discovery.hpp</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/types/</path>
    <filename>type__discovery_8hpp</filename>
    <class kind="class">RTT::types::type_discovery</class>
    <namespace>RTT</namespace>
    <namespace>RTT::types</namespace>
  </compound>
  <compound kind="group">
    <name>PortBuffers</name>
    <title>Data Storage and Buffering classes.</title>
    <filename>group__PortBuffers.html</filename>
    <class kind="class">RTT::base::Buffer</class>
    <class kind="class">RTT::base::BufferBase</class>
    <class kind="class">RTT::base::BufferInterface</class>
    <class kind="class">RTT::base::BufferLocked</class>
    <class kind="class">RTT::base::BufferLockFree</class>
    <class kind="class">RTT::base::BufferUnSync</class>
    <class kind="class">RTT::base::DataObject</class>
    <class kind="class">RTT::base::DataObjectInterface</class>
    <class kind="class">RTT::base::DataObjectLocked</class>
    <class kind="class">RTT::base::DataObjectLockFree</class>
    <class kind="class">RTT::base::DataObjectUnSync</class>
  </compound>
  <compound kind="group">
    <name>CoreLibActivities</name>
    <title>Activity (thread) classes.</title>
    <filename>group__CoreLibActivities.html</filename>
    <class kind="class">RTT::Activity</class>
    <class kind="class">RTT::base::ActivityInterface</class>
    <class kind="class">RTT::base::RunnableInterface</class>
    <class kind="class">RTT::extras::PeriodicActivity</class>
    <class kind="class">RTT::extras::SequentialActivity</class>
    <class kind="class">RTT::extras::SimulationActivity</class>
    <class kind="class">RTT::extras::SlaveActivity</class>
  </compound>
  <compound kind="group">
    <name>DeviceInterface</name>
    <title>Device Interfaces</title>
    <filename>group__DeviceInterface.html</filename>
    <class kind="class">RTT::dev::AnalogInInterface</class>
    <class kind="class">RTT::dev::AnalogInput</class>
    <class kind="class">RTT::dev::AnalogOutInterface</class>
    <class kind="class">RTT::dev::AnalogOutput</class>
    <class kind="class">RTT::dev::AxisInterface</class>
    <class kind="class">RTT::dev::CalibrationInterface</class>
    <class kind="class">RTT::dev::DigitalInInterface</class>
    <class kind="class">RTT::dev::DigitalInput</class>
    <class kind="class">RTT::dev::DigitalOutInterface</class>
    <class kind="class">RTT::dev::DigitalOutput</class>
    <class kind="class">RTT::dev::DriveInterface</class>
    <class kind="class">RTT::dev::EncoderInterface</class>
    <class kind="class">RTT::dev::SensorInterface</class>
    <member kind="function">
      <type></type>
      <name>HomingInterface</name>
      <anchorfile>group__DeviceInterface.html</anchorfile>
      <anchor>ga1ab5c0afafe11f2a9f56232624d64780</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CompModel</name>
    <title>Component Model</title>
    <filename>group__CompModel.html</filename>
    <subgroup>RTTComponentInterface</subgroup>
    <subgroup>Processor</subgroup>
    <subgroup>Services</subgroup>
  </compound>
  <compound kind="group">
    <name>CoreLibProperties</name>
    <title>Property Interface</title>
    <filename>group__CoreLibProperties.html</filename>
    <subgroup>BagOperations</subgroup>
    <class kind="class">RTT::ConfigurationInterface</class>
    <class kind="class">RTT::Property</class>
    <class kind="class">RTT::PropertyBag</class>
    <member kind="function">
      <type>PropertyBase *</type>
      <name>findProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gaf2f1b6a34d526b3d31cf8dfffe6f3e17</anchor>
      <arglist>(const PropertyBag &amp;bag, const std::string &amp;path, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>listProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga47213a34d4b878b79fdb33b94d33d59c</anchor>
      <arglist>(const PropertyBag &amp;bag, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>listPropertyDescriptions</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga2885aded0d1c7b3a66787d6dcae351eb</anchor>
      <arglist>(const PropertyBag &amp;bag, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga994b56faab11009e953d41e434be981f</anchor>
      <arglist>(PropertyBag &amp;bag, const std::string &amp;path, base::PropertyBase *item, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gad8db8d40881eb7391765f12516255b41</anchor>
      <arglist>(PropertyBag &amp;bag, const std::string &amp;path, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refreshProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga387f50577d8b7dd392bfde77a103eb36</anchor>
      <arglist>(const PropertyBag &amp;target, const PropertyBag &amp;source, bool strict=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refreshProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga4508004f45f0b38d45de7131c1363ebb</anchor>
      <arglist>(const PropertyBag &amp;target, const base::PropertyBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga33ed35469e77163e298a71b9eee1877b</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga7f7f75a8a5656fb5821678406403fb42</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga3a82a84aa282970a98cdbac81be141dd</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source, const std::string &amp;path, const std::string &amp;separator=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refreshProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gad7dbb47516d4655c398bde87b7bb4bd6</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source, const std::string &amp;path, const std::string &amp;separator=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga1b0aa4b25d75f5d5f20022c3ede56480</anchor>
      <arglist>(PropertyBag &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletePropertyBag</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gab4f305499752bd3dd21aebb0087131f2</anchor>
      <arglist>(PropertyBag &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flattenPropertyBag</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga31f10f4c00aa98cc2f37f5aafd45c2c2</anchor>
      <arglist>(PropertyBag &amp;target, const std::string &amp;separator=&quot;.&quot;)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RTTComponentInterface</name>
    <title>Task Context Interface</title>
    <filename>group__RTTComponentInterface.html</filename>
    <subgroup>CoreLibProperties</subgroup>
    <subgroup>Operations</subgroup>
    <subgroup>Ports</subgroup>
    <class kind="class">RTT::ConfigurationInterface</class>
    <class kind="class">RTT::DataFlowInterface</class>
    <class kind="class">RTT::OperationCaller</class>
  </compound>
  <compound kind="group">
    <name>Processor</name>
    <title>Execution Engine</title>
    <filename>group__Processor.html</filename>
    <class kind="class">RTT::ExecutionEngine</class>
  </compound>
  <compound kind="group">
    <name>Operations</name>
    <title>Operation Interface</title>
    <filename>group__Operations.html</filename>
    <class kind="class">RTT::Operation</class>
    <class kind="class">RTT::OperationCaller</class>
    <class kind="class">RTT::OperationInterface</class>
  </compound>
  <compound kind="group">
    <name>Ports</name>
    <title>Data Flow Ports</title>
    <filename>group__Ports.html</filename>
    <subgroup>PortBuffers</subgroup>
    <class kind="class">RTT::base::PortInterface</class>
    <class kind="class">RTT::ConnPolicy</class>
    <class kind="class">RTT::DataFlowInterface</class>
    <class kind="class">RTT::InputPort</class>
    <class kind="class">RTT::OutputPort</class>
  </compound>
  <compound kind="group">
    <name>BagOperations</name>
    <title>Recursive Property Bag Operations.</title>
    <filename>group__BagOperations.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__BagOperations.html</anchorfile>
      <anchor>ga1952dff126626e769995928c662e96c8</anchor>
      <arglist>(std::ostream &amp;os, const PropertyBag &amp;bag)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>group__BagOperations.html</anchorfile>
      <anchor>ga9a99454195e2a0e96c6cdd319d127544</anchor>
      <arglist>(std::istream &amp;is, PropertyBag &amp;bag)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Services</name>
    <title>Service Interface</title>
    <filename>group__Services.html</filename>
    <class kind="class">RTT::ConfigurationInterface</class>
    <class kind="class">RTT::DataFlowInterface</class>
    <class kind="class">RTT::OperationInterface</class>
    <class kind="class">RTT::Service</class>
    <class kind="class">RTT::ServiceRequester</class>
  </compound>
  <compound kind="group">
    <name>CoreLibTime</name>
    <title>Time measurement classes.</title>
    <filename>group__CoreLibTime.html</filename>
    <class kind="class">RTT::os::TimeService</class>
  </compound>
  <compound kind="group">
    <name>CompIDL</name>
    <title>Component IDL and Corba Setup</title>
    <filename>group__CompIDL.html</filename>
    <class kind="interface">RTT::corba::CConfigurationInterface</class>
    <class kind="interface">RTT::corba::CDataFlowInterface</class>
    <class kind="interface">RTT::corba::COperationInterface</class>
    <class kind="interface">RTT::corba::CService</class>
    <class kind="interface">RTT::corba::CServiceRequester</class>
    <class kind="interface">RTT::corba::CTaskContext</class>
    <class kind="class">RTT::corba::TaskContextProxy</class>
    <class kind="class">RTT::corba::TaskContextServer</class>
    <member kind="enumeration">
      <type></type>
      <name>CTaskState</name>
      <anchorfile>group__CompIDL.html</anchorfile>
      <anchor>ga099e6ccd5476aa8ec1020e27b5e39558</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CorbaOperationCallerCall</name>
    <filename>classCorbaOperationCallerCall.html</filename>
  </compound>
  <compound kind="class">
    <name>CorbaOperationCallerCollect</name>
    <filename>classCorbaOperationCallerCollect.html</filename>
    <base>DataSource&lt; SendStatus &gt;</base>
    <member kind="typedef">
      <type>SendStatus</type>
      <name>value_t</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab7d4ab0d9eef6da77f667e26a14a5c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SendStatus</type>
      <name>value</name>
      <anchorfile>classCorbaOperationCallerCollect.html</anchorfile>
      <anchor>a2044bb21ac2edd64fe455c14e7d2ffe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SendStatus const &amp;</type>
      <name>rvalue</name>
      <anchorfile>classCorbaOperationCallerCollect.html</anchorfile>
      <anchor>ad634e04c1b0659bfdf3b3703f162566b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SendStatus</type>
      <name>get</name>
      <anchorfile>classCorbaOperationCallerCollect.html</anchorfile>
      <anchor>a4fc7eb52b83fdc0277179c4d331f8a61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; SendStatus &gt; *</type>
      <name>clone</name>
      <anchorfile>classCorbaOperationCallerCollect.html</anchorfile>
      <anchor>a31eb01dfe20d4b67cb848915c4611028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; SendStatus &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSource&lt; SendStatus &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ae260418b87ff337f1acfa8204fe86ade</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>aca8afe03f44695c7c2d2ac89cc1b3abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deref</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a35cceaaf3408fe63d5232687bfbaab6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a882d3d557fc92b1c1dc4ff34c8e97999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAssignable</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a77cc82b4e05ee828eb6882bf2705617e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updated</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>ab25b3bf055137d7d08c648ac833b3074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>af030734c119c7a922e1877dd8b047e16</anchor>
      <arglist>(DataSourceBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActionInterface *</type>
      <name>updateAction</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a16804c3eec366033854f04b5d62e1c68</anchor>
      <arglist>(DataSourceBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>getMember</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a59a648234e2fc375c5bef08cd1f6b8eb</anchor>
      <arglist>(const std::string &amp;member_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>getMember</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a7f9fb504805a245a36ed10d1fe8748ff</anchor>
      <arglist>(DataSourceBase::shared_ptr member_id, DataSourceBase::shared_ptr offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getMemberNames</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>ae95f4df35ec8766232c87baf6f51eb7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>getParent</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a5ab0edf1f771e8da92dc66252ebf760b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a6cb7235c6366141d9df9bf2705addbc0</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>aaedd3ddfc892996a2ba6043686fafd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getRawPointer</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>aab3aa385bc553605065ffa9fea473ace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; SendStatus &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>stack_shared_ptr</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>af6214f47a6c11f4b389a626f5767e86e</anchor>
      <arglist>(DataSourceBase *dsb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const_ptr</type>
      <name>stack_const_ptr</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>ab64624458c8305e30d6b5bc37739833b</anchor>
      <arglist>(const DataSourceBase *dsb)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>os::AtomicInt</type>
      <name>refcount</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a3b87c6ba85f8a8a8f84e463c548144d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>oro_atomic_t</name>
    <filename>structoro__atomic__t.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Orocos</name>
    <filename>namespaceOrocos.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RTT</name>
    <filename>namespaceRTT.html</filename>
    <namespace>RTT::base</namespace>
    <namespace>RTT::corba</namespace>
    <namespace>RTT::detail</namespace>
    <namespace>RTT::extras</namespace>
    <namespace>RTT::internal</namespace>
    <namespace>RTT::marsh</namespace>
    <namespace>RTT::os</namespace>
    <namespace>RTT::plugin</namespace>
    <namespace>RTT::scripting</namespace>
    <namespace>RTT::types</namespace>
    <class kind="class">RTT::Activity</class>
    <class kind="struct">RTT::ArgumentDescription</class>
    <class kind="class">RTT::Attribute</class>
    <class kind="class">RTT::Constant</class>
    <class kind="class">RTT::Alias</class>
    <class kind="class">RTT::Operation</class>
    <class kind="class">RTT::ComponentFactories</class>
    <class kind="class">RTT::ComponentFactoryLoader</class>
    <class kind="class">RTT::ConfigurationInterface</class>
    <class kind="class">RTT::ConnPolicy</class>
    <class kind="class">RTT::DataFlowInterface</class>
    <class kind="class">RTT::ExecutionEngine</class>
    <class kind="struct">RTT::name_not_found_exception</class>
    <class kind="struct">RTT::invalid_handle_exception</class>
    <class kind="struct">RTT::wrong_number_of_args_exception</class>
    <class kind="struct">RTT::wrong_types_of_args_exception</class>
    <class kind="struct">RTT::no_asynchronous_operation_exception</class>
    <class kind="struct">RTT::non_lvalue_args_exception</class>
    <class kind="class">RTT::Handle</class>
    <class kind="class">RTT::ScopedHandle</class>
    <class kind="class">RTT::CleanupHandle</class>
    <class kind="class">RTT::InputPort</class>
    <class kind="class">RTT::Logger</class>
    <class kind="class">RTT::Marshalling</class>
    <class kind="class">RTT::OperationCaller</class>
    <class kind="class">RTT::OperationInterface</class>
    <class kind="class">RTT::OperationInterfacePart</class>
    <class kind="class">RTT::OutputPort</class>
    <class kind="class">RTT::Property</class>
    <class kind="class">RTT::PropertyBag</class>
    <class kind="class">RTT::SendHandle</class>
    <class kind="class">RTT::file_parse_exception</class>
    <class kind="class">RTT::parse_exception</class>
    <class kind="class">RTT::Scripting</class>
    <class kind="class">RTT::Service</class>
    <class kind="class">RTT::ServiceRequester</class>
    <class kind="class">RTT::TaskContext</class>
    <member kind="typedef">
      <type>TaskContext *(*</type>
      <name>ComponentLoaderSignature</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a3ae509ae0e8187d05670f4e57b6a8d0e</anchor>
      <arglist>)(std::string instance_name)</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Seconds</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>ab93965f88bfbe72fbc2ece16c047c902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>secs</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a3975a0691735afcdd8744e443df0715d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>msecs</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>adc27622a8312d1b6841a000a2fe21c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>usecs</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a23e669bbfe0450a9c56db312a9d3f7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>nsecs</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>af83330e8244855273c9246bd65c20682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>psecs</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>aa995843508db339534281349f69616b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::basic_string&lt; char, std::char_traits&lt; char &gt;, RTT::os::rt_allocator&lt; char &gt; &gt;</type>
      <name>rt_string</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a02540e90c90320b427952f03a2f08eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::basic_ostringstream&lt; char, std::char_traits&lt; char &gt;, RTT::os::rt_allocator&lt; char &gt; &gt;</type>
      <name>rt_ostringstream</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a6faa5f78714b8e6964ff1f98a8beddbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExecutionThread</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a5bc5629360f41b73f0afd3e901ca4915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FlowStatus</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>aa92dce4aa147272a093143330ef11ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LoggerLevel</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a97636c8c36d7c811e3e32130c4079f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SendStatus</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a55cf62997a93f05db722902f1cf269d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SendFailure</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a55cf62997a93f05db722902f1cf269d8a42f07f26d5ce4ed50ab024545fb43b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SendNotReady</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a55cf62997a93f05db722902f1cf269d8abdb36c13e4f40fcc2f2e707565a3be5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SendSuccess</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a55cf62997a93f05db722902f1cf269d8ac2238d6401bf694b7bf24405b40e0b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__BagOperations.html</anchorfile>
      <anchor>ga1952dff126626e769995928c662e96c8</anchor>
      <arglist>(std::ostream &amp;os, const PropertyBag &amp;bag)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>group__BagOperations.html</anchorfile>
      <anchor>ga9a99454195e2a0e96c6cdd319d127544</anchor>
      <arglist>(std::istream &amp;is, PropertyBag &amp;bag)</arglist>
    </member>
    <member kind="function">
      <type>PropertyBase *</type>
      <name>findProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gaf2f1b6a34d526b3d31cf8dfffe6f3e17</anchor>
      <arglist>(const PropertyBag &amp;bag, const std::string &amp;path, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>listProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga47213a34d4b878b79fdb33b94d33d59c</anchor>
      <arglist>(const PropertyBag &amp;bag, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>listPropertyDescriptions</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga2885aded0d1c7b3a66787d6dcae351eb</anchor>
      <arglist>(const PropertyBag &amp;bag, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga994b56faab11009e953d41e434be981f</anchor>
      <arglist>(PropertyBag &amp;bag, const std::string &amp;path, base::PropertyBase *item, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gad8db8d40881eb7391765f12516255b41</anchor>
      <arglist>(PropertyBag &amp;bag, const std::string &amp;path, const std::string &amp;separator=std::string(&quot;.&quot;))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refreshProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga387f50577d8b7dd392bfde77a103eb36</anchor>
      <arglist>(const PropertyBag &amp;target, const PropertyBag &amp;source, bool strict=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refreshProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga4508004f45f0b38d45de7131c1363ebb</anchor>
      <arglist>(const PropertyBag &amp;target, const base::PropertyBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copyProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga33ed35469e77163e298a71b9eee1877b</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga7f7f75a8a5656fb5821678406403fb42</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga3a82a84aa282970a98cdbac81be141dd</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source, const std::string &amp;path, const std::string &amp;separator=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refreshProperty</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gad7dbb47516d4655c398bde87b7bb4bd6</anchor>
      <arglist>(PropertyBag &amp;target, const PropertyBag &amp;source, const std::string &amp;path, const std::string &amp;separator=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteProperties</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga1b0aa4b25d75f5d5f20022c3ede56480</anchor>
      <arglist>(PropertyBag &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletePropertyBag</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>gab4f305499752bd3dd21aebb0087131f2</anchor>
      <arglist>(PropertyBag &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flattenPropertyBag</name>
      <anchorfile>group__CoreLibProperties.html</anchorfile>
      <anchor>ga31f10f4c00aa98cc2f37f5aafd45c2c2</anchor>
      <arglist>(PropertyBag &amp;target, const std::string &amp;separator=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeString</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a0ef845312403a3d0526a75e072fde7e7</anchor>
      <arglist>(const RTT::rt_string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectPorts</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a71d16d6e8f24865ef70e5be703a6306b</anchor>
      <arglist>(TaskContext *A, TaskContext *B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectPeers</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a2b9026aff119e194cb035c54e181acbe</anchor>
      <arglist>(TaskContext *A, TaskContext *B)</arglist>
    </member>
    <member kind="function">
      <type>OperatorRepository::shared_ptr</type>
      <name>operators</name>
      <anchorfile>namespaceRTT.html</anchorfile>
      <anchor>a3b0541a7ad9c9d02e774ae63d867ae87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::Activity</name>
    <filename>classRTT_1_1Activity.html</filename>
    <base>RTT::base::ActivityInterface</base>
    <base>RTT::os::Thread</base>
    <member kind="function">
      <type></type>
      <name>Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a801fbe0120b426011cb21862e6f7295a</anchor>
      <arglist>(base::RunnableInterface *r=0, const std::string &amp;name=&quot;Activity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>ab9d434b7df9bbb710edb27769f26e783</anchor>
      <arglist>(int priority, base::RunnableInterface *r=0, const std::string &amp;name=&quot;Activity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a626d8d4b81fd1f7a44f0749fcf265e0b</anchor>
      <arglist>(int priority, Seconds period, base::RunnableInterface *r=0, const std::string &amp;name=&quot;Activity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a79a895d76a391cc3062e0bc53ef66ddd</anchor>
      <arglist>(int scheduler, int priority, base::RunnableInterface *r=0, const std::string &amp;name=&quot;Activity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a8f8c4490c7ea2e030ec3d6aa78638b0f</anchor>
      <arglist>(int scheduler, int priority, Seconds period, base::RunnableInterface *r=0, const std::string &amp;name=&quot;Activity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>affbd459354cae967fa759e7fb1af6daf</anchor>
      <arglist>(int scheduler, int priority, Seconds period, unsigned cpu_affinity, base::RunnableInterface *r=0, const std::string &amp;name=&quot;Activity&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Activity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>af7bd4a3769e635df7016876697cbbb73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a890880a5b0782720786d49d2a2cd327d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>ad0c782762a21088a9c8b27229ce9e906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a7c625d705a155061c0f7a258978b26af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a12c408623bd8daae95f80ee6cbbe9292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a8a501c994c04e6e267f4fb07d0f08253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>aefddbddb0c10214090f4b86756d129d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPeriodic</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a1d43fd70a77b8caf26fe43da0c82a86f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>abd1ac406693189570b3aad112267a24a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a897a4d499ca2268500296406236ef39a</anchor>
      <arglist>(Seconds period)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>acfb3e2b0da14f0f94bc94f614f47114d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a13b7b7ae3bc11fa0579f619f23e9ef33</anchor>
      <arglist>(unsigned cpu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>ac0863aa62a7430336b11bdf3a0f7d42d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a5e3cb94a0ac102cd8e801c6c8eb7e3f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a87b4be7d3090736f3a1ab36640e6e7f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a1305eb1c8dfd10dbd0473b766c52a587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>a9a3adbca4b1a350c6feb854f994d98d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1Activity.html</anchorfile>
      <anchor>afdeb2c77295ecdaaca66331be7154700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a82544a7ce478a5fa1dbc61888a04ca9c</anchor>
      <arglist>(RunnableInterface *r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RunnableInterface *</type>
      <name>getRunner</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a77cc446f3e244790c48bf7a4124e592d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopTimeout</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a6d515d3080cf343c48314c99d8c9477d</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>getStopTimeout</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a462ba3961c178ec06c63260e41e4a66d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a25d3452af9a71ec58ad1434147144a42</anchor>
      <arglist>(secs s, nsecs ns)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a505857cee34f093923e8f63bf3e8cfda</anchor>
      <arglist>(TIME_SPEC p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>aa2b2d41c3d7b6a6e8c9b7b308e43845e</anchor>
      <arglist>(secs &amp;s, nsecs &amp;ns) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual nsecs</type>
      <name>getPeriodNS</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a80dd84b525cab472c70d6f7579d26ecd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ae1eb44bd232ed259b95e50ebd728ba2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTOS_TASK *</type>
      <name>getTask</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a0801b17719b897552bf89b8d728a89ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RTOS_TASK *</type>
      <name>getTask</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a6773640897f8ae122da0b4e14630414a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setScheduler</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>acd4c8dce0ebd111b20e558371119a15b</anchor>
      <arglist>(int sched_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getScheduler</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a2f14393fe55e4e2e7d740b918adefbe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPriority</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a90198c8c137fe06f489455bd7584352f</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a517150446a73f7e44cd8e451f9eae138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPid</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a2c3b1dfb00f9f103582bc17267ba6b5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ab375c5a6f35fb2e7368bd16a5e13fa2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWaitPeriodPolicy</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a404bc82a8a3b36d7a2a95a457fd2a739</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>threadNumber</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ac6b17eb11b2a816e4b5804ff626c68f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStackSize</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a514231d0b3a7945108cd74153a6a1488</anchor>
      <arglist>(unsigned int ssize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLockTimeoutNoPeriod</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ab7dc27c42359e0f9f6eef8fcc4d5518c</anchor>
      <arglist>(double timeout_in_s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLockTimeoutPeriodFactor</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a23e7a11b0a3d3c3b45d50478470d411e</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disableRun</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>aa7aebb13bd56f9409f0b2344a2e43c2d</anchor>
      <arglist>(RunnableInterface *caller)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a4f1930836d6387ccaa86e4742c567cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>threadnb</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a25fb4baabceaf85e83ccb1f8e4d7d99c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::ArgumentDescription</name>
    <filename>structRTT_1_1ArgumentDescription.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::Attribute</name>
    <filename>classRTT_1_1Attribute.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::AttributeBase</base>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a0f1fa642b95b2be8b64300adde52afa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a4f5a0af85bbb5315d8dd8de1736e8aba</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a7a6804b90e73f2d8c136c16a29289501</anchor>
      <arglist>(const std::string &amp;name, T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>aee95ae0f7bb3f39295aeeaa9c33c57a5</anchor>
      <arglist>(const std::string &amp;name, T t, Owner o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a6b0210a8ec12c065f8b46108f61e1b29</anchor>
      <arglist>(const std::string &amp;name, internal::AssignableDataSource&lt; T &gt; *d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a6261837015b726c4600a8539b0ef6076</anchor>
      <arglist>(const Attribute&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Attribute&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>acadb8ced6d834e77f982eaf491cffccd</anchor>
      <arglist>(const Attribute&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a523dcdf4e96a242248aea753c008c2e5</anchor>
      <arglist>(base::AttributeBase *ab)</arglist>
    </member>
    <member kind="function">
      <type>Attribute&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a7afa23004646f463dd796771f1f66595</anchor>
      <arglist>(base::AttributeBase *ab)</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>get</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a03c87c34c23b4e6828b7d09165a09895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a6850437ceef06e583574f9e5af13765b</anchor>
      <arglist>(T const &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>internal::AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a26b3211ae5d36c0845747e6c0ee4318b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>af8d7e4bfe96fb19610da9d5add6becad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Attribute&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a8ad028b5820da749fee9be3fb53d5725</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Attribute&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1Attribute.html</anchorfile>
      <anchor>a11b474c9012b1ecab4d3e88542256b43</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacements, bool instantiate)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>aa75671f9d98d06c0ddf9191972a4d5dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a792c6a23a67d409772bbc5f4d0f9b713</anchor>
      <arglist>(std::string const &amp;new_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a38385a6cafc5173be66ba7a5a37b9b75</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::Constant</name>
    <filename>classRTT_1_1Constant.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::AttributeBase</base>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>afdf317a22b8f19ac18cfe413fe58e438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>a602686af0913850b8f0afdbd81425c9c</anchor>
      <arglist>(const std::string &amp;name, T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>a4a1d287d212997ba703e2b2e829e46b0</anchor>
      <arglist>(const std::string &amp;name, T t, Owner owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>ac8571498cd82fae249372d20406c5c92</anchor>
      <arglist>(const std::string &amp;name, internal::DataSource&lt; T &gt; *d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>ad22c827761fe475d3cbd11c9c097bc75</anchor>
      <arglist>(base::AttributeBase *ab)</arglist>
    </member>
    <member kind="function">
      <type>Constant&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>acf6a5549ad3c9d0333a7c0e6726d2f13</anchor>
      <arglist>(base::AttributeBase *ab)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>a1f7fe61906e257b78a8f1b548dba1d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>a54654183860ad4007ada54089f341b97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Constant&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>ab7caa0041ea9fa0c31b778fd24da460d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Constant&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1Constant.html</anchorfile>
      <anchor>aaa9e6f88d3851946d7e7fd9656dd2122</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacements, bool instantiate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::Alias</name>
    <filename>classRTT_1_1Alias.html</filename>
    <base>RTT::base::AttributeBase</base>
    <member kind="function">
      <type></type>
      <name>Alias</name>
      <anchorfile>classRTT_1_1Alias.html</anchorfile>
      <anchor>a43131b0d64968e2bf648195a2b5bc744</anchor>
      <arglist>(const std::string &amp;name, base::DataSourceBase::shared_ptr d, Owner owner)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1Alias.html</anchorfile>
      <anchor>ab4bf721a3ae883da6ea91d7f1ee838d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Alias *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1Alias.html</anchorfile>
      <anchor>ad7eeb901fda9fc08d4ca4f9f80f9afe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Alias *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1Alias.html</anchorfile>
      <anchor>af30b0a191564091e50fc07cd0bad7021</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacements, bool)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::Operation</name>
    <filename>classRTT_1_1Operation.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::OperationBase</base>
    <member kind="function">
      <type></type>
      <name>Operation</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>aed6cbce8fc76a6ed6cc7c9780caa5ad4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operation</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>adbbd3320747a37d9fef619cc86da579f</anchor>
      <arglist>(const std::string &amp;name, boost::function&lt; Signature &gt; func, ExecutionThread et=ClientThread, ExecutionEngine *ownerEngine=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operation</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>aa3828b860a5d6d275ed751f28dc54b9f</anchor>
      <arglist>(const std::string &amp;name, Function func, Object o, ExecutionThread et=ClientThread, ExecutionEngine *ownerEngine=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>doc</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>a96a24739a8d489abb7e15f2f86106d6c</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>arg</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>a316ba759adbe50711568a64f8b1f0eae</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>Operation &amp;</type>
      <name>calls</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>a36e37b291a2b2b0410ef492dcbb880d4</anchor>
      <arglist>(boost::function&lt; Signature &gt; func, ExecutionThread et=ClientThread, ExecutionEngine *ownerEngine=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Operation &amp;</type>
      <name>calls</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>a40da458a7263b43095eea3f92b26a25a</anchor>
      <arglist>(Function func, Object o, ExecutionThread et=ClientThread, ExecutionEngine *ownerEngine=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DisposableInterface::shared_ptr</type>
      <name>getImplementation</name>
      <anchorfile>classRTT_1_1Operation.html</anchorfile>
      <anchor>a4fe2653436825e0e248ad38b245781e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1base_1_1OperationBase.html</anchorfile>
      <anchor>a9ae8de185c0c827fe3562e1310f4e3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDescriptions</name>
      <anchorfile>classRTT_1_1base_1_1OperationBase.html</anchorfile>
      <anchor>aeb83ec311d7eb650f1a0cd7d7068d9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1base_1_1OperationBase.html</anchorfile>
      <anchor>a3f7435042d02acf5fe9f59102a59127c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwner</name>
      <anchorfile>classRTT_1_1base_1_1OperationBase.html</anchorfile>
      <anchor>aad15cbde431c19377d06f3011c68a0dd</anchor>
      <arglist>(ExecutionEngine *ee)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::ComponentFactories</name>
    <filename>classRTT_1_1ComponentFactories.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::ComponentFactoryLoader</name>
    <filename>classRTT_1_1ComponentFactoryLoader.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::ConfigurationInterface</name>
    <filename>classRTT_1_1ConfigurationInterface.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>AttributeNames</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>abc82babd19360e500b6b335a8d6c83d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; base::AttributeBase * &gt;</type>
      <name>AttributeObjects</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a4683ed93c60a81e0c3dc6faaf3c23765</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationInterface</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>adf48a2d466d5909faca21dc0e2d19fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a9688b4db749e0ab3a0cd1eafe0aaf2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttribute</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a916de084248760b621ff9efbb65a39ea</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAttribute</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>ad43de01de0fa000849289e9e60f50b36</anchor>
      <arglist>(const std::string &amp;name, T &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>Attribute&lt; T &gt; &amp;</type>
      <name>addAttribute</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a53a8c29748bafb1f3119d062c19dc0e1</anchor>
      <arglist>(const std::string &amp;name, Attribute&lt; T &gt; &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstant</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a5e1cb31505af2ec04d16cc0015f4ef32</anchor>
      <arglist>(const std::string &amp;name, const T &amp;cnst)</arglist>
    </member>
    <member kind="function">
      <type>Constant&lt; T &gt; &amp;</type>
      <name>addConstant</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a670818300e4efb32da6532fa815d1baa</anchor>
      <arglist>(const std::string &amp;name, Constant&lt; T &gt; &amp;cnst)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>aef82495c4e0b04ad555914c7216f76c1</anchor>
      <arglist>(const std::string &amp;name, T &amp;prop)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a1f56e23ad7dbb378acc61367c281adf0</anchor>
      <arglist>(const std::string &amp;name, Property&lt; T &gt; &amp;prop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAttribute</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a8e4f82517c3b1ec1297122ef1d9de0fe</anchor>
      <arglist>(base::AttributeBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAttribute</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>aa15a32cd1584071f1dc75a5bbea24f88</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstant</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>aacb93dbd0439b6b67abe7e5aecfdc2fe</anchor>
      <arglist>(base::AttributeBase &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a51c56f8a6e874cbbe551270fd8bc4047</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>aef004414e0bd9e610188e750a88648c3</anchor>
      <arglist>(base::PropertyBase &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeProperty</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a7cea1140a7dc44ef70adbe472d2e54c3</anchor>
      <arglist>(base::PropertyBase &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>getProperty</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>accd042c5788def6124d04d9ea0b37c20</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setValue</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>ae42d3a355376882088f6c7f407d961a5</anchor>
      <arglist>(base::AttributeBase *ab)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeValue</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>aac2d3b696e81c6f72386cbc37f41d087</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>ab56fd107358cd0a8ebdfe2aead4e8a24</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;repl, bool instantiate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadValues</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a537659ebd311cd50a0d441f4e7f4a595</anchor>
      <arglist>(AttributeObjects const &amp;new_values)</arglist>
    </member>
    <member kind="function">
      <type>AttributeObjects const &amp;</type>
      <name>getValues</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>ab8004606abadbf6bfd292b22c7ca9227</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AttributeNames</type>
      <name>getAttributeNames</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>a8b113f5fc0f51f1e822b5b79e8528d1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PropertyBag *</type>
      <name>properties</name>
      <anchorfile>classRTT_1_1ConfigurationInterface.html</anchorfile>
      <anchor>ac2398778a4b987d13ad205de64b65475</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::ConnPolicy</name>
    <filename>classRTT_1_1ConnPolicy.html</filename>
    <member kind="function">
      <type></type>
      <name>ConnPolicy</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a5832b057a170897ff72e6aea4dbf7074</anchor>
      <arglist>(int type=DATA, int lock_policy=LOCK_FREE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConnPolicy</type>
      <name>buffer</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a3cdc5cde7d480646930f53f3ddae45a4</anchor>
      <arglist>(int size, int lock_policy=LOCK_FREE, bool init_connection=false, bool pull=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConnPolicy</type>
      <name>circularBuffer</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a7e226c7c31f4032d4bd00387a5da6189</anchor>
      <arglist>(int size, int lock_policy=LOCK_FREE, bool init_connection=false, bool pull=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConnPolicy</type>
      <name>data</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>abcd35a8498d2e4e9d2f0ed2c15651edd</anchor>
      <arglist>(int lock_policy=LOCK_FREE, bool init_connection=true, bool pull=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a3b2c137e8a91f64c9bbbf90d2bf1065f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a5da839ba68d6ff35ddc44171562ed356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lock_policy</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a81987dec8fc26fd596223728663f9a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pull</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>adbb615689773110a6c329c8b631fa1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a86aca1d2334c9d0cdd59dbb25a2d8d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>transport</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a3e6dc850be01332f49787012ab499a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>data_size</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a6b4b2c1bc23e0b582bc3b42689c49a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name_id</name>
      <anchorfile>classRTT_1_1ConnPolicy.html</anchorfile>
      <anchor>a914fd52d0a23a50c3c3f19919c663737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::DataFlowInterface</name>
    <filename>classRTT_1_1DataFlowInterface.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; base::PortInterface * &gt;</type>
      <name>Ports</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a8aa0a7f72a75baf5d4993816de8d0b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>PortNames</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>ad7e28572572757c85aefab22f103dff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataFlowInterface</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>acd2b194e02b004e1f6d4df8566b191b8</anchor>
      <arglist>(Service *parent=0)</arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface &amp;</type>
      <name>addPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>ae4cc8251add66d43626fb5a36630a86d</anchor>
      <arglist>(const std::string &amp;name, base::PortInterface &amp;port)</arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface &amp;</type>
      <name>addPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a7439b0849223846eaef9e857e2863b8f</anchor>
      <arglist>(base::PortInterface &amp;port)</arglist>
    </member>
    <member kind="function">
      <type>base::InputPortInterface &amp;</type>
      <name>addEventPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a089897b16e398886de8a3b0fb86b1045</anchor>
      <arglist>(const std::string &amp;name, base::InputPortInterface &amp;port, SlotFunction callback=SlotFunction())</arglist>
    </member>
    <member kind="function">
      <type>base::InputPortInterface &amp;</type>
      <name>addEventPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a6ee64763dfe8053940fa81fe2582d5be</anchor>
      <arglist>(base::InputPortInterface &amp;port, SlotFunction callback=SlotFunction())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a176244c5979a8010ae7dcc0a3db3bb63</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Ports</type>
      <name>getPorts</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a697023207fdd61c0ae65d3f7b55bf57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PortNames</type>
      <name>getPortNames</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>adb1cd98ccf5d14b6a510f65b37bae841</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface *</type>
      <name>getPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a87a4e6066c255dd36059f5e9d791eecb</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPortDescription</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>af969a2411243abdea4a897753dc68850</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPortDescription</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>ad21b73e9f5e1e6186ad10b3ec0a1ffe7</anchor>
      <arglist>(const std::string &amp;name, const std::string description)</arglist>
    </member>
    <member kind="function">
      <type>TaskContext *</type>
      <name>getOwner</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a2a8228f2601888b717209ed65379f84f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Service *</type>
      <name>getService</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>aedae8dc1fc49511be315d4abe1682605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface &amp;</type>
      <name>addLocalPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a958627b0442cb97f4e91f9fae0f6eee0</anchor>
      <arglist>(base::PortInterface &amp;port)</arglist>
    </member>
    <member kind="function">
      <type>base::InputPortInterface &amp;</type>
      <name>addLocalEventPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>ae90b18e5b4d26af2062cff0feaf9cb57</anchor>
      <arglist>(base::InputPortInterface &amp;port, SlotFunction callback=SlotFunction())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLocalPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>abdccc95629af8c46757fc5973ab10e10</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getPortType</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a8366db58aee0b4db7cce0cf1601e7d7d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a2b062c4788b996b9c4ebf9906d925e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dataOnPort</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>adb2eb3405418171a632e2d3db021c981</anchor>
      <arglist>(base::PortInterface *port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Service *</type>
      <name>createPortObject</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>ad8a5bb35c562641a32e2fe907c8a6efb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ports</type>
      <name>mports</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a40f3e00a2bb63d6a221ac0b78bb52f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Service *</type>
      <name>mservice</name>
      <anchorfile>classRTT_1_1DataFlowInterface.html</anchorfile>
      <anchor>a786bd9c13ab8ac9af980daaa4d0f8784</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::ExecutionEngine</name>
    <filename>classRTT_1_1ExecutionEngine.html</filename>
    <base>RTT::base::RunnableInterface</base>
    <member kind="function">
      <type></type>
      <name>ExecutionEngine</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a1dca09fcf4886ae4e7bd677201a7489a</anchor>
      <arglist>(base::TaskCore *owner=0)</arglist>
    </member>
    <member kind="function">
      <type>base::TaskCore *</type>
      <name>getParent</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a32a0b5dbeb1b46b264a938c6d3bfe69b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addChild</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a45f75f30232e7a789a62e9391ac34889</anchor>
      <arglist>(base::TaskCore *tc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeChild</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>af20f84c969d11c6450c0f9e244f7461f</anchor>
      <arglist>(base::TaskCore *tc)</arglist>
    </member>
    <member kind="function">
      <type>base::TaskCore *</type>
      <name>getTaskCore</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a7b64998ed8a783549a53405a30b701e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a9e0d36338cc3c7467325b8408f4f4648</anchor>
      <arglist>(base::DisposableInterface *c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>runFunction</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a42f7fe7c3d76cc6ab5f27e4b92b91eb7</anchor>
      <arglist>(base::ExecutableInterface *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeFunction</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>afdd4e66095262fd9f05e9f9d0f6ab32c</anchor>
      <arglist>(base::ExecutableInterface *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeSelfFunction</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a9ed7d8245e3b8a7363b535770ffd1b45</anchor>
      <arglist>(base::ExecutableInterface *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForMessages</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>aeb235144afc09805d9cd1982afac023b</anchor>
      <arglist>(const boost::function&lt; bool(void)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForFunctions</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a4703380e45a26dd1a0ef62c6cb3069eb</anchor>
      <arglist>(const boost::function&lt; bool(void)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stopTask</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a1d22ea9534992a8e6416ec6838d73b84</anchor>
      <arglist>(base::TaskCore *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionTask</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>af371ca99138fb1b44857e3f796fa9477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaster</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a6e9ba95daa969ce48537a862fb513bd7</anchor>
      <arglist>(ExecutionEngine *master)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setActivity</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>ac8b290342974c0b41c97515b1a4e9fd6</anchor>
      <arglist>(base::ActivityInterface *task)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a6faeed04034647645557eb05f6f3eec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual os::ThreadInterface *</type>
      <name>getThread</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a10c3cbd96505481cbd9c2f5081c2cd72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ActivityInterface *</type>
      <name>getActivity</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a70c18e6321d3e6929e0097940d68c1ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>waitForMessagesInternal</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>ac489df0ded78420f7eb798dc9ce888fb</anchor>
      <arglist>(boost::function&lt; bool(void)&gt; const &amp;pred)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>waitAndProcessMessages</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a9b1435416406d34e86fb03289ea2d53e</anchor>
      <arglist>(boost::function&lt; bool(void)&gt; const &amp;pred)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>waitAndProcessFunctions</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a5a1d79b5da733c511d90d8b4562de5eb</anchor>
      <arglist>(boost::function&lt; bool(void)&gt; const &amp;pred)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a37a60f7b0673bab85e3c024903aed7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>aaae452e029ed5e188ac76d9447befc6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a26205393f406511efbf43360af25f4bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a968d06304e043aa67075f5da402eaa9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasWork</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a3e767baa0ee365ed77142e755bc51323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::TaskCore *</type>
      <name>taskc</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a6fc9359abc8c2d9c484763618b562f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::MWSRQueue&lt; base::DisposableInterface * &gt; *</type>
      <name>mqueue</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a49ec437ba2d6d809b9b08472c732c9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::MWSRQueue&lt; base::ExecutableInterface * &gt; *</type>
      <name>f_queue</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a466a68650254e029d4eea6722ba5915a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExecutionEngine *</type>
      <name>mmaster</name>
      <anchorfile>classRTT_1_1ExecutionEngine.html</anchorfile>
      <anchor>a74d7968137f1997f83847cd5119ac5b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::name_not_found_exception</name>
    <filename>structRTT_1_1name__not__found__exception.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::invalid_handle_exception</name>
    <filename>structRTT_1_1invalid__handle__exception.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::wrong_number_of_args_exception</name>
    <filename>structRTT_1_1wrong__number__of__args__exception.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::wrong_types_of_args_exception</name>
    <filename>structRTT_1_1wrong__types__of__args__exception.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::no_asynchronous_operation_exception</name>
    <filename>structRTT_1_1no__asynchronous__operation__exception.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::non_lvalue_args_exception</name>
    <filename>structRTT_1_1non__lvalue__args__exception.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::Handle</name>
    <filename>classRTT_1_1Handle.html</filename>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>a82a5c3e2fc0bb388b41fdcfa1d701128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>a0c325c0c5c68adfaaa8ea1599f01a7dd</anchor>
      <arglist>(const Handle &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>a627a33bfd6babc34f85020fd4e74704e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>a0ea6e1bf4c51644f965291b644060ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>aa61c7837f237118f2b227b8e70b801c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>ac4f30e91f7a44d68817a78e8cac37ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>ac9a097e86cc5011edea003506c586d43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>aaa399cd6ec7750beccf00f636f23bf7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>connection_t</type>
      <name>m_conn</name>
      <anchorfile>classRTT_1_1Handle.html</anchorfile>
      <anchor>a5a4853f46dc7a14c25cebcd8e276de2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::ScopedHandle</name>
    <filename>classRTT_1_1ScopedHandle.html</filename>
    <base>RTT::Handle</base>
    <member kind="function">
      <type></type>
      <name>~ScopedHandle</name>
      <anchorfile>classRTT_1_1ScopedHandle.html</anchorfile>
      <anchor>aa2af236d54711154fa277221155f7fab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::CleanupHandle</name>
    <filename>classRTT_1_1CleanupHandle.html</filename>
    <base>RTT::Handle</base>
    <member kind="function">
      <type></type>
      <name>~CleanupHandle</name>
      <anchorfile>classRTT_1_1CleanupHandle.html</anchorfile>
      <anchor>a3b354a6a680dd20ca18fa583a941f17d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::InputPort</name>
    <filename>classRTT_1_1InputPort.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::InputPortInterface</base>
    <member kind="function">
      <type>FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a8167df81370f58c85603820f97310251</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source)</arglist>
    </member>
    <member kind="function">
      <type>FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a270efcef40b55f9c5192665d34d04fcf</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, bool copy_old_data)</arglist>
    </member>
    <member kind="function">
      <type>FlowStatus</type>
      <name>readNewest</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>af5f3b2b72ac22a1a39f24eae29015298</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, bool copy_old_data=true)</arglist>
    </member>
    <member kind="function">
      <type>FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a95b4999024273fd728de1dd988550069</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::reference_t sample)</arglist>
    </member>
    <member kind="function">
      <type>FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a1e98125fb587c31b7663d635d43eb2a8</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::reference_t sample, bool copy_old_data)</arglist>
    </member>
    <member kind="function">
      <type>FlowStatus</type>
      <name>readNewest</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a8640bae13f2b85bffd473b8a76169f19</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::reference_t sample, bool copy_old_data=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDataSample</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>affaf0a04b9e7090eb662c7d91de47120</anchor>
      <arglist>(T &amp;sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>acaad05cd96e5f2d9128f5446e1d16771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PortInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a8028ae5951d994536c51889975baad1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PortInterface *</type>
      <name>antiClone</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>aa01f161bdd68dea7fe9fd8918668ec35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase *</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a3e0aafca2988526f61cdde6cd473f56c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>a49af94675fe1711dfb9c7607077d107e</anchor>
      <arglist>(ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Service *</type>
      <name>createPortObject</name>
      <anchorfile>classRTT_1_1InputPort.html</anchorfile>
      <anchor>abd981129bffa516bca0e3cef0935aff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a4dc8c85b8e3d63a8e77ebfe9fef595aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addConnection</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>ad259037c6eed8983e67ca07015dd0658</anchor>
      <arglist>(internal::ConnID *port_id, ChannelElementBase::shared_ptr channel_input, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeConnection</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>ae786e63b56be500d822b8cac0a0093de</anchor>
      <arglist>(internal::ConnID *cid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a70be1ab5a8f69c102bea50b47dad4c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>af506a1db9628755fa8b31a6325637a13</anchor>
      <arglist>(PortInterface *port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a27d36f261f7f5464b112b4d164ac0374</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>channelReady</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a05f20ca7d23ee685fb154e4759fc6b60</anchor>
      <arglist>(base::ChannelElementBase::shared_ptr channel, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signalInterface</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>ab95d54ee56886bdab20eca3dc4017df8</anchor>
      <arglist>(bool true_false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a6473f26ea0a6bfc6669ce2ae861850e9</anchor>
      <arglist>(PortInterface *other, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a42d23ccfc567f217127b83ea822b9910</anchor>
      <arglist>(PortInterface *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const internal::ConnectionManager *</type>
      <name>getManager</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>ac7eb4fbf0ce656faa66559028d28f6e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>buildRemoteChannelOutput</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>af91b3e2733b8928f41eb96b5b8794fe8</anchor>
      <arglist>(base::OutputPortInterface &amp;output_port, types::TypeInfo const *type_info, base::InputPortInterface &amp;input, const ConnPolicy &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::ConnID *</type>
      <name>getPortID</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>aa4120c928e760540bd17fee8c7c8722f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>ad2bc3d97cfcb408a4452334323df7ffd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setName</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a2bc00aa5b85d1d8aa9b5f2b105809b89</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDescription</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a6d6d640f7a6f5c3485b70bb2672e13e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PortInterface &amp;</type>
      <name>doc</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a4bed453e1d7211b72d81707efe1bd192</anchor>
      <arglist>(const std::string &amp;desc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocal</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>ae32595f49031daead1d5c98d28b91c32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>serverProtocol</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a9a0a475868cc8387eb05c116c572a192</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterface</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a963599af7a0eb16cca2d4cdda9ba9fe4</anchor>
      <arglist>(DataFlowInterface *iface)</arglist>
    </member>
    <member kind="function">
      <type>DataFlowInterface *</type>
      <name>getInterface</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>ae53d9ec4f148fd83cc6cd1819e0d451b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a36785fa5f76e8967be971e080a4980fa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::Logger</name>
    <filename>classRTT_1_1Logger.html</filename>
    <class kind="struct">RTT::Logger::D</class>
    <class kind="struct">RTT::Logger::In</class>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>afeb14ef4145301474e0b1b5b62fd1d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ostream &amp;(*</type>
      <name>LogFunction</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a1752ea9be856caeb2ecc677c6ebb7983</anchor>
      <arglist>)(std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>os::TimeService::ticks</type>
      <name>getReferenceTime</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a1be43e58ab3dd852acfd3370de785541</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allowRealTime</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>af34355989b7f7616d74b0abe467c2356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disallowRealTime</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a91181a87145660d8af192abd82532c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mayLogStdOut</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>af860a41e97f0f256f2dc8835fd780bfd</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mayLogFile</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a8476c053747bae87a6e7f71f45df5a1e</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>in</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a079e4697cf009c4e6d4607df0a02a4fc</anchor>
      <arglist>(const std::string &amp;modname)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>out</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>ae56d15ff0790870a90309229075d8405</anchor>
      <arglist>(const std::string &amp;modname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLogModule</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a1dadac09467605ac946202688b3c38ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startup</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>aba84e0b2933403d0cd1545ccbd17c600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a6d350676e8b6369f3708ddd027ffa828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLogLine</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a1f4608855f0042fb70423e4845a431f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdStream</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a857179fde0f4813f54ad8feba48541c7</anchor>
      <arglist>(std::ostream &amp;stdos)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a944f13e0dcf367b81a513db20c521c4c</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>af6b8fa96979bf3f9d91ace1ad6ca25b9</anchor>
      <arglist>(LogLevel ll)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>ac0937138324fb2f4d51805be7549c232</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>ae175df4f8b58af593e64f13b0d3f6482</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a3fc0e83b206bfa3996ffb2d2e8955936</anchor>
      <arglist>(std::ostream &amp;(*pf)(std::ostream &amp;))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogLevel</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>ae56db21b2ff0c2b7eddb62b1f054e16d</anchor>
      <arglist>(LogLevel ll)</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>getLogLevel</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a6cd3858f608c39ebb571d0940f1ca771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logflush</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a0f3cb5c12f408deef44f34e256d038b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logendl</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a7ef192af2f69fdc887ef825e9134c4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lognl</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a792d3d611746d64efe30a6c3f23bc6ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>nl</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>ac6fabc2ad9f34905a576dff32952e173</anchor>
      <arglist>(std::ostream &amp;__os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>flush</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>ad8b0f7409f32a85cb35f7ddb322f77be</anchor>
      <arglist>(std::ostream &amp;__os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger *</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a44f149cf8333bea87dfcefb48c1381c9</anchor>
      <arglist>(std::ostream &amp;str=std::cerr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a9b0b07ca44c9c2d536c93bff8a01cf77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger &amp;</type>
      <name>log</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>aaede943bd6496ce6fb5cb9b848deff6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger &amp;</type>
      <name>log</name>
      <anchorfile>classRTT_1_1Logger.html</anchorfile>
      <anchor>a743b011bcc1f0eeda77ebcd4ef4b797e</anchor>
      <arglist>(LogLevel ll)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::Logger::D</name>
    <filename>structRTT_1_1Logger_1_1D.html</filename>
    <member kind="function">
      <type>void</type>
      <name>logit</name>
      <anchorfile>structRTT_1_1Logger_1_1D.html</anchorfile>
      <anchor>a065a218fc962c1e1a93846d3a50ebcec</anchor>
      <arglist>(std::ostream &amp;(*pf)(std::ostream &amp;))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>showLevel</name>
      <anchorfile>structRTT_1_1Logger_1_1D.html</anchorfile>
      <anchor>ae6d47a25804b9eb50e5b763e3272043c</anchor>
      <arglist>(LogLevel ll) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::Logger::In</name>
    <filename>structRTT_1_1Logger_1_1In.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::Marshalling</name>
    <filename>classRTT_1_1Marshalling.html</filename>
    <base>RTT::ServiceRequester</base>
    <member kind="function">
      <type></type>
      <name>Marshalling</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>a70c8742e576d1ce0b3de42fab0b3804e</anchor>
      <arglist>(TaskContext *parent)</arglist>
    </member>
    <member kind="function">
      <type>TaskContext *</type>
      <name>getServiceOwner</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a39024b9e38b8d82a785476c79556e07a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwner</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>abea525ae42bb9f6627752da9e51c1ab3</anchor>
      <arglist>(TaskContext *new_owner)</arglist>
    </member>
    <member kind="function">
      <type>Service::shared_ptr</type>
      <name>getReferencedService</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a817af2ee38db6c5db4160b93dc0f6b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addServiceRequester</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>aaee8b318295a8aa8a01ed084ab9563a0</anchor>
      <arglist>(shared_ptr obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requiresService</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a1f0372d69a3cbfd01e50bb409dccf7b2</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a22bdc9b90ca3afb93b02251093d07c2d</anchor>
      <arglist>(Service::shared_ptr sp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>aea5e4e922108a328a9127bc081e8883a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>ad035ee2aea51297b62fe0db5e857e945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a39c5c340adcd84241bfd2e274045ce46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;filename)&gt;</type>
      <name>loadProperties</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>ada794cec547d1c65cd24189eafc2d0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;filename)&gt;</type>
      <name>storeProperties</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>ac4a7ba2711dddd63c4d840928af300c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;filename)&gt;</type>
      <name>readProperties</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>a0ce66e29200e0427a402d4175045cb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;filename)&gt;</type>
      <name>updateProperties</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>afda72de1fcab5c879123c417f33b6f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;name, const std::string &amp;filename)&gt;</type>
      <name>readProperty</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>af1a6bd88b6974ee554dfcb191b53d80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;filename)&gt;</type>
      <name>writeProperties</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>a989d8a0122a4b3117d4b35a2006a2ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;filename)&gt;</type>
      <name>updateFile</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>ad79f77064ca55193ee69382822a719f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperationCaller&lt; bool(const std::string &amp;name, const std::string &amp;filename)&gt;</type>
      <name>writeProperty</name>
      <anchorfile>classRTT_1_1Marshalling.html</anchorfile>
      <anchor>abe028b90ebec24c1c6b207d7eab9ba0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, base::OperationCallerBaseInvoker * &gt;</type>
      <name>OperationCallers</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a85356ef993ed7a218c911b9df8bf7800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Requests</type>
      <name>mrequests</name>
      <anchorfile>classRTT_1_1ServiceRequester.html</anchorfile>
      <anchor>a561b5a939618c1bf8b03c51a6cf9ddf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::OperationCaller</name>
    <filename>classRTT_1_1OperationCaller.html</filename>
    <templarg>SignatureT</templarg>
    <base>InvokerSignature&lt; boost::function_traits&lt; SignatureT &gt;::arity, SignatureT, boost::shared_ptr&lt; base::OperationCallerBase&lt; SignatureT &gt; &gt; &gt;</base>
    <base>RTT::base::OperationCallerBaseInvoker</base>
    <member kind="function">
      <type></type>
      <name>OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a7bda2257d8bc399e546385977544a584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>abf227de54d747229f27c4fd9dc6ba900</anchor>
      <arglist>(std::string name, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>ac02e3b899eb459e1bf7c06dad013f3d8</anchor>
      <arglist>(const OperationCaller &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>OperationCaller &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a0b85f69b09e449d6c265d33adb3f2fd4</anchor>
      <arglist>(const OperationCaller &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>aea18ca45787117eb2e04cbbb24bb7c0d</anchor>
      <arglist>(boost::shared_ptr&lt; base::DisposableInterface &gt; implementation, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a6c14a10e4bc6377cff6c39b793eff851</anchor>
      <arglist>(OperationInterfacePart *part, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a5f3b1571c335fcdfb1dc3f20d5a548d3</anchor>
      <arglist>(const std::string &amp;name, ServicePtr service, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type>OperationCaller &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a8c654131b4ad5527d72444ad4ce3e83b</anchor>
      <arglist>(boost::shared_ptr&lt; base::DisposableInterface &gt; implementation)</arglist>
    </member>
    <member kind="function">
      <type>OperationCaller &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a4cbfe1bce71065fd7bbca6dc967e456d</anchor>
      <arglist>(OperationInterfacePart *part)</arglist>
    </member>
    <member kind="function">
      <type>OperationCaller &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a4ce6d9ba27e5d66b71929d1194ec6818</anchor>
      <arglist>(ServicePtr service)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>aee226afba7146ecbb55f43552d41b65e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a5c67bdd33f313444ff67aec6aacf699f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>afbd5dc6b66748cb9c86173b20bbd8fa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setImplementation</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>ae1b3e3eb15fab0cb33ac7def4276b55a</anchor>
      <arglist>(boost::shared_ptr&lt; base::DisposableInterface &gt; implementation, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setImplementationPart</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a48b7842332d5dc1b6222024bb504cae5</anchor>
      <arglist>(OperationInterfacePart *orp, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type>const OperationCallerBasePtr</type>
      <name>getOperationCallerImpl</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a2efbe00cd744807fd2ca1e1901db7b6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperationCallerImpl</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>af2a047d577bace9b4d1efa04932b8d37</anchor>
      <arglist>(OperationCallerBasePtr new_impl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a2729c2f741673bf8c9d4d6e95169c83b</anchor>
      <arglist>(ExecutionEngine *caller)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>a7fda0784aad8cadb57166bea771203a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupOperationCaller</name>
      <anchorfile>classRTT_1_1OperationCaller.html</anchorfile>
      <anchor>ad8a8a6f5cc912c3f20e96e070ad864d9</anchor>
      <arglist>(OperationInterfacePart *part)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::OperationInterface</name>
    <filename>classRTT_1_1OperationInterface.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; base::DataSourceBase::shared_ptr &gt;</type>
      <name>Arguments</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a09243638f9e56f5322ccf49cc67ca4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ArgumentDescription &gt;</type>
      <name>Descriptions</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a33038c30f37f51ba4e0f71ffa3dd78db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a7744bc2d6caa163efc153b28e89d3ce6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getNames</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a91ddca9d0376b78c7617ac790f985e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMember</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a1f0c72ef924fbd180eebbcc1e93e590b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArity</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>ac6d8ac5248f6005053d90cdfe76cd05a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCollectArity</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a0151ba33c1e610eb168c8b72b2f69545</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSynchronous</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a1106ef1dc8f222a0595e50ad93637b45</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produce</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a8762e2fbdbaa9e88f90474c2bb73cfc4</anchor>
      <arglist>(const std::string &amp;name, const Arguments &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>ad3e9bd1086d592eba8612e7bd0f67b9d</anchor>
      <arglist>(const std::string &amp;name, const Arguments &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a9330b6a57234e636220e32636a16a45a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a91a921268272a88f33029e220c2b512c</anchor>
      <arglist>(const std::string &amp;name, const Arguments &amp;args, internal::DataSource&lt; bool &gt;::shared_ptr blocking) const </arglist>
    </member>
    <member kind="function">
      <type>Descriptions</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a843066924eb7c079832718c5cf15e7a1</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getResultType</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a9887ac7ed938277edf7063063e849223</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescription</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a0154dd6d15f610f5347ed2a4e9e96bcf</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a7530f8d747ccb09e5d4c68d1177bd060</anchor>
      <arglist>(const std::string &amp;name, OperationInterfacePart *part)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>a72938e680f9d2394b08c6ef45aee2e80</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>OperationInterfacePart *</type>
      <name>getPart</name>
      <anchorfile>classRTT_1_1OperationInterface.html</anchorfile>
      <anchor>af1793b4990e68890a210820bd8922311</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::OperationInterfacePart</name>
    <filename>classRTT_1_1OperationInterfacePart.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>abcd1c698b958ae35a70eeae0d64c99b6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>description</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>aee4f0cbbeaaa6b2de3d6442c42ab4ddd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ArgumentDescription &gt;</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>a33e0ae26fb003a4c991376f452da56b8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>resultType</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>a143e1c6d1ff84c84175397d2fae99ae6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>adec3aefe99248918dfa083c6f94dfff9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const types::TypeInfo *</type>
      <name>getArgumentType</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>a946a835e85fc4df63ee9d09f6e811bc7</anchor>
      <arglist>(unsigned int arg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>collectArity</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>aa41c101b800f84634c3bafba0534f310</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const types::TypeInfo *</type>
      <name>getCollectType</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>a48013c81d22bfcd90f5fc003e156630e</anchor>
      <arglist>(unsigned int arg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produce</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>acb8bfc58feeb11cbbebf219d1bd294fd</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>a5bb20c59d3e2b24b44d071727d4b3406</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>affb35c4fa2b0c3363184562a7a674e12</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>ae742505198d014dd3086570fa746427a</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, internal::DataSource&lt; bool &gt;::shared_ptr blocking) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTT_API boost::shared_ptr&lt; base::DisposableInterface &gt;</type>
      <name>getLocalOperation</name>
      <anchorfile>classRTT_1_1OperationInterfacePart.html</anchorfile>
      <anchor>aac9cfc91ff488aab9fa1d5a702701ee8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::OutputPort</name>
    <filename>classRTT_1_1OutputPort.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::OutputPortInterface</base>
    <member kind="function">
      <type></type>
      <name>OutputPort</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a594e5687937dd7256c9bf9fbecff91d9</anchor>
      <arglist>(std::string const &amp;name=&quot;unnamed&quot;, bool keep_last_written_value=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepLastWrittenValue</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>ab5529a0e5c2a2d3127993bea73320dda</anchor>
      <arglist>(bool keep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keepsLastWrittenValue</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a7a07ddb1c8688afd44166a6bd51c7c51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getLastWrittenValue</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a107d2690871b28b792931e2fb85dcf64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLastWrittenValue</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a8e2e411770663dcfbbb0df1840c5c105</anchor>
      <arglist>(T &amp;sample) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a19f3cff9591bb41238371dc52d7e2edd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataSample</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a9ba3e7b6c569e312923a075f79bb92b4</anchor>
      <arglist>(const T &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>ad1b4a8113cc743f1b69745879c1205d6</anchor>
      <arglist>(const T &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>ab140a9c5e83abfaf9b73a737b2f25a67</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>ad9a0c0e4724c6fd35068fbd750440037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PortInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a37128c51b755d32b4179fdd484e31286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PortInterface *</type>
      <name>antiClone</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a4b4f6b4b97b600f4ae595bbfdbd9d34a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>createConnection</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a6426ddf528b5f2bb51fea1ca29c03826</anchor>
      <arglist>(base::InputPortInterface &amp;input_port, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>ac93cd73c53bc49c7139482c2af117857</anchor>
      <arglist>(ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Service *</type>
      <name>createPortObject</name>
      <anchorfile>classRTT_1_1OutputPort.html</anchorfile>
      <anchor>a1cf40612f7336461fbe3b7af72f66690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addConnection</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>aaba7cd2c1376d1d3cc1d7ad59e509dd1</anchor>
      <arglist>(internal::ConnID *port_id, ChannelElementBase::shared_ptr channel_input, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a4161b64caee637e5c8d6f94975c59efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>afaa3b9ed3dd695e7cffa919a408dcfdb</anchor>
      <arglist>(PortInterface *port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a65e94efb6dbae820459ad0ff68ebe235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createDataConnection</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a643c26243bd4bfabc554f2885d2a2381</anchor>
      <arglist>(InputPortInterface &amp;sink, int lock_policy=ConnPolicy::LOCK_FREE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createBufferConnection</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a6774ae021b7ae34e459e7c8aec848def</anchor>
      <arglist>(InputPortInterface &amp;sink, int size, int lock_policy=ConnPolicy::LOCK_FREE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createConnection</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a5c8858d877b53d2b89156e254a8b8834</anchor>
      <arglist>(InputPortInterface &amp;sink)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeConnection</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a809970a3c7efec2fafd56cd86e4e7cd7</anchor>
      <arglist>(internal::ConnID *cid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>aed29df549e517880dc5df0ae685c8015</anchor>
      <arglist>(PortInterface *other, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a826d2aed68435967e92e70a1f9111926</anchor>
      <arglist>(PortInterface *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const internal::ConnectionManager *</type>
      <name>getManager</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a714bbe977c0e5f127c5ea6751bdab2b9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::Property</name>
    <filename>classRTT_1_1Property.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::PropertyBase</base>
    <member kind="typedef">
      <type>boost::remove_const&lt; typename boost::remove_reference&lt; T &gt;::type &gt;::type</type>
      <name>value_t</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a5a813af024efc0d34ff2c1dfdbc10a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a5d18e241e6f80cc48e8b583ed3f09aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a14004024f30b32143ef8bd8c25be3937</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>aa637228e7e08468aa0ad57efcc5f930e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, param_t value=value_t())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a6781571d444899248a53adb7f222ea2d</anchor>
      <arglist>(const Property&lt; T &gt; &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a2123deaf939323883cc45bc907ea7990</anchor>
      <arglist>(base::PropertyBase *source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>aab9c79e84b980d1676abaec9ecfb1a43</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, typename internal::AssignableDataSource&lt; DataSourceType &gt;::shared_ptr datasource)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>aae25cf76bb2427bf974033fd316cff1b</anchor>
      <arglist>(param_t value)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a7701e80218e8e2f7be2ea2c2cc77a788</anchor>
      <arglist>(base::PropertyBase *source)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>ac2360909a3d556c4a1fc56a952b94930</anchor>
      <arglist>(Property&lt; T &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>doc</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a3b1dd251b6fab9089bfed94bb3e11744</anchor>
      <arglist>(const std::string &amp;descr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_t</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>ac3ac8fb2e3e082c26c3a6dae3ae5285e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSourceType</type>
      <name>get</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a6d75dace06b2798ea3ae0631e0681aca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a1d50bd7460f8122ceadebb62eac76e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a9f4b22db7e05bdbe3cb8883584b14fd9</anchor>
      <arglist>(param_t v)</arglist>
    </member>
    <member kind="function">
      <type>reference_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>addaf2111f1a33e904b22d562dcbacd63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a9e7b00fa62d9bd49b7284eaf46e577fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>af0f50c4155f895785af0ea05f87933c5</anchor>
      <arglist>(base::PropertyIntrospection *pi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a081dfa06af6a55c1666522510fd574f5</anchor>
      <arglist>(base::PropertyBagVisitor *pi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a9699acbb0c3c4ee303466e2bab187290</anchor>
      <arglist>(const base::PropertyBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>refresh</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>af2cd7ad18f8a1e991466aeadc534f3b4</anchor>
      <arglist>(const base::PropertyBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a45938c484069c2d2b68fdf6093325ae9</anchor>
      <arglist>(const base::PropertyBase *other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>abb76dda9cd4c5bc9b1075360cb31ef5a</anchor>
      <arglist>(const Property&lt; T &gt; &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a1c1ed44652b45c29adb3e725c142cefb</anchor>
      <arglist>(const Property&lt; T &gt; &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refresh</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>ab9e1f14497f3d7ae0269ace208eb291f</anchor>
      <arglist>(const Property&lt; T &gt; &amp;orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Property&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a10037495b7b966e0ced0367e47ac021f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Property&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a88161ea97cb591047eaaeb457129c7e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Property&lt; T &gt; *</type>
      <name>create</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a760c37b4d3189c770bd9b0baa5f46dda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a5f93c1620a25210fdcff5174f66ea2ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setDataSource</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>ac9d46dd481fd0a8601326510bdf41beb</anchor>
      <arglist>(const base::DataSourceBase::shared_ptr &amp;dsb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>af25c6bd6155317133d462299bbb61469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a42b5562e4ba6998d0962d0348df16aba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a2ffa27aeb8740387619fd1ac6ac82fca</anchor>
      <arglist>(PropertyBagVisitor *pbi)</arglist>
    </member>
    <member kind="function">
      <type>RTT_API void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a859eac68a9ec53ae12fc2b6498745324</anchor>
      <arglist>(base::PropertyBagVisitor *pbi)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>acffe9d7c5d37675fdaf3dfd40017178a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>acfeea165b18bbfd62ef4a5273b5d4c5f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDescription</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>af3e03465e524680829a77b581b970fbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDescription</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a832fa5c1a45e29a9ce203180b5cc1080</anchor>
      <arglist>(const std::string &amp;desc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a500eb2a6a1a08b08f89656b2d5d23a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>compose</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a7ffc9f28a4013d7d12834f1fc5ceb339</anchor>
      <arglist>(const PropertyBag &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Property&lt; T &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1Property.html</anchorfile>
      <anchor>a13b3f9649cf7cef2ef3a5c74084df0ba</anchor>
      <arglist>(base::PropertyBase *prop)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_name</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a793e618e896400fa4fbf44312f66aeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_description</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a4713fca5cbd4dcc80dbef38242aacd54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::PropertyBag</name>
    <filename>classRTT_1_1PropertyBag.html</filename>
    <class kind="struct">RTT::PropertyBag::FindPropType</class>
    <member kind="typedef">
      <type>std::vector&lt; base::PropertyBase * &gt;</type>
      <name>Properties</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a8d472f1fd1b376390383f2529e22e53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Properties</type>
      <name>PropertyContainerType</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a385579fa7d83855efb8bbb7173738a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Properties::iterator</type>
      <name>iterator</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a3eca73142f1e7c18c0f04993a34cd873</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Properties::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aa35688ea2a0748808a8df325724829a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aa10a27fab9201edee65941081f0dc45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyBag</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>ace4791746550e941905bd0238d03b970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyBag</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a53337c16cd80a118135970873a180a2d</anchor>
      <arglist>(const std::string &amp;_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyBag</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a2d35bce5e5fdcc3fe7bc593bf28f3382</anchor>
      <arglist>(const PropertyBag &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyBag</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a4ca3afc1c773fec9fde6936781ec6396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a3436930410adc98d547b8d7c07a4dd9f</anchor>
      <arglist>(base::PropertyBase *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a85312b0a25bfa6d0045eb9478d1bfe1f</anchor>
      <arglist>(base::PropertyBase *p)</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a30809906cc055e715db698a6efbd3155</anchor>
      <arglist>(const std::string &amp;name, T &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>ab5377b32f92df2e4f83679f802130bfb</anchor>
      <arglist>(base::PropertyBase &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeProperty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aa25ed674a6a48444ac7cc746b9ea587c</anchor>
      <arglist>(base::PropertyBase *p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ownProperty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a81122ebb23fbfc2d9028670318a1f6f8</anchor>
      <arglist>(base::PropertyBase *p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ownsProperty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a5f63bcee44c0ee93d9d842bf9befac18</anchor>
      <arglist>(base::PropertyBase *p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aa4a7567273f706a9f716ef188f4cf1df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a2ecbf87cf73b8e377fb56c9ff2ca7d27</anchor>
      <arglist>(Names &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>Names</type>
      <name>list</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a27aa2e7939f6b1f05195e49038e76e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a5e303a63b2990c0a7ddb391733bd8645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>getProperty</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a208358bde188630901b99d01a93a4277</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; *</type>
      <name>getPropertyType</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a5d2825978bc3fee037bf39abc4f4648f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>getItem</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a73e11933b2187bd26b023c201174ed7f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aae5dd8560d94e2578e7e9d7820aa6ca9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a87b0cfc06afcf4d393648ef89fe6142f</anchor>
      <arglist>(base::PropertyIntrospection *pi) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a274447fc230d9e59555817a956ba6197</anchor>
      <arglist>(base::PropertyBagVisitor *pi) const </arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>find</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a16ea618a62c7d17c82e72f8b9b50a5da</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>findValue</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>afd98d892640c142495bb29c8aebc8e26</anchor>
      <arglist>(const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>PropertyBag &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aeb37f1f94b2281d58f4bb535f07d4cf8</anchor>
      <arglist>(const PropertyBag &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>PropertyBag &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>aca778290078ba9022ae97159e2aba9a9</anchor>
      <arglist>(const PropertyBag &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>PropertyBag &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a253c473e5d017f4898102a6cf2b7740a</anchor>
      <arglist>(base::PropertyBase *item)</arglist>
    </member>
    <member kind="function">
      <type>Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>ad099049a808cb79dac17496cf234e856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a31e34db78b8e078bb5597763753d144b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Properties</type>
      <name>getProperties</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a9cfded63073548e740ab6d57bed9bd7c</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Names</type>
      <name>getPropertyNames</name>
      <anchorfile>classRTT_1_1PropertyBag.html</anchorfile>
      <anchor>a401d25f814d128bfb9cf86abbdbff1e5</anchor>
      <arglist>() const </arglist>
    </member>
    <docanchor file="index" title="Introduction">intro</docanchor>
    <docanchor file="classRTT_1_1PropertyBag" title="Constructing PropertyBags">constr</docanchor>
    <docanchor file="classRTT_1_1PropertyBag" title="Using PropertyBags">usage</docanchor>
  </compound>
  <compound kind="struct">
    <name>RTT::PropertyBag::FindPropType</name>
    <filename>structRTT_1_1PropertyBag_1_1FindPropType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::SendHandle</name>
    <filename>classRTT_1_1SendHandle.html</filename>
    <templarg>T</templarg>
    <base>CollectSignature&lt; boost::function_traits&lt; internal::CollectType&lt; Signature &gt;::Ft &gt;::arity, internal::CollectType&lt; Signature &gt;::Ft, internal::CollectBase&lt; Signature &gt; * &gt;</base>
    <base>ReturnSignature&lt; boost::function_traits&lt; Signature &gt;::arity, Signature, internal::CollectBase&lt; Signature &gt;::shared_ptr &gt;</base>
    <member kind="function">
      <type></type>
      <name>SendHandle</name>
      <anchorfile>classRTT_1_1SendHandle.html</anchorfile>
      <anchor>af5c33d453d07475d96abd45b2f51f9ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SendHandle</name>
      <anchorfile>classRTT_1_1SendHandle.html</anchorfile>
      <anchor>aaa42b020464932834e359e9384b82fcd</anchor>
      <arglist>(const SendHandle &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SendHandle</name>
      <anchorfile>classRTT_1_1SendHandle.html</anchorfile>
      <anchor>a4134ed7bacd1d77a4eb1226787a1d2d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classRTT_1_1SendHandle.html</anchorfile>
      <anchor>a90c0b6edbcbe38a81546a76e05b0bb00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1SendHandle.html</anchorfile>
      <anchor>a6f4a3988062c36fa02c15fbcbc7ada42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SendStatus</type>
      <name>collect</name>
      <anchorfile>classRTT_1_1SendHandle.html</anchorfile>
      <anchor>a51c5c85783190867ee9becc0f589e64e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::file_parse_exception</name>
    <filename>classRTT_1_1file__parse__exception.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::parse_exception</name>
    <filename>classRTT_1_1parse__exception.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::Scripting</name>
    <filename>classRTT_1_1Scripting.html</filename>
    <base>RTT::ServiceRequester</base>
  </compound>
  <compound kind="class">
    <name>RTT::Service</name>
    <filename>classRTT_1_1Service.html</filename>
    <base>RTT::OperationInterface</base>
    <base>RTT::ConfigurationInterface</base>
    <base>RTT::DataFlowInterface</base>
    <member kind="function">
      <type></type>
      <name>Service</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a811a86324e277ee011f6941c27573f40</anchor>
      <arglist>(const std::string &amp;name, TaskContext *owner=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a5f73cc6c6b7e085a7c526eb342df2830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>doc</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a26f65c77b98b5361207242cf5b59cf8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doc</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a2a1eb79e816b491e71c03ae96e56f0eb</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a9efbfa07f131b186683525c964ce68a5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwner</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a5a4893628c8cc423c6e5b3511f9af536</anchor>
      <arglist>(TaskContext *new_owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a48caa7cb7c781b54bb5d3eb71fff4225</anchor>
      <arglist>(shared_ptr new_parent)</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>getParent</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a137b83848de6b783f1ef66b427b7588b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProviderNames</type>
      <name>getProviderNames</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a9f6a916611b84ec0efa63041d7448116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TaskContext *</type>
      <name>getOwner</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>af09c4e953c52113e8a117d7f65cae7ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExecutionEngine *</type>
      <name>getOwnerExecutionEngine</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a6e33b3a154e6e7e00d8a3f3adce25ac7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addService</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a5d23e90906042881cc9315e1bd98f449</anchor>
      <arglist>(shared_ptr obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeService</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>aaa0389e2b340c1c2b2405289eae7ff3a</anchor>
      <arglist>(std::string const &amp;service_name)</arglist>
    </member>
    <member kind="function">
      <type>Service::shared_ptr</type>
      <name>provides</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a224b685592dec643289798cac7ad8e2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Service::shared_ptr</type>
      <name>provides</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a52e9501a0c0ef27bde331ddaa5e63538</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>getService</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>ad51ab122e01b561762386fcc8fabb55d</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasService</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a986074c32d5232b44d12f62515c3cac2</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a490fc9133d21ccd6f8e2388ab07431c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getOperationNames</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a4ca6c54840653c4b0dfab69df8839598</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a7ac758c65de8fae3be3bc4ed3eac3495</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLocalOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>abcdccc873fb77f51f5d53cca01bcdf58</anchor>
      <arglist>(base::OperationBase &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; base::DisposableInterface &gt;</type>
      <name>getLocalOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a3f714307df9151bee776127196832859</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>OperationInterfacePart *</type>
      <name>getOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a43c2db6bcad1ea88a22191e8780d4e3c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>adffa32a19a1b58771146c56773ae5af2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setOperationThread</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a447c3a77e8dd12b18ba02b059604ee87</anchor>
      <arglist>(std::string const &amp;name, ExecutionThread et)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>addOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>abd4f94e4184b2f470053ad54c42e6dda</anchor>
      <arglist>(Operation&lt; Signature &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>addSynchronousOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>ad48f4deb45e99802ffd615015769fc0a</anchor>
      <arglist>(Operation&lt; Signature &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; typename internal::GetSignature&lt; Func &gt;::Signature &gt; &amp;</type>
      <name>addOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a9f467780775bea590fcb6e6eef72b580</anchor>
      <arglist>(const std::string name, Func func, Class *obj, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Func &gt; &amp;</type>
      <name>addOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a2fd3085e2a555ca4b7e7d01ac51ce7b7</anchor>
      <arglist>(const std::string name, Func *func, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; typename internal::GetSignature&lt; Func &gt;::Signature &gt; &amp;</type>
      <name>addSynchronousOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>ae01fee5e61de4416b8393b17fdde7d2f</anchor>
      <arglist>(const std::string name, Func func, Class *obj, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; typename internal::GetSignatureDS&lt; Func &gt;::Signature &gt; &amp;</type>
      <name>addOperationDS</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a16c55fbf8e8b5fbc74ff3fe5aaddf4bb</anchor>
      <arglist>(const std::string &amp;name, Func func, internal::DataSource&lt; boost::shared_ptr&lt; ObjT &gt; &gt; *sp, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>addOperationDS</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>ad5dd40574f3049800e2a8695f548f4b5</anchor>
      <arglist>(internal::DataSource&lt; boost::shared_ptr&lt; ObjT &gt; &gt; *sp, Operation&lt; Signature &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a0bd085079896f5242c5656f8ee5034a9</anchor>
      <arglist>(std::string name, const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function">
      <type>internal::OperationCallerC</type>
      <name>create</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a304d85203882c54aac4bbcab91d0da13</anchor>
      <arglist>(std::string name, ExecutionEngine *caller)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetOperation</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a594ee345ec9aefcde6f6a184107a4ec2</anchor>
      <arglist>(std::string name, base::OperationBase *impl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Service::shared_ptr</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a56d813e588db7acf6266492c53bb5062</anchor>
      <arglist>(const std::string &amp;name, TaskContext *owner=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Services</type>
      <name>services</name>
      <anchorfile>classRTT_1_1Service.html</anchorfile>
      <anchor>a072525873f8237dd7c733763fbc7bab3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::ServiceRequester</name>
    <filename>classRTT_1_1ServiceRequester.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::TaskContext</name>
    <filename>classRTT_1_1TaskContext.html</filename>
    <base>RTT::base::TaskCore</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>PeerList</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ac1ebba86c109e257343eb1f432e97079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TaskState</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Init</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296ad0f498835f4c0d0d028f17c3dded1808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PreOperational</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296a18beb1736430c2815bb79cc43d55a5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FatalError</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296aede93da035b525de95b4682f8a986dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Exception</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296aaf7a566a0f56822986b292ae5e90a286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Stopped</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296a56134dbafdb46e41026cf4c7b1bbb6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Running</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296ae9b19cff8d2fde7929812f4108ce80f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RunTimeError</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aec42df6b1b306b7a7102fa3bf8e2a296a176c10977c372f2762335620a6382bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaskContext</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ab0d1864a7bb1bdac038a2dfb43fe72c4</anchor>
      <arglist>(const std::string &amp;name, TaskState initial_state=Stopped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaskContext</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a8b1396bc3ad1ea241fb8247dfcdd4077</anchor>
      <arglist>(const std::string &amp;name, ExecutionEngine *parent, TaskState initial_state=Stopped)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a7aa7e91bf90f0793142432f74bb830a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setActivity</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a65fa89828cdf260496f27643e4ab9344</anchor>
      <arglist>(base::ActivityInterface *new_act)</arglist>
    </member>
    <member kind="function">
      <type>base::ActivityInterface *</type>
      <name>getActivity</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a6bb066129eb925e0a245509bb2c2cca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getActivity</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a5f4cefc2a489ea98d3d08137d8f9e97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a4eb5d5ee16d21907b5121b65ce7b1717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>abdcbcf1f47651e911ed91ddec6ecac7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a6620b7f7ed8497c4f4e4729f0be119c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a5808edd8ac174129cc861bfa485e8de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TaskState</type>
      <name>getTaskState</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aeebedaf344a1eae84f34b51ba052f299</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TaskState</type>
      <name>getTargetState</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a6c7eb9108377ea236a034970ce1882e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionEngine</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a2da9f3834b14d21614fd481eaed4ecec</anchor>
      <arglist>(ExecutionEngine *engine)</arglist>
    </member>
    <member kind="function">
      <type>const ExecutionEngine *</type>
      <name>engine</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>ad2522496caacc3e88065b5cb09dc2b7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExecutionEngine *</type>
      <name>engine</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>ac18ebf7b987f142c8dad4413be2bbd30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addPeer</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ac3d487151ec08587c525ea66ba9cb1c0</anchor>
      <arglist>(TaskContext *peer, std::string alias=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePeer</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a3c3c00069dfb5ad81a343d81e7bd30c4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePeer</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ae4364c541a521eaed563232606022061</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectPeers</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>aac2ffdaa9d9af59f5cbaceb33ff118aa</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>aa03a9ce88c728b6c996bf19f4ab3693d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectPeers</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a9a76246c2720b22546dd18ce0d0b38bf</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PeerList</type>
      <name>getPeerList</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a9d294341f8464b87c4609b2f89b5ecb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPeer</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a415123c0d3da013107eb7d0cf793a14d</anchor>
      <arglist>(const std::string &amp;peer_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TaskContext *</type>
      <name>getPeer</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a7bb58076846edaf52dd0ad6a4d64b110</anchor>
      <arglist>(const std::string &amp;peer_name) const </arglist>
    </member>
    <member kind="function">
      <type>Service::shared_ptr</type>
      <name>provides</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>af11b11de5bb15692305f1d1df3840540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Service::shared_ptr</type>
      <name>provides</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a25f9aabe8979225a1bf4e2825920ff66</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function">
      <type>ServiceRequester::shared_ptr</type>
      <name>requires</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a29517582b6df25769e5ee0c3b9af165a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ServiceRequester::shared_ptr</type>
      <name>requires</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a30eaef4efa1eea9ced363516523742d7</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectServices</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a4b0cf7b019969abe36f40bcdaa9fb427</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; ServiceType &gt;</type>
      <name>getProvider</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a0a29ef110689fbd9a49181921136cf4f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadService</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ad4faaafad020f0b5816f9ef6ae5bc87b</anchor>
      <arglist>(const std::string &amp;service_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPlugin</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ae775d497a2c66831079c104a9414d5bf</anchor>
      <arglist>(const std::string &amp;pluginPath)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>addOperation</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a4b21856b3e67a002937194e1ed20e24c</anchor>
      <arglist>(Operation&lt; Signature &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; typename internal::GetSignature&lt; Func &gt;::Signature &gt; &amp;</type>
      <name>addOperation</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a0b7f65a4a63331de40b94d712eb49119</anchor>
      <arglist>(const std::string name, Func func, Service *serv, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type>Operation&lt; Signature &gt; &amp;</type>
      <name>addOperation</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ab20c2fe74dd0691f7c07e72948738c8f</anchor>
      <arglist>(const std::string name, Signature *func, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type>OperationInterfacePart *</type>
      <name>getOperation</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ad3261db01744046dfe1ad016bf4781c5</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>OperationInterface *</type>
      <name>operations</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>acaac15f93904c1653c7d67ae7cb13c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAttribute</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a228ea19b9974d1ff329a2b4fe6ea3ae8</anchor>
      <arglist>(const std::string &amp;name, T &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstant</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ad610f7822f53345bf7318998c06ca31b</anchor>
      <arglist>(const std::string &amp;name, const T &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAttribute</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>ad9af8547a01dc1ce03a5b509e11c7638</anchor>
      <arglist>(base::AttributeBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>getAttribute</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a3406693cbcf04d5128f71286056cc06f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>ConfigurationInterface *</type>
      <name>attributes</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a44d240a9e534409e31cd6d41385a6651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>af87c90fd9f75a3fe2e19408b1fc8df2b</anchor>
      <arglist>(const std::string &amp;name, T &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addProperty</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a83976b20bfec26e9609e3ac38136a0b1</anchor>
      <arglist>(base::PropertyBase &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>getProperty</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a9ee485a4df00e9582430174a6505f538</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>PropertyBag *</type>
      <name>properties</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a1442b82a6d52954b8644b0f89d3a1080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>configure</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a492aed947a9bb2cbc25140884bc34e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>activate</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>adb5e6bc5f0eee821b3f62f9d5482c743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>cleanup</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a009c3d9b097d1904ca6eac98a5b48d0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConfigured</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a536c8b64294fb60bb54ada1a75045510</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a5d20397ed24caa3beea9d981823aa9a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a9168525a25ec73b7240042613688b6fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>ab3f9dfd33aac3116805a8d1801c8edfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a7d3ad5b4301ec54a2357d2f8bc60e2b8</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aaf99cd58b81ce05216baae47e5b04364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a4ed3cee9867d1367b6c482a0584f5045</anchor>
      <arglist>(unsigned cpu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inFatalError</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a17eced3a04772d8a2b36c9b37e5f630c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inException</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>ad3f58ee59ba08f3c4cf7ab92bd7ff13e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRunTimeError</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>ae96c196ff77840408229ccd5018fc9c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a940714024a53ffb17de749f3f909527d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a9b2cda802da9670204fc3be88e9e4ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a3c3b01dff9aa92578d1657bdc3c0fb47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recover</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a28420e3f52d819fddbe0962cdef98707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forceActivity</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a59ef45d1d0a48a1123763ed534a9b4b2</anchor>
      <arglist>(base::ActivityInterface *new_act)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataOnPortHook</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>aaa4d739183c23583a00eb37b555238a4</anchor>
      <arglist>(base::PortInterface *port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>configureHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a9badff843c97307d2b3084c4320606c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanupHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a7079becea7aa4945ba69cc202713592c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>startHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>add908fc9e1fcb95dea895e6231edf075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a4b16151ed99062bca250ddfe667a3604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>breakUpdateHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>ad4a3f8cbcfee40c1bc1f4394dadfcf82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>errorHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a1d100268cdda1f60af1e2203d155168b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>exceptionHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a576b146a57bd81b1f5fe3a8e51f0bd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stopHook</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a8bfeb7f3c3d066080d5af36baacb6648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fatal</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>af208a7b9442ba87f42a3a52a28c5309f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>exception</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a243f1797bcfef248146ee02166a1eeb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExecutionEngine *</type>
      <name>ee</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>afdeffff3d523e09a22bfcb9f43f1cc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; void(base::PortInterface *)&gt;</type>
      <name>SlotFunction</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a8cc279940c3e1d974831413c03b7b6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface &amp;</type>
      <name>addPort</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a729bd1810e58ac3057a41e10951fbba3</anchor>
      <arglist>(const std::string &amp;name, base::PortInterface &amp;port)</arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface &amp;</type>
      <name>addPort</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a3b56c1247c1dc71bdde4feafa3997fc8</anchor>
      <arglist>(base::PortInterface &amp;port)</arglist>
    </member>
    <member kind="function">
      <type>base::InputPortInterface &amp;</type>
      <name>addEventPort</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>af5d3991d677caee96a58bee04304afe6</anchor>
      <arglist>(const std::string &amp;name, base::InputPortInterface &amp;port, SlotFunction callback=SlotFunction())</arglist>
    </member>
    <member kind="function">
      <type>base::InputPortInterface &amp;</type>
      <name>addEventPort</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a0b71ee3a868346b0131f0aaf4c8f74e9</anchor>
      <arglist>(base::InputPortInterface &amp;port, SlotFunction callback=SlotFunction())</arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface *</type>
      <name>getPort</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a76bdc1004f98bdb898581b5b71d126e0</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>DataFlowInterface *</type>
      <name>ports</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a9d0f38c658735ebce3e7dad89f9d1902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DataFlowInterface *</type>
      <name>ports</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>adc8395096c3b337dbed1410b9b09ebe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectPorts</name>
      <anchorfile>classRTT_1_1TaskContext.html</anchorfile>
      <anchor>a67511f726158ff9ebad751991651ec8a</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::base</name>
    <filename>namespaceRTT_1_1base.html</filename>
    <class kind="class">RTT::base::ActionInterface</class>
    <class kind="class">RTT::base::ActivityInterface</class>
    <class kind="class">RTT::base::AttributeBase</class>
    <class kind="class">RTT::base::Buffer</class>
    <class kind="class">RTT::base::BufferBase</class>
    <class kind="class">RTT::base::BufferInterface</class>
    <class kind="class">RTT::base::BufferLocked</class>
    <class kind="class">RTT::base::BufferLockFree</class>
    <class kind="class">RTT::base::BufferUnSync</class>
    <class kind="class">RTT::base::ChannelElement</class>
    <class kind="class">RTT::base::ChannelElementBase</class>
    <class kind="class">RTT::base::DataObject</class>
    <class kind="class">RTT::base::DataObjectInterface</class>
    <class kind="class">RTT::base::DataObjectLocked</class>
    <class kind="class">RTT::base::DataObjectLockFree</class>
    <class kind="class">RTT::base::DataObjectUnSync</class>
    <class kind="class">RTT::base::DataSourceBase</class>
    <class kind="class">RTT::base::DisposableInterface</class>
    <class kind="class">RTT::base::ExecutableInterface</class>
    <class kind="class">RTT::base::InputPortInterface</class>
    <class kind="class">RTT::base::OperationBase</class>
    <class kind="struct">RTT::base::OperationCallerBase</class>
    <class kind="struct">RTT::base::OperationCallerBaseInvoker</class>
    <class kind="struct">RTT::base::OperationCallerInterface</class>
    <class kind="class">RTT::base::OutputPortInterface</class>
    <class kind="class">RTT::base::PortInterface</class>
    <class kind="class">RTT::base::PropertyBagVisitor</class>
    <class kind="class">RTT::base::PropertyBase</class>
    <class kind="class">RTT::base::PropertyIntrospection</class>
    <class kind="class">RTT::base::RunnableInterface</class>
    <class kind="class">RTT::base::TaskCore</class>
    <member kind="function">
      <type>RTT_API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceRTT_1_1base.html</anchorfile>
      <anchor>aea874e06209189a76edfd43cc3daa84d</anchor>
      <arglist>(std::ostream &amp;os, DataSourceBase::shared_ptr dsb)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceRTT_1_1base.html</anchorfile>
      <anchor>aed57a750eb7232cf48c70712eff446c1</anchor>
      <arglist>(std::ostream &amp;os, PropertyBase *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::ActionInterface</name>
    <filename>classRTT_1_1base_1_1ActionInterface.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ActionInterface &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>a88bcca083175ea427aa22fabb850b578</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>a85f558f65b156911f3c004fd2aeb5094</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>aba0b4f6d3f57f0b4b8faad85686c9080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valid</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>a4e8772130b441a447e32e7774cc01c28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>ac971ccfe3e4befa97513d715dba36098</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>a835bfbc61e66b94a4e0e5a62d8e22809</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1base_1_1ActionInterface.html</anchorfile>
      <anchor>a4d0a9b981d260d2f4e363b7c428a125f</anchor>
      <arglist>(std::map&lt; const DataSourceBase *, DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <docanchor file="classRTT_1_1base_1_1ActionInterface" title="Copy versus clone semantics">cc</docanchor>
  </compound>
  <compound kind="class">
    <name>RTT::base::ActivityInterface</name>
    <filename>classRTT_1_1base_1_1ActivityInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a6ccbd039e0df4bae31fe63a988b3c2f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a78717d9d9533a58bac8d1f0eadf564a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>aa21330bc3d3b636589c124f3c71676e4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a5b728aaf49da0fefabdf099f2c42ff7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a7c98bdeaa51f490d6f61e7aea7ada91a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPeriodic</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a9fe788cc8d6d10f3e1a4d16b111a8b18</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a8f83999d9bc8cd48a7950be3c4cb7cf9</anchor>
      <arglist>(Seconds s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>aeabaef68a4faab68d398fa2deaf9ad04</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a73f4d59d811f9ec4941f5c5bf84ce643</anchor>
      <arglist>(unsigned cpu)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>ae490cda9ee1ef6ed7a42f8725d3af3dd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>acc594ecea241aee2390664e2e4a70a32</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1base_1_1ActivityInterface.html</anchorfile>
      <anchor>a190329785c1c7e4a542db833402a7811</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::AttributeBase</name>
    <filename>classRTT_1_1base_1_1AttributeBase.html</filename>
    <member kind="function">
      <type></type>
      <name>AttributeBase</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a6017b27638a8e26a16cbe0edc91219d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributeBase</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a0fc0b3d03f3d2d97de6c8efd4bfe44dd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a3d2ad8fcaa5104bc86a135e203f27d33</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AttributeBase *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a88425e387dbeeaec504e5c4ae98de7c7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AttributeBase *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1base_1_1AttributeBase.html</anchorfile>
      <anchor>a84c0fb70a16dcb4ae3479943dabdda73</anchor>
      <arglist>(std::map&lt; const DataSourceBase *, DataSourceBase * &gt; &amp;replacements, bool instantiate)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::Buffer</name>
    <filename>classRTT_1_1base_1_1Buffer.html</filename>
    <templarg></templarg>
    <base>RTT::base::BufferLockFree</base>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classRTT_1_1base_1_1Buffer.html</anchorfile>
      <anchor>a66ef5149fca4589acc8b44080146d8ab</anchor>
      <arglist>(int qsize, const T &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a9d9fbf417f40fdb4daac425204a1f6de</anchor>
      <arglist>(const T &amp;sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a34a6b145108edd41701059db92cf995c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a0d3e2c2a79996be7dc9c9efa6f12e79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a6451b71034eea676a7d7e82d4c33accb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a9a32197828901d5d993ea27c26f883f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a309cccd5fb3d025eb4bafe440e6f7c81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a3102c9253f531e8df423f5482cf91c03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>dropped</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a58d82df95c343f2269425f7edbb239d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a12edb0da59fa45b2cd7bda7cb1aac797</anchor>
      <arglist>(param_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>ac7fd61f386cc1d9ff566c0d94d017a05</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>ad9c98ca231c111dfbc5e507b4e62f7bc</anchor>
      <arglist>(reference_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>adb2b826f6c462d4438bed6e39a868601</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>value_t *</type>
      <name>PopWithoutRelease</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a5dacf9d5b735dfac6f4dfa4f696269f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a7a0bb28801aa18093fddcfbe38ce8823</anchor>
      <arglist>(value_t *item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::BufferBase</name>
    <filename>classRTT_1_1base_1_1BufferBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1base_1_1BufferBase.html</anchorfile>
      <anchor>a721f2d8ea29ab506dbe0a4c8b4a26739</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>size</name>
      <anchorfile>classRTT_1_1base_1_1BufferBase.html</anchorfile>
      <anchor>ae43534aa3872e564c88fd18d5cf5f772</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>classRTT_1_1base_1_1BufferBase.html</anchorfile>
      <anchor>a403a7c9c68c2c4870079f062b8eab36b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>full</name>
      <anchorfile>classRTT_1_1base_1_1BufferBase.html</anchorfile>
      <anchor>aabaaf0c817a58a4b130d492b58e86b1a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1base_1_1BufferBase.html</anchorfile>
      <anchor>af28ce2d9f7370819cb9bcd3222cc67e3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>dropped</name>
      <anchorfile>classRTT_1_1base_1_1BufferBase.html</anchorfile>
      <anchor>a96dcac8a88fc650c8c2803dcf2bb13e3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::BufferInterface</name>
    <filename>classRTT_1_1base_1_1BufferInterface.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::BufferBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>ae2af23bcbd142dc2d09b75e30dddf391</anchor>
      <arglist>(reference_t item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>a1fb40ec315410ca6650bb722b23230dd</anchor>
      <arglist>(std::vector&lt; value_t &gt; &amp;items)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual value_t *</type>
      <name>PopWithoutRelease</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>ad877aa5119fb6ea6ee3a4fc8f6800cfb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>adc9383d94d498971244c09907004de3f</anchor>
      <arglist>(value_t *item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>afc6ad58cdae63ea7a2fc7d130686e92d</anchor>
      <arglist>(param_t item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>a6cabb6e94e7d78d4d916f3ddab6e1824</anchor>
      <arglist>(const std::vector&lt; value_t &gt; &amp;items)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>a500e68c93d1286799d4bc4d101be3068</anchor>
      <arglist>(const T &amp;sample)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferInterface.html</anchorfile>
      <anchor>a180f169f0caf281e408dd2c62b9b85bf</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::BufferLocked</name>
    <filename>classRTT_1_1base_1_1BufferLocked.html</filename>
    <templarg></templarg>
    <base>RTT::base::BufferInterface</base>
    <member kind="function">
      <type></type>
      <name>BufferLocked</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a94b857cd89e3d9ddd672f20f0037472d</anchor>
      <arglist>(size_type size, const T &amp;initial_value=T(), bool circular=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a18abf8891fc5e738ef735cfbf28d7232</anchor>
      <arglist>(const T &amp;sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a380f0bca0a42ee0cd89bc7c4c62303e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferLocked</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a3047dd733a2fcc0a302df3b0f4ed5bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a2983e51d6c3b7527cde54432bf6b8c53</anchor>
      <arglist>(param_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>ac877ccc08bb9dccbaeea0a0877a5a80f</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a023e8c8dae41633865c4f8efd9230df8</anchor>
      <arglist>(reference_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a8dc26c19ccc28fe5ce36b04f7b55b31a</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>value_t *</type>
      <name>PopWithoutRelease</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a9d5c7746021b536811d97c73cec7608f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>ab29941aa65d94aaf8169f14d1efd0730</anchor>
      <arglist>(value_t *item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a3d180e5d98e4456a809b6b42b534ffd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a386e18d03c28def7bdfa2ec0fccab50f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>ac462fc20b959fad08ca187b1ce5f8ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a47e251f5ce95bd3276cc7314eefdf0e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a7e51f8910a5f585412fcd9d838709e19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dropped</name>
      <anchorfile>classRTT_1_1base_1_1BufferLocked.html</anchorfile>
      <anchor>a1e40bb36a5d26fd3d4ef10022d77eee9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::BufferLockFree</name>
    <filename>classRTT_1_1base_1_1BufferLockFree.html</filename>
    <templarg></templarg>
    <base>RTT::base::BufferInterface</base>
    <member kind="function">
      <type></type>
      <name>BufferLockFree</name>
      <anchorfile>classRTT_1_1base_1_1BufferLockFree.html</anchorfile>
      <anchor>a79f8bd308ae76932ea8aa6f7d8f0ae51</anchor>
      <arglist>(unsigned int bufsize, const T &amp;initial_value=T(), bool circular=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::BufferUnSync</name>
    <filename>classRTT_1_1base_1_1BufferUnSync.html</filename>
    <templarg></templarg>
    <base>RTT::base::BufferInterface</base>
    <member kind="function">
      <type></type>
      <name>BufferUnSync</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a2d9b9b60cb512241433a87eab9d7816c</anchor>
      <arglist>(size_type size, const T &amp;initial_value=T(), bool circular=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a8a834e79974647f6eb9afa1d1b8d1c07</anchor>
      <arglist>(const T &amp;sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a7776ee81826c5538ca16f052e8d9dffd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferUnSync</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a606fd1c6f8d055e420a9283051ee0903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a9129e1a9d2a9cc29f738746f6bcdb957</anchor>
      <arglist>(param_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Push</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>aeb832b1a9ceb930337b7fcd5227f73d9</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a35b627a820025e880f82fd4d9baaad7a</anchor>
      <arglist>(reference_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Pop</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>ab0f04192663158c2aa71ce2d64ffb875</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>value_t *</type>
      <name>PopWithoutRelease</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a42b4c5b14f1df3cf2deb43964604dc07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a9d39ebc891decb54616680f4d28439dc</anchor>
      <arglist>(value_t *item)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a13a47cda6f2d36946baf66fd56df716a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>ad75bd7cee2c3be148996a2b2f5dd6b9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a4aed664f7fe4e75c6081fbd0c615d617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a73a6425bd46efe0ca246125a174b7675</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a0ca69e02ee81da2f67abf5450b63ecb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>dropped</name>
      <anchorfile>classRTT_1_1base_1_1BufferUnSync.html</anchorfile>
      <anchor>a2a3c9b44d587beaa5dc961e481d9eb59</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::ChannelElement</name>
    <filename>classRTT_1_1base_1_1ChannelElement.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::ChannelElementBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElement.html</anchorfile>
      <anchor>a4985bbcda69d829c4eae69aad1d43766</anchor>
      <arglist>(param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElement.html</anchorfile>
      <anchor>af88c18652a5d860b88d788d4832eb488</anchor>
      <arglist>(param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElement.html</anchorfile>
      <anchor>a0521e0ade45ecc0dfee715e0717ea903</anchor>
      <arglist>(reference_t sample, bool copy_old_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInput</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>ab361a083bee6da8e0e94f71aa09fa30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelElementBase::shared_ptr</type>
      <name>getInputEndPoint</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a63e9f77c9197ba424d824ff44b38349f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelElementBase::shared_ptr</type>
      <name>getOutputEndPoint</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>aefc45d26de98f37392cf01936f9ae2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutput</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a0e3363d762549f205196265128395c89</anchor>
      <arglist>(shared_ptr output)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>signal</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>aa985c67248dbe492db1f53b5b7c54c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inputReady</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a69e529e0b3dcc4316cb00f3ff957505b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>ac280457e88649d5e78a76ef1a89df62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a9f604a6d6f285c35b0c82dad343af72c</anchor>
      <arglist>(bool forward)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PortInterface *</type>
      <name>getPort</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>ade1463d51bb5dc5ace823ae689c32935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::ConnID *</type>
      <name>getConnID</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a4a66b7e5834d3d1fabb9181184759b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoteElement</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a2237a004c5db9ff66ed81c5e87b2baaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteURI</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a1d4eab0475a5e1e42963a89661d9d12f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getLocalURI</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a017def07a5edc5d4d088bbc1ccb6873a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>aa2bc1d9562c6b1a2797a144997a2c54f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a0373df868f76e95e0672977c55a2a937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deref</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a7a7de132a871f70881c182cbe4bef67b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::ChannelElementBase</name>
    <filename>classRTT_1_1base_1_1ChannelElementBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelElementBase</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a9236dc500887481d696d905d1015350a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelElementBase::shared_ptr</type>
      <name>getInput</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a7abd277448530efc8817ca36cf0238f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelElementBase::shared_ptr</type>
      <name>getOutput</name>
      <anchorfile>classRTT_1_1base_1_1ChannelElementBase.html</anchorfile>
      <anchor>a17b16a344228234a2f6d51559c7522c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DataObject</name>
    <filename>classRTT_1_1base_1_1DataObject.html</filename>
    <templarg></templarg>
    <base>RTT::base::DataObjectLockFree</base>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1base_1_1DataObject.html</anchorfile>
      <anchor>a400af21488c4b02daec0aa10a3da3051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DataObjectInterface&lt; T &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>afa13e89f623ff495abac54837dc7b8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataObject</name>
      <anchorfile>classRTT_1_1base_1_1DataObject.html</anchorfile>
      <anchor>a3b74f5ac3f066ca9cd3d0a3c7a8b28cc</anchor>
      <arglist>(const T &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataType</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>a34d4a24823091250e88243aa5af1050e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>a4f1bb1a05d46f334a1166568d76a286a</anchor>
      <arglist>(DataType &amp;pull) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Set</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>aac560adb67b3be47619acec7dfe5452d</anchor>
      <arglist>(const DataType &amp;push)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>a3a3aa22e1c276c88daa0c8908d3e93eb</anchor>
      <arglist>(const DataType &amp;sample)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_THREADS</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>abfcff678a20e45743dfbbdab3e7ed7c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DataObjectInterface</name>
    <filename>classRTT_1_1base_1_1DataObjectInterface.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a81a2bfa63e207d74b1aaa3477f0ec5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataObjectInterface</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a8358411d5097b451e10e985a20ca92ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataObjectInterface</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a5f6995d4e2c6ed77ae1a5a2e5c45c8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a4a571b38909495e3d88cc6e935360229</anchor>
      <arglist>(DataType &amp;pull) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataType</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a79f1da468f1fb526d9d5f87fc65e566e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Set</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a7512c12a0189fca337a55db262b3209a</anchor>
      <arglist>(const DataType &amp;push)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectInterface.html</anchorfile>
      <anchor>a4851566b61e94041d410174b68719745</anchor>
      <arglist>(const DataType &amp;sample)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DataObjectLocked</name>
    <filename>classRTT_1_1base_1_1DataObjectLocked.html</filename>
    <templarg></templarg>
    <base>RTT::base::DataObjectInterface</base>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLocked.html</anchorfile>
      <anchor>aa563aaefc14378ed0446d30b35648f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataObjectLocked</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLocked.html</anchorfile>
      <anchor>a275db2a8aae98218d6541a7e5c479ecc</anchor>
      <arglist>(const T &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLocked.html</anchorfile>
      <anchor>a480bfa1b93c0f744ae47f75d67afde48</anchor>
      <arglist>(DataType &amp;pull) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataType</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLocked.html</anchorfile>
      <anchor>a0767ed9bdf983e8d42cc9f88e1d94480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Set</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLocked.html</anchorfile>
      <anchor>a4aa4462d5d8086e0d7834ee189eab240</anchor>
      <arglist>(const DataType &amp;push)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLocked.html</anchorfile>
      <anchor>abeb95752cd4837b744ec37a69aa066a2</anchor>
      <arglist>(const DataType &amp;sample)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DataObjectLockFree</name>
    <filename>classRTT_1_1base_1_1DataObjectLockFree.html</filename>
    <templarg></templarg>
    <base>RTT::base::DataObjectInterface</base>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>a09641e6375cf586675ff43c9217686bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataObjectLockFree</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectLockFree.html</anchorfile>
      <anchor>a703961a35de9d115b26477d2154fae32</anchor>
      <arglist>(const T &amp;initial_value=T(), unsigned int max_threads=2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DataObjectUnSync</name>
    <filename>classRTT_1_1base_1_1DataObjectUnSync.html</filename>
    <templarg></templarg>
    <base>RTT::base::DataObjectInterface</base>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectUnSync.html</anchorfile>
      <anchor>a22c9825c5917ee9354b47ad3b5c4d837</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataObjectUnSync</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectUnSync.html</anchorfile>
      <anchor>a97e01ee894258a600d0c8671602ecdb2</anchor>
      <arglist>(const T &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectUnSync.html</anchorfile>
      <anchor>a4a1d5c1529c656b23f721d7967d03d22</anchor>
      <arglist>(DataType &amp;pull) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataType</type>
      <name>Get</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectUnSync.html</anchorfile>
      <anchor>a0e16bbcce0850cf5018bb44e5fe7d182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Set</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectUnSync.html</anchorfile>
      <anchor>aa6690b79a71e6fabcd932f28afa4fa3c</anchor>
      <arglist>(const DataType &amp;push)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1base_1_1DataObjectUnSync.html</anchorfile>
      <anchor>a2895d29ffaea0475e3c1738d7c9b9bf3</anchor>
      <arglist>(const DataType &amp;sample)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DataSourceBase</name>
    <filename>classRTT_1_1base_1_1DataSourceBase.html</filename>
    <member kind="typedef">
      <type>boost::intrusive_ptr&lt; DataSourceBase &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>af764490461a162f4a62c63770535fb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::intrusive_ptr&lt; const DataSourceBase &gt;</type>
      <name>const_ptr</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>ad764b25635db92b2578235024ab80437</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a60c089be384c07fda88a031fcaa9dd6f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSourceBase *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>afcd98aa35c15e8290179edd1099dfa27</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSourceBase *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>ab1cda36f06face7f084769bded0ee33a</anchor>
      <arglist>(std::map&lt; const DataSourceBase *, DataSourceBase * &gt; &amp;alreadyCloned) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>adab6ce6981d7c985d267bc165cb425d1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a79c71f0c57abdb17f557ff1a0fa62399</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>a438819b60f39ad1bcbe0fe7812c00771</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>af21b9a08a564d1dc748335d13572811b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DataSourceBase</name>
      <anchorfile>classRTT_1_1base_1_1DataSourceBase.html</anchorfile>
      <anchor>ac67978bdcf1e5913515e85715c0c4ef9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::DisposableInterface</name>
    <filename>classRTT_1_1base_1_1DisposableInterface.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DisposableInterface &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>classRTT_1_1base_1_1DisposableInterface.html</anchorfile>
      <anchor>ac22230559dd1324a22259f0df18781d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>executeAndDispose</name>
      <anchorfile>classRTT_1_1base_1_1DisposableInterface.html</anchorfile>
      <anchor>aa219e67cd5ba6c860ef90e316cc7306d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dispose</name>
      <anchorfile>classRTT_1_1base_1_1DisposableInterface.html</anchorfile>
      <anchor>af51943bba34b7ba69c16d52ad74e1400</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::ExecutableInterface</name>
    <filename>classRTT_1_1base_1_1ExecutableInterface.html</filename>
    <member kind="function">
      <type>void</type>
      <name>loaded</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>a1c879406f60b612a5cd254f684cc5219</anchor>
      <arglist>(ExecutionEngine *ee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unloaded</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>aaca37926e68f7c7de74c043f8a2c267c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loading</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>a95dfa05e8d4cee94f24dbe3fc6b60af6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>a6c5ee4ceb298d2917dbf891300c3223d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExecutionEngine *</type>
      <name>getEngine</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>a189a24838c790bcd059f10bbd09258ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>a485113b5518e732252b874b6939ca4cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unloading</name>
      <anchorfile>classRTT_1_1base_1_1ExecutableInterface.html</anchorfile>
      <anchor>a8049b5ca5abdcd078644e261f08b6883</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::InputPortInterface</name>
    <filename>classRTT_1_1base_1_1InputPortInterface.html</filename>
    <base>RTT::base::PortInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual DataSourceBase *</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>afd46e9b26cb9db8b9b117f6ab5e268f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1base_1_1InputPortInterface.html</anchorfile>
      <anchor>a41ffcb4d860f510b7e3c0b4f187a3ed0</anchor>
      <arglist>(DataSourceBase::shared_ptr source, bool copy_old_data=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a4791629427ba68574d946c5f572858a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PortInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>ae58b50ea0a18e3f5b7b25825fbee8f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PortInterface *</type>
      <name>antiClone</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a972517e80b0f06b3d6303ad3275c1f94</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Service *</type>
      <name>createPortObject</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a16ac437dc1d1042db879adc30f812c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a1599147a15dbfbb62defbee0c51b65f6</anchor>
      <arglist>(ConnPolicy const &amp;policy)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::OperationBase</name>
    <filename>classRTT_1_1base_1_1OperationBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual DisposableInterface::shared_ptr</type>
      <name>getImplementation</name>
      <anchorfile>classRTT_1_1base_1_1OperationBase.html</anchorfile>
      <anchor>a710a6931a7b0e7dfc96620028ef85a5d</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::base::OperationCallerBase</name>
    <filename>structRTT_1_1base_1_1OperationCallerBase.html</filename>
    <templarg>F</templarg>
    <base>RTT::internal::InvokerBase</base>
    <base>RTT::base::OperationCallerInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual OperationCallerBase&lt; F &gt; *</type>
      <name>cloneI</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBase.html</anchorfile>
      <anchor>a0ce632b8b4756316f80cf535c4f4ea49</anchor>
      <arglist>(ExecutionEngine *caller) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>a1b1b96467ed36f78d11e8d5bca8b26ba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwner</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>a38a9a28992b855d57543d238ddcaada2</anchor>
      <arglist>(ExecutionEngine *ee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaller</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>adb68aecd6596ce7e6760dd5e3da999e2</anchor>
      <arglist>(ExecutionEngine *ee)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setThread</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>adb3ef74cecec973f485aa5b580d5ee73</anchor>
      <arglist>(ExecutionThread et, ExecutionEngine *executor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportError</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>ae120e7c481fee4153bc5f4b7459f78c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSend</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>a55d9c21f679c735ac63b2482d3b19145</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::base::OperationCallerBaseInvoker</name>
    <filename>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</anchorfile>
      <anchor>afbf27bd46c9d992667580f3af145a6f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</anchorfile>
      <anchor>af8384afbc921533ffae8d016fef7321a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setImplementation</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</anchorfile>
      <anchor>a1f304ae68d019b8793b63ae91a8d6aba</anchor>
      <arglist>(boost::shared_ptr&lt; base::DisposableInterface &gt; impl, ExecutionEngine *caller=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setImplementationPart</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</anchorfile>
      <anchor>ae13330ffd855e79f7b468ed3734d6eea</anchor>
      <arglist>(OperationInterfacePart *orp, ExecutionEngine *caller=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCaller</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</anchorfile>
      <anchor>a7c7d6dd555f8aaf58213d0c1d6ee554c</anchor>
      <arglist>(ExecutionEngine *caller)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBaseInvoker.html</anchorfile>
      <anchor>a7f44e3cd5858f16dca0fb7257746f9c3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::base::OperationCallerInterface</name>
    <filename>structRTT_1_1base_1_1OperationCallerInterface.html</filename>
    <base>RTT::base::DisposableInterface</base>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; OperationCallerInterface &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>a5dd6e6dbc22ce30c5e351b057c0608a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCallerInterface</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerInterface.html</anchorfile>
      <anchor>a432624e4badcfd8d8fbae04946e2e4cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::OutputPortInterface</name>
    <filename>classRTT_1_1base_1_1OutputPortInterface.html</filename>
    <base>RTT::base::PortInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>keepsLastWrittenValue</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a9039fe42b32f73c14eb2d80ca3bd3875</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>keepLastWrittenValue</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a385a6ad5d277e736bbda2ce3ae3e4173</anchor>
      <arglist>(bool new_flag)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a556a771775304b1c48f69eacafe6d63e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>adf3dc493227e23310adef4877e4ca404</anchor>
      <arglist>(DataSourceBase::shared_ptr source)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>createConnection</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>a6dd1c6b64177e112e1e02380b01e424d</anchor>
      <arglist>(InputPortInterface &amp;sink, ConnPolicy const &amp;policy)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>connectionAdded</name>
      <anchorfile>classRTT_1_1base_1_1OutputPortInterface.html</anchorfile>
      <anchor>af6d02e9f514b641a4c10dc3a3cb92b9e</anchor>
      <arglist>(ChannelElementBase::shared_ptr channel_input, ConnPolicy const &amp;policy)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::PortInterface</name>
    <filename>classRTT_1_1base_1_1PortInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a6751d5bbe9196013651b34294f72452c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>aa9f3cecab5a948799111fc2671f5057c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>affbe1e1e7320acf6e85402858f28ee1f</anchor>
      <arglist>(PortInterface *port)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a1ff55db413f3ff6c944eb4249d559af7</anchor>
      <arglist>(PortInterface *other, ConnPolicy const &amp;policy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>connectTo</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>af2f4b28e71d40e6df027ffff924e909e</anchor>
      <arglist>(PortInterface *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addConnection</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>a1162e96f9cc27d5bcc37c2536e2a3907</anchor>
      <arglist>(internal::ConnID *cid, ChannelElementBase::shared_ptr channel_input, ConnPolicy const &amp;policy=ConnPolicy())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>removeConnection</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>afb53bec2e9551b2b1b3c7ebd413c4a9c</anchor>
      <arglist>(internal::ConnID *cid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const internal::ConnectionManager *</type>
      <name>getManager</name>
      <anchorfile>classRTT_1_1base_1_1PortInterface.html</anchorfile>
      <anchor>af52d7cf050d26b41a57e0d758051f607</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::PropertyBagVisitor</name>
    <filename>classRTT_1_1base_1_1PropertyBagVisitor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBagVisitor.html</anchorfile>
      <anchor>a06f1011a75a1103c681686eb0b6f88cc</anchor>
      <arglist>(PropertyBase *p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBagVisitor.html</anchorfile>
      <anchor>ab1c76ef4d9785bfab08ef62c4f665574</anchor>
      <arglist>(Property&lt; PropertyBag &gt; &amp;p)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>introspectAndDecompose</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBagVisitor.html</anchorfile>
      <anchor>a326c0d7dd47353871ec54d0b026e59ea</anchor>
      <arglist>(PropertyBase *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::PropertyBase</name>
    <filename>classRTT_1_1base_1_1PropertyBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyBase</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a9a8c0300a6055787c62f79615c93342d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyBase</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>af1067733f332e050ca07f3d5e5d49b66</anchor>
      <arglist>(std::string name, std::string description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyBase</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>adac9f3bc06da1cb30a57fb932586c4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>aaa30f7886589acea5cbc502cabdf93be</anchor>
      <arglist>(PropertyBase *source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a336398b607ff315d4040277dc9cf880a</anchor>
      <arglist>(PropertyIntrospection *pi)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>identify</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a04bb4dd823c0cd1a8a274b0c3ffa37f9</anchor>
      <arglist>(PropertyBagVisitor *pi)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a3641a4b8b1e6e2b48d994073fe83e3ae</anchor>
      <arglist>(const PropertyBase *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>refresh</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a5600a71751d5fe19e47e53a47c242238</anchor>
      <arglist>(const PropertyBase *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a097b07f527ba96b1f7750047863f1709</anchor>
      <arglist>(const PropertyBase *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyBase *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a8f3cb6b6602386fc302763b4c0048aeb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyBase *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a604d03c39e744f000bdd13ed6b788bd6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyBase *</type>
      <name>create</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a054e3f8426b960d71341edc119c4905c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>aef1f9e802faddb20dc36ccb6a737869c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setDataSource</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>ac89156d3850525b9349fffeda7ae2e7c</anchor>
      <arglist>(const DataSourceBase::shared_ptr &amp;dsb)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>a1c8554af80cc98c0d4f5ca4c9a2cefeb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1base_1_1PropertyBase.html</anchorfile>
      <anchor>afaf365d2b2a93f2d602d82af87ac233f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::PropertyIntrospection</name>
    <filename>classRTT_1_1base_1_1PropertyIntrospection.html</filename>
    <base>RTT::base::PropertyBagVisitor</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>a52b0556eadf6d7b93e077d8ba36d6f68</anchor>
      <arglist>(Property&lt; bool &gt; &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>ae5030fb75b3fcc38415f07cd27b4c35b</anchor>
      <arglist>(Property&lt; char &gt; &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>ad7ab62f99ab018c2a38bcac3a8f4f153</anchor>
      <arglist>(Property&lt; int &gt; &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>a4e241af6a4771b2003c289373a2374df</anchor>
      <arglist>(Property&lt; unsigned int &gt; &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>a7f412fe5235cef676665627dd57c508f</anchor>
      <arglist>(Property&lt; double &gt; &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>a1e88d2d2aa2ffe1f93f0bb8f6ba90808</anchor>
      <arglist>(Property&lt; std::string &gt; &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>a400e2c8d2b6c1b4d08af8d092f05f432</anchor>
      <arglist>(Property&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>aabe411422ea2b212b4c9637decba4259</anchor>
      <arglist>(PropertyBase *p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>introspect_T</name>
      <anchorfile>classRTT_1_1base_1_1PropertyIntrospection.html</anchorfile>
      <anchor>ac5402786b2e45177dd9df312e5001443</anchor>
      <arglist>(PropertyBase *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::RunnableInterface</name>
    <filename>classRTT_1_1base_1_1RunnableInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>RunnableInterface</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a9cc99fb885fd24c22d21f61a88e0a330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RunnableInterface</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>aa5e5d6d8720d3a0cd7fbfe58ea83412b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a1fc18ba15bd1fd69759e127a2e466e65</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>abec8b9e213e32c21b57266211703dc45</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a1e8f7d948dce8a8eafd420f6a4baf574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a32b9c766a8c8af74c8a9adbe7281f61d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasWork</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a742d04970b31c2999e8fd7cb402947cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setActivity</name>
      <anchorfile>classRTT_1_1base_1_1RunnableInterface.html</anchorfile>
      <anchor>a563528c3275ef0631f17928a80994371</anchor>
      <arglist>(ActivityInterface *task)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::base::TaskCore</name>
    <filename>classRTT_1_1base_1_1TaskCore.html</filename>
    <member kind="function">
      <type></type>
      <name>TaskCore</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a90d97665c8b1422aaaaf76a6ddb4d320</anchor>
      <arglist>(TaskState initial_state=Stopped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaskCore</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a94327269b75e784a4d186d055cf2a5b8</anchor>
      <arglist>(ExecutionEngine *parent, TaskState initial_state=Stopped)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>a975fddfc6d0fd5dfa77303c20395d87c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1base_1_1TaskCore.html</anchorfile>
      <anchor>aa69a1db58d9b3695477ac75866e4e62c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::corba</name>
    <filename>namespaceRTT_1_1corba.html</filename>
    <class kind="class">RTT::corba::AnyDataSource</class>
    <class kind="struct">RTT::corba::ApplicationServer</class>
    <class kind="interface">RTT::corba::CConfigurationInterface</class>
    <class kind="struct">RTT::corba::AnyConversion</class>
    <class kind="struct">RTT::corba::AnyConversionHelper</class>
    <class kind="struct">RTT::corba::AnyConversion&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="struct">RTT::corba::AnyConversion&lt; std::pair&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">RTT::corba::AnyConversion&lt; std::map&lt; T1, T2 &gt; &gt;</class>
    <class kind="class">RTT::corba::CorbaDispatcher</class>
    <class kind="class">RTT::corba::CorbaFallBackProtocol</class>
    <class kind="class">RTT::corba::CorbaOperationCallerFactory</class>
    <class kind="class">RTT::corba::CorbaTemplateProtocol</class>
    <class kind="class">RTT::corba::CorbaTypeTransporter</class>
    <class kind="interface">RTT::corba::CChannelElement</class>
    <class kind="interface">RTT::corba::CRemoteChannelElement</class>
    <class kind="exception">RTT::corba::CNoSuchPortException</class>
    <class kind="exception">RTT::corba::CNoCorbaTransport</class>
    <class kind="interface">RTT::corba::CDataFlowInterface</class>
    <class kind="class">RTT::corba::CRemoteChannelElement_i</class>
    <class kind="class">RTT::corba::CDataFlowInterface_i</class>
    <class kind="struct">RTT::corba::NonExistingDataSource</class>
    <class kind="class">RTT::corba::DataSourceProxy</class>
    <class kind="class">RTT::corba::ValueDataSourceProxy</class>
    <class kind="struct">RTT::corba::OperationCallerProxy</class>
    <class kind="struct">RTT::corba::CArgumentDescription</class>
    <class kind="exception">RTT::corba::CWrongArgumentException</class>
    <class kind="exception">RTT::corba::CWrongNumbArgException</class>
    <class kind="exception">RTT::corba::CWrongTypeArgException</class>
    <class kind="exception">RTT::corba::CNoSuchNameException</class>
    <class kind="exception">RTT::corba::CCallInterrupted</class>
    <class kind="interface">RTT::corba::CSendHandle</class>
    <class kind="interface">RTT::corba::COperationInterface</class>
    <class kind="class">RTT::corba::RemoteChannelElement</class>
    <class kind="struct">RTT::corba::RemoteConnID</class>
    <class kind="class">RTT::corba::RemotePort</class>
    <class kind="class">RTT::corba::RemoteOutputPort</class>
    <class kind="class">RTT::corba::RemoteInputPort</class>
    <class kind="struct">RTT::corba::AnyConversion&lt; ConnPolicy &gt;</class>
    <class kind="interface">RTT::corba::CService</class>
    <class kind="interface">RTT::corba::CServiceRequester</class>
    <class kind="interface">RTT::corba::CTaskContext</class>
    <class kind="class">RTT::corba::TaskContextFactory</class>
    <class kind="struct">RTT::corba::IllegalServer</class>
    <class kind="class">RTT::corba::TaskContextProxy</class>
    <class kind="class">RTT::corba::OrbRunner</class>
    <class kind="class">RTT::corba::TaskContextServer</class>
    <class kind="struct">RTT::corba::CorbaLibPlugin</class>
    <member kind="enumeration">
      <type></type>
      <name>CTaskState</name>
      <anchorfile>group__CompIDL.html</anchorfile>
      <anchor>ga099e6ccd5476aa8ec1020e27b5e39558</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::AnyDataSource</name>
    <filename>classRTT_1_1corba_1_1AnyDataSource.html</filename>
    <base>DataSource&lt; CORBA::Any_var &gt;</base>
    <member kind="typedef">
      <type>CORBA::Any_var</type>
      <name>value_t</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab7d4ab0d9eef6da77f667e26a14a5c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnyDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1AnyDataSource.html</anchorfile>
      <anchor>a6f5de6db4d0f07e932d67afc3bea25ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::DataSource&lt; CORBA::Any_var &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1corba_1_1AnyDataSource.html</anchorfile>
      <anchor>a18abbdaefd041092077b7237677f885d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::DataSource&lt; CORBA::Any_var &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1corba_1_1AnyDataSource.html</anchorfile>
      <anchor>ad1633b73e21826fdf266db74ca5cd797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::DataSource&lt; CORBA::Any_var &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1corba_1_1AnyDataSource.html</anchorfile>
      <anchor>ab0bcc363b76e620a101ffd6ee98137dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AnyDataSource *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1corba_1_1AnyDataSource.html</anchorfile>
      <anchor>a1544ce3b49842c923c26da65d3249447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AnyDataSource *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1corba_1_1AnyDataSource.html</anchorfile>
      <anchor>a41419f7d349296c5da4f44a48cb9c34c</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; CORBA::Any_var &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; CORBA::Any_var &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::ApplicationServer</name>
    <filename>structRTT_1_1corba_1_1ApplicationServer.html</filename>
    <member kind="function" static="yes">
      <type>static RTT_CORBA_API bool</type>
      <name>InitOrb</name>
      <anchorfile>structRTT_1_1corba_1_1ApplicationServer.html</anchorfile>
      <anchor>a32ebf2eb7aaf1d82875d8e5156bbdbda</anchor>
      <arglist>(int argc, char *argv[], Seconds orb_timeout=0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CORBA::ORB_var</type>
      <name>orb</name>
      <anchorfile>structRTT_1_1corba_1_1ApplicationServer.html</anchorfile>
      <anchor>ae610e6376e03f79fb097aacfd390aacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PortableServer::POA_var</type>
      <name>rootPOA</name>
      <anchorfile>structRTT_1_1corba_1_1ApplicationServer.html</anchorfile>
      <anchor>a7eb9a81f3a8c3470d45e8464d126f470</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CConfigurationInterface</name>
    <filename>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</filename>
    <member kind="function">
      <type>any</type>
      <name>getProperty</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>a6617f63d193cc3f2375e9716af05f5d2</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>setProperty</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>adc24602ba72c627a60c58376048b7bff</anchor>
      <arglist>(in string name, in any value)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getPropertyType</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>aac20b8734909b85a421211c4cc0fbdab</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getPropertyTypeName</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>acf377a33431111c7573b8a62dfa61c1d</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>attributeToString</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>a5f131c01916199e1632c5b78510d8c86</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>attributeFromString</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>aa0b6edaee10873e3d6c4d610c264de9d</anchor>
      <arglist>(in string name, in string value)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isAttributeAssignable</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CConfigurationInterface.html</anchorfile>
      <anchor>a7805da63b30e4e972d9621ba06c7ecd9</anchor>
      <arglist>(in string name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::AnyConversion</name>
    <filename>structRTT_1_1corba_1_1AnyConversion.html</filename>
    <templarg>Type</templarg>
    <member kind="typedef">
      <type>CORBA::Any</type>
      <name>CorbaType</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>ae74854e13a12557c1065537ee89cac07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type</type>
      <name>StdType</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>ab42b2cb03addc3dce40057526b841f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RTT::corba::CAnySequence</type>
      <name>sequence</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>a926d85c812d2b9376b3da8d1fdef7b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>toStdType</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>a0bbb057dbb9ad555fbe96821819b940e</anchor>
      <arglist>(StdType &amp;tp, const CorbaType &amp;cb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>toCorbaType</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>aee1f1208b91ed816d6519066ac31e98a</anchor>
      <arglist>(CorbaType &amp;cb, const StdType &amp;tp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>update</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>a73e01e04697a7f5ef6f868289a29bace</anchor>
      <arglist>(const CORBA::Any &amp;any, StdType tp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CORBA::Any_ptr</type>
      <name>createAny</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>a582694cf9c500af369452f1e5bb8ae06</anchor>
      <arglist>(StdType tp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>updateAny</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion.html</anchorfile>
      <anchor>acd818c45208c7e4c26a2d940b350f877</anchor>
      <arglist>(StdType tp, CORBA::Any &amp;any)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::AnyConversionHelper</name>
    <filename>structRTT_1_1corba_1_1AnyConversionHelper.html</filename>
    <templarg>Type</templarg>
    <templarg>_CorbaType</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::AnyConversion&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structRTT_1_1corba_1_1AnyConversion_3_01std_1_1vector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>toStdType</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a44d76944463fdfc620e94a6de09fea21</anchor>
      <arglist>(StdType &amp;tp, const CORBA::Any &amp;any)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::AnyConversion&lt; std::pair&lt; T1, T2 &gt; &gt;</name>
    <filename>structRTT_1_1corba_1_1AnyConversion_3_01std_1_1pair_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::AnyConversion&lt; std::map&lt; T1, T2 &gt; &gt;</name>
    <filename>structRTT_1_1corba_1_1AnyConversion_3_01std_1_1map_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>toStdType</name>
      <anchorfile>structRTT_1_1corba_1_1AnyConversion_3_01std_1_1map_3_01T1_00_01T2_01_4_01_4.html</anchorfile>
      <anchor>a9805ab8d4546483d8d07e724d5f449a1</anchor>
      <arglist>(StdType &amp;tp, const CORBA::Any &amp;any)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CorbaDispatcher</name>
    <filename>classRTT_1_1corba_1_1CorbaDispatcher.html</filename>
    <base>RTT::Activity</base>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaDispatcher.html</anchorfile>
      <anchor>ada893297b070f219fdb1d2d5e31cecdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaDispatcher.html</anchorfile>
      <anchor>a0663c335e8a2d196b606a048b8d3256b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaDispatcher.html</anchorfile>
      <anchor>ab358dd8df3cf1eee18b7fa7906d6f243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CorbaDispatcher *</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaDispatcher.html</anchorfile>
      <anchor>aca6bacb6ce1fde7d76d2b920d39a2f4b</anchor>
      <arglist>(DataFlowInterface *iface, int scheduler=defaultScheduler, int priority=defaultPriority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaDispatcher.html</anchorfile>
      <anchor>a124694abb38a463f4b22cbdda4345bc4</anchor>
      <arglist>(DataFlowInterface *iface)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ReleaseAll</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaDispatcher.html</anchorfile>
      <anchor>a818f406eb45de26937222b4a055c98ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CorbaFallBackProtocol</name>
    <filename>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</filename>
    <base>RTT::corba::CorbaTypeTransporter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>createAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>aab9a7ca8ee171213c85606b728df68db</anchor>
      <arglist>(DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>a2d77cb15508767d331f6cbd4bca07ecc</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, CORBA::Any &amp;any) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>createDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>a7c166b971fda74ad8b44761a8c3478f3</anchor>
      <arglist>(const CORBA::Any *any) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateFromAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>abcc28c444ee87b99e4133760211c753b</anchor>
      <arglist>(const CORBA::Any *blob, DataSourceBase::shared_ptr target) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelElementBase::shared_ptr</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>ad340dcd8b5b9f0a90011aab3fc45c2bb</anchor>
      <arglist>(base::PortInterface *port, const ConnPolicy &amp;policy, bool is_sender) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CRemoteChannelElement_i *</type>
      <name>createChannelElement_i</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>a208a0272786ff643fcbe7cfc9e588698</anchor>
      <arglist>(DataFlowInterface *,::PortableServer::POA *poa, bool) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>createPropertyDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaFallBackProtocol.html</anchorfile>
      <anchor>a4af0a0af340334a142b09ec72f4062e2</anchor>
      <arglist>(CService_ptr serv, const std::string &amp;vname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CorbaOperationCallerFactory</name>
    <filename>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</filename>
    <base>RTT::OperationInterfacePart</base>
    <member kind="function">
      <type>corba::CService_ptr</type>
      <name>getService</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a4e3b58214105e5cab01be85f1c57412b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a324a20baa8311c7b7f7454dcaf6ef7f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getArgumentType</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a6b8a51b0d9db4e8dad6d4bc727d6e3e8</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getCollectType</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a3a83f41d370cf4b16786679bd0de6420</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>collectArity</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a090778b991e740ec0137a127258defc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resultType</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>abc56fa2a9697fc81378f2e3025fe1e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>af6631cbb7b3e9e6cfe9587066cbc1acc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>description</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a2530ba9350fec92edb64ecc624c5b976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArgumentDescription &gt;</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a387010ebfad87b390133a8fa46885dfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produce</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a8515e679f9d6f8288b697cfb4df47985</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>a9e9dd0eefe02a1a76e34a02689da56cc</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>ad4b332579747a1e86c5ac9b83e4c1b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaOperationCallerFactory.html</anchorfile>
      <anchor>aa2b8a05dc9515c5902f067d3f9e6c0a0</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, internal::DataSource&lt; bool &gt;::shared_ptr blocking) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CorbaTemplateProtocol</name>
    <filename>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</filename>
    <templarg></templarg>
    <base>RTT::corba::CorbaTypeTransporter</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>ac6ffb65ef488f27ae15b361d697a1dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Property&lt; T &gt;::DataSourceType</type>
      <name>PropertyType</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>a2f952a0bf8f1f243ac05b93b47b8fe36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>createAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>ab29f89ce6bbf9648233efb04dfae273b</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>aee567f66c2adc0fd02e55b9396e929d4</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, CORBA::Any &amp;any) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>createDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>a5e2701c6ad57677eb80625a1439695c0</anchor>
      <arglist>(const CORBA::Any *any) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateFromAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>a529999d7f9ad199a413238d808d62cfc</anchor>
      <arglist>(const CORBA::Any *any, base::DataSourceBase::shared_ptr target) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>createPropertyDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTemplateProtocol.html</anchorfile>
      <anchor>a9f349534782703e62dc957db20b5b9f4</anchor>
      <arglist>(CService_ptr serv, const std::string &amp;vname)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CRemoteChannelElement_i *</type>
      <name>createChannelElement_i</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a9c629b397951df54e0455d9075b155e8</anchor>
      <arglist>(DataFlowInterface *sender,::PortableServer::POA *poa, bool is_pull) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a823843b549845093c1ec30e8f4451522</anchor>
      <arglist>(base::PortInterface *, const ConnPolicy &amp;, bool) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CorbaTypeTransporter</name>
    <filename>classRTT_1_1corba_1_1CorbaTypeTransporter.html</filename>
    <base>RTT::types::TypeTransporter</base>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any_ptr</type>
      <name>createAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a9c31a1b39dd027f38958fbc6e444959e</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a25de6e28d4c3a70684e8a0a04f1c8744</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, CORBA::Any &amp;any) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>createDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a66b348bb84e53427f8fddffbf4bbb8f8</anchor>
      <arglist>(const CORBA::Any *any) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateFromAny</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a0f4b7e15449ea243afa15dc9bf26588e</anchor>
      <arglist>(const CORBA::Any *blob, base::DataSourceBase::shared_ptr target) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>createPropertyDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1CorbaTypeTransporter.html</anchorfile>
      <anchor>a3f954d5fadeaaf475ad91d340988fa02</anchor>
      <arglist>(CService_ptr serv, const std::string &amp;vname)=0</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CChannelElement</name>
    <filename>interfaceRTT_1_1corba_1_1CChannelElement.html</filename>
    <member kind="function">
      <type>CFlowStatus</type>
      <name>read</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CChannelElement.html</anchorfile>
      <anchor>ae5d1d2e6501ebbe7361000de539b54b5</anchor>
      <arglist>(out any sample, in boolean copy_old_data)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>write</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CChannelElement.html</anchorfile>
      <anchor>a3a6efa42d19ac141216f115f5f9b0108</anchor>
      <arglist>(in any sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CChannelElement.html</anchorfile>
      <anchor>ae3c7f61320f0c09c203fc9db64efc26d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CRemoteChannelElement</name>
    <filename>interfaceRTT_1_1corba_1_1CRemoteChannelElement.html</filename>
    <base>RTT::corba::CChannelElement</base>
    <member kind="function">
      <type>void</type>
      <name>setRemoteSide</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CRemoteChannelElement.html</anchorfile>
      <anchor>a6105a1478880c436e408bb9bb5747bd9</anchor>
      <arglist>(in CRemoteChannelElement other)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>remoteSignal</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CRemoteChannelElement.html</anchorfile>
      <anchor>a739739a6a807c5bb6ed99fb8805e865b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remoteDisconnect</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CRemoteChannelElement.html</anchorfile>
      <anchor>ad48bf59a0b3c79eb3cd748088eff9e85</anchor>
      <arglist>(in boolean writer_to_reader)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CNoSuchPortException</name>
    <filename>exceptionRTT_1_1corba_1_1CNoSuchPortException.html</filename>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CNoCorbaTransport</name>
    <filename>exceptionRTT_1_1corba_1_1CNoCorbaTransport.html</filename>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CDataFlowInterface</name>
    <filename>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</filename>
    <member kind="function">
      <type>CPortNames</type>
      <name>getPorts</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>ab94ec51c1505c08da5de55eeda47b4e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CPortDescriptions</type>
      <name>getPortDescriptions</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>a132f6abbd0c7ec4d97216e5943f43bd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CPortType</type>
      <name>getPortType</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>ae991c82fcada2d5a181b248c6ccacb42</anchor>
      <arglist>(in string port_name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getDataType</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>aa80274bbe9b17f1ad8265a28e7ea9242</anchor>
      <arglist>(in string port_name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isConnected</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>acfece97edb9b99489652ce3e4ec94d9b</anchor>
      <arglist>(in string port_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnectPort</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>a8df9ac81d9a3152ceb255a278522dbf4</anchor>
      <arglist>(in string port_name)</arglist>
    </member>
    <member kind="function">
      <type>CChannelElement</type>
      <name>buildChannelOutput</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>a4f7e2d1620661857056d3685b8f4d597</anchor>
      <arglist>(in string input_port, inout CConnPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>CChannelElement</type>
      <name>buildChannelInput</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>aeb473c5bc44e2f4c411567b4b00e6f4f</anchor>
      <arglist>(in string output_port, inout CConnPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>createConnection</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>a2e8bada97c10edbc3463b8588a287995</anchor>
      <arglist>(in string local_port, in CDataFlowInterface remote_ports, in string remote_port, inout CConnPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>removeConnection</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>abb1dc296a365df020d6a5c8763f59894</anchor>
      <arglist>(in string local_port, in CDataFlowInterface remote_ports, in string remote_port)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>createStream</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>ad0573303d48ce7b6ae98adcc3fb012ad</anchor>
      <arglist>(in string local_port, inout CConnPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStream</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>a37f20178003c2b751edf5131036ff245</anchor>
      <arglist>(in string local_port, in string stream_name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>channelReady</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CDataFlowInterface.html</anchorfile>
      <anchor>a0a4f2bc9f8539d772b931de89e508012</anchor>
      <arglist>(in string input_port, in CChannelElement channel, in CConnPolicy cp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CRemoteChannelElement_i</name>
    <filename>classRTT_1_1corba_1_1CRemoteChannelElement__i.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::corba::CDataFlowInterface_i</name>
    <filename>classRTT_1_1corba_1_1CDataFlowInterface__i.html</filename>
    <member kind="function">
      <type>void</type>
      <name>deregisterChannel</name>
      <anchorfile>classRTT_1_1corba_1_1CDataFlowInterface__i.html</anchorfile>
      <anchor>a86383bc3b63f4d5994cec79194ce674e</anchor>
      <arglist>(CChannelElement_ptr channel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CDataFlowInterface_ptr</type>
      <name>getRemoteInterface</name>
      <anchorfile>classRTT_1_1corba_1_1CDataFlowInterface__i.html</anchorfile>
      <anchor>adac84a4049a3512dd8611feff829dc65</anchor>
      <arglist>(DataFlowInterface *dfi, PortableServer::POA_ptr poa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::NonExistingDataSource</name>
    <filename>structRTT_1_1corba_1_1NonExistingDataSource.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::corba::DataSourceProxy</name>
    <filename>classRTT_1_1corba_1_1DataSourceProxy.html</filename>
    <templarg></templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_t</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab7d4ab0d9eef6da77f667e26a14a5c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataSourceProxy</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>a8014324b60e63119e84554ddf805eade</anchor>
      <arglist>(corba::CService_ptr s, const std::string &amp;name, bool isproperty)</arglist>
    </member>
    <member kind="function">
      <type>internal::DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>a6fef84168cdba9fd16d259c2ea006c5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>abeb21718e91928b10230034f8abb00ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>a54030f4b5fdcf8464f680de3774b81bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::DataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>aae7afd5c3251d858745e9a2555379792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::DataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>ad8f05eea4b71503490cc62c81995e556</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1corba_1_1DataSourceProxy.html</anchorfile>
      <anchor>a3179a05a9f0a902711c84d5255a5231f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a7bba33072a4e6bfa608104b6436096f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; T &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::ValueDataSourceProxy</name>
    <filename>classRTT_1_1corba_1_1ValueDataSourceProxy.html</filename>
    <templarg></templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="typedef">
      <type>boost::intrusive_ptr&lt; AssignableDataSource&lt; T &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a747cbd424611b1fdc336359b0cf91b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>internal::DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>aaebcb06cfdf350ad7b617e9af2b3b433</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>afe3ac3d019938efd85bb803f4a9cbcd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>ab0a9725a6e22bd621cc3c5230a0176dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>a95155234c2420103057ddd790e4b9003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updated</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>a1623d8a2dfcc1cf144f3f35f16b7de25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::AssignableDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>a151ac9515d7706fc6034ca81a09078c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::AssignableDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1corba_1_1ValueDataSourceProxy.html</anchorfile>
      <anchor>aba4ae76f43061ef8d8836c19f45e0616</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a8d8768e83fae929586428a6cd66ca75a</anchor>
      <arglist>(param_t t)=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getRawPointer</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a5519827f47fdfdea189cf01666e81a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAssignable</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>abf2dfcdb08b91febf963cd4a806ba43e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a9b7a379cdbb70860714ab653673d0957</anchor>
      <arglist>(base::DataSourceBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>updateAction</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>ad4a5d078288ce2e01e66122b79aebe69</anchor>
      <arglist>(base::DataSourceBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AssignableDataSource&lt; T &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>ad1fa9e588f9641c35bad6b7c05eceab5</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::OperationCallerProxy</name>
    <filename>structRTT_1_1corba_1_1OperationCallerProxy.html</filename>
    <base>RTT::base::OperationCallerBaseInvoker</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>structRTT_1_1corba_1_1OperationCallerProxy.html</anchorfile>
      <anchor>a0ea4a9b7e47229d1f476e13eb004dc1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>structRTT_1_1corba_1_1OperationCallerProxy.html</anchorfile>
      <anchor>a12e9251074d5b26c5c023fee62f69247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setImplementation</name>
      <anchorfile>structRTT_1_1corba_1_1OperationCallerProxy.html</anchorfile>
      <anchor>a0e3d67eeda3eb3f3adca7a66710a00bd</anchor>
      <arglist>(boost::shared_ptr&lt; base::DisposableInterface &gt; impl, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setImplementationPart</name>
      <anchorfile>structRTT_1_1corba_1_1OperationCallerProxy.html</anchorfile>
      <anchor>a325ddb3179638a9926c352167453812d</anchor>
      <arglist>(OperationInterfacePart *orp, ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCaller</name>
      <anchorfile>structRTT_1_1corba_1_1OperationCallerProxy.html</anchorfile>
      <anchor>a23a9efada0be99368c67a1b8917d508b</anchor>
      <arglist>(ExecutionEngine *caller)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>structRTT_1_1corba_1_1OperationCallerProxy.html</anchorfile>
      <anchor>a03d2d19d29de534205aff2ee7d99198c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::CArgumentDescription</name>
    <filename>structRTT_1_1corba_1_1CArgumentDescription.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>description</name>
      <anchorfile>structRTT_1_1corba_1_1CArgumentDescription.html</anchorfile>
      <anchor>a2ec484ac3f85e6766344cd7324b2dfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>type</name>
      <anchorfile>structRTT_1_1corba_1_1CArgumentDescription.html</anchorfile>
      <anchor>aced080b7d27ef43520266db585551211</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CWrongArgumentException</name>
    <filename>exceptionRTT_1_1corba_1_1CWrongArgumentException.html</filename>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CWrongNumbArgException</name>
    <filename>exceptionRTT_1_1corba_1_1CWrongNumbArgException.html</filename>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CWrongTypeArgException</name>
    <filename>exceptionRTT_1_1corba_1_1CWrongTypeArgException.html</filename>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CNoSuchNameException</name>
    <filename>exceptionRTT_1_1corba_1_1CNoSuchNameException.html</filename>
  </compound>
  <compound kind="exception">
    <name>RTT::corba::CCallInterrupted</name>
    <filename>exceptionRTT_1_1corba_1_1CCallInterrupted.html</filename>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CSendHandle</name>
    <filename>interfaceRTT_1_1corba_1_1CSendHandle.html</filename>
    <member kind="function">
      <type>CSendStatus</type>
      <name>checkStatus</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CSendHandle.html</anchorfile>
      <anchor>ab53ad421cbb02f74c56d28dfe73c947d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>ret</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CSendHandle.html</anchorfile>
      <anchor>a94a3597a81c554d090e66544b5c83a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkArguments</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CSendHandle.html</anchorfile>
      <anchor>af629e446a99f1e95d9fad476b4d05b86</anchor>
      <arglist>(in CAnyArguments args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CSendHandle.html</anchorfile>
      <anchor>abbb3e706b94aec0aeb529e9aa398f58d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::COperationInterface</name>
    <filename>interfaceRTT_1_1corba_1_1COperationInterface.html</filename>
    <member kind="function">
      <type>COperationList</type>
      <name>getOperations</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>ae0453844331c87731e279e09a43794fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CDescriptions</type>
      <name>getArguments</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a11e78fde96b7b134e7ada3d464cce516</anchor>
      <arglist>(in string operation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getArity</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a3288c62830770dd442f51a35897fd408</anchor>
      <arglist>(in string operation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getCollectArity</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>af4429dcb2afa1de8dc58b7432bbdd654</anchor>
      <arglist>(in string operation)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getResultType</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a237ec3c1efb7ac84cc433e5ea7d1e2d9</anchor>
      <arglist>(in string operation)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getArgumentType</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a6765df433073a6d0bdff7ffa18a8abdd</anchor>
      <arglist>(in string operation, in unsigned short nbr)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getCollectType</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a0b7d56a554cda7ff05e5dabf7fcdb1c8</anchor>
      <arglist>(in string operation, in unsigned short nbr)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getDescription</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>ae884ca86ec1de4b16683df8f1d05bff0</anchor>
      <arglist>(in string operation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOperation</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a54a7948a5d5c356e647627e9589efe32</anchor>
      <arglist>(in string operation, in CAnyArguments args)</arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>callOperation</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a2fd12a8daf64ffa746831f9cc473388e</anchor>
      <arglist>(in string operation, inout CAnyArguments args)</arglist>
    </member>
    <member kind="function">
      <type>CSendHandle</type>
      <name>sendOperation</name>
      <anchorfile>interfaceRTT_1_1corba_1_1COperationInterface.html</anchorfile>
      <anchor>a5bc3fe6cc2d982fa1a29027329eb6a16</anchor>
      <arglist>(in string operation, in CAnyArguments args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::RemoteChannelElement</name>
    <filename>classRTT_1_1corba_1_1RemoteChannelElement.html</filename>
    <templarg>T</templarg>
    <base>RTT::corba::CRemoteChannelElement_i</base>
    <base>RTT::base::ChannelElement</base>
    <member kind="function">
      <type></type>
      <name>RemoteChannelElement</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a24814918cb731699e5f8054771a78b55</anchor>
      <arglist>(CorbaTypeTransporter const &amp;transport, DataFlowInterface *sender, PortableServer::POA_ptr poa, bool is_pull)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_add_ref</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>aeaa2103afabe6fc9509909930f06d6fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_remove_ref</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>ab65dfc80e6c634a2ff220e81d39668de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>remoteSignal</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>aed05cf95b13766524da482e04f994ace</anchor>
      <arglist>() ACE_THROW_SPEC((CORBA</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signal</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a87dd55d601caccc5b15de5c86c64bfd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transferSamples</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a2468156282c5a18bf4abadd48945f055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>aa8381e069ac6b880ab9b61bed9f9de06</anchor>
      <arglist>() ACE_THROW_SPEC((CORBA</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a985ad009356b51ac671f461f84fb4d3a</anchor>
      <arglist>(bool writer_to_reader) ACE_THROW_SPEC((CORBA</arglist>
    </member>
    <member kind="function">
      <type>CFlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a832d073ed3a5fe862a427f9eba5ff389</anchor>
      <arglist>(::CORBA::Any_out sample, bool copy_old_data) ACE_THROW_SPEC((CORBA</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a501c0323fdfc414823d32f40bad84d35</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::param_t sample)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>aba3751df8e510c2e81bd3f01cd8e17d1</anchor>
      <arglist>(const ::CORBA::Any &amp;sample) ACE_THROW_SPEC((CORBA</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inputReady</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>aaaefd5fa013897851d813c3e9778252d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoteElement</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a0eddae46526c29d62c88d93c0e770908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteURI</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>a39d8fa0d035c119106a0822a790d799d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getLocalURI</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>abf1600b52dd92f337b5742fbaad0ed7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteChannelElement.html</anchorfile>
      <anchor>af49c702d3ed5f1e06f4b8e4e98331fd3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::RemoteConnID</name>
    <filename>structRTT_1_1corba_1_1RemoteConnID.html</filename>
    <base>RTT::internal::ConnID</base>
  </compound>
  <compound kind="class">
    <name>RTT::corba::RemotePort</name>
    <filename>classRTT_1_1corba_1_1RemotePort.html</filename>
    <templarg>PortClass</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::corba::RemoteOutputPort</name>
    <filename>classRTT_1_1corba_1_1RemoteOutputPort.html</filename>
    <base>RemotePort&lt; base::OutputPortInterface &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>keepsLastWrittenValue</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>ad81d497958fd2287d40b85f5a6e4a6f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepLastWrittenValue</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>a16f1271468e0c1c62b4d75125b0a293f</anchor>
      <arglist>(bool new_flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>a1efbaa541874d7b1ed8e85da314b75fc</anchor>
      <arglist>(PortInterface *port)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createConnection</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>ac66ce51d1b12fff81ed29009a7ab8878</anchor>
      <arglist>(base::InputPortInterface &amp;sink, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>a90172dd920356524e039b8e62d1ecd93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>aea5966a76eeb27b9ef38ec77ac18e023</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface *</type>
      <name>antiClone</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteOutputPort.html</anchorfile>
      <anchor>a85322cdc115d695d807a6e0575c3992c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::RemoteInputPort</name>
    <filename>classRTT_1_1corba_1_1RemoteInputPort.html</filename>
    <base>RemotePort&lt; base::InputPortInterface &gt;</base>
    <member kind="function">
      <type>base::ChannelElementBase::shared_ptr</type>
      <name>buildRemoteChannelOutput</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>a95ca04580a87413e3751b16cd145d078</anchor>
      <arglist>(base::OutputPortInterface &amp;output_port, types::TypeInfo const *type, base::InputPortInterface &amp;reader_, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>af56eca37c52dba26972df25212c75938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PortInterface *</type>
      <name>antiClone</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>a06726a96fda60b4fbdd53f84ce93cc30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>a05f6fa01d8c610b7b2d446013f9afd6c</anchor>
      <arglist>(PortInterface *port)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase *</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>a473505ea56489efad45c6557b64a06d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>channelReady</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>accde83c735b5940cd29c6cfbd827b7fe</anchor>
      <arglist>(base::ChannelElementBase::shared_ptr channel, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addConnection</name>
      <anchorfile>classRTT_1_1corba_1_1RemoteInputPort.html</anchorfile>
      <anchor>aad23d8e5f563f3b4d23d960f67d1f060</anchor>
      <arglist>(internal::ConnID *port_id, base::ChannelElementBase::shared_ptr channel_input, ConnPolicy const &amp;policy)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::AnyConversion&lt; ConnPolicy &gt;</name>
    <filename>structRTT_1_1corba_1_1AnyConversion_3_01ConnPolicy_01_4.html</filename>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CService</name>
    <filename>interfaceRTT_1_1corba_1_1CService.html</filename>
    <base>RTT::corba::COperationInterface</base>
    <base>RTT::corba::CConfigurationInterface</base>
    <base>RTT::corba::CDataFlowInterface</base>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CService.html</anchorfile>
      <anchor>af04907e3f01469262dc50f1088bf2f44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getServiceDescription</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CService.html</anchorfile>
      <anchor>a6e112930347b7e5824f1ddc96da0f0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CProviderNames</type>
      <name>getProviderNames</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CService.html</anchorfile>
      <anchor>ac69f45b6d025476f721b1610d908433b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CService</type>
      <name>getService</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CService.html</anchorfile>
      <anchor>ae7abda338c4309a10b2ba9aa13b63c4a</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>hasService</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CService.html</anchorfile>
      <anchor>aa729bde8b357409c064a3270966df4f8</anchor>
      <arglist>(in string name)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CServiceRequester</name>
    <filename>interfaceRTT_1_1corba_1_1CServiceRequester.html</filename>
    <member kind="function">
      <type>string</type>
      <name>getRequestName</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a6a4db49c5d9e8d7590da3ed8cda42603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CRequestNames</type>
      <name>getRequestNames</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a215e394231ba6278f3f97b255e6051a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>COperationCallerNames</type>
      <name>getOperationCallerNames</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a6c77d7e847befb61ecb92535005d69f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CServiceRequester</type>
      <name>getRequest</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a1dce1f6242504a134fc1c75ca5a8da5b</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>hasRequest</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a0c98c876d37a8820b835dde2a191e031</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>connectTo</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>ac5a0be764b341aedd77a45cb813c32ab</anchor>
      <arglist>(in CService svc)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>connectCallerTo</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a4f4b64137b23e493432728ecbd579bac</anchor>
      <arglist>(in string name, in CService svc)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>ready</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a5359da73569afe035b67b0403f2e70ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>disconnectCaller</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>adde7f660d70f71809eda9821ac7e6ff4</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>callerReady</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a04ef893913260d60332a2054a728e2b9</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CServiceRequester.html</anchorfile>
      <anchor>a66b7bb8ab581de0ac041b2fac98d055c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>RTT::corba::CTaskContext</name>
    <filename>interfaceRTT_1_1corba_1_1CTaskContext.html</filename>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a39321d1d4f915f75967a5e00633acf8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getDescription</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a055362c929e3feb1496ca0f48ffbd677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CDataFlowInterface</type>
      <name>ports</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a3177faf65aa9fcf31338027feaadaddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>connectPeers</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a006a06e5872064d5290db83e7b7023d1</anchor>
      <arglist>(in CTaskContext p)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>disconnectPeers</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>af32f5ef9e80d744d75e8034766743e4b</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>connectPorts</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>af44258bb88b4225412015aacc9f3f691</anchor>
      <arglist>(in CTaskContext p)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>connectServices</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a909318b5961fc9c89ab4b1977e735d1d</anchor>
      <arglist>(in CTaskContext p)</arglist>
    </member>
    <member kind="function">
      <type>CTaskState</type>
      <name>getTaskState</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>abbbd19f031f53bcdc86e6afdf00abab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>configure</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>ab1016d2a3f16cc67ae115354c2fec39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>start</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>ac94a2b759abc627b3c5aa997040ffc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>activate</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>acf369b45ab35c25782f5dc5b8487322c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>stop</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a237adcdea575941782e06f7cbff7ab7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>resetException</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>abe3ca0c389a7321dc9750f3ab1c850ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>cleanup</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>aa1c2a14a6655b53823f301a5f4022392</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isActive</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a0bc8773f86bb0fe9b6dc5149f1565526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isRunning</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a84dcc8b1ceb238fecbf6f8323e45268c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isConfigured</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a5193d3b28eadd4e3cd97a6724bb9d66a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>inFatalError</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>ae2ef7c2c19775958e1573bf065ad9bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>inRunTimeError</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>af5e84ac6208b504d28f61934092b2683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CService</type>
      <name>getProvider</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a46e66025f32ad9882a7f2cd80c5059af</anchor>
      <arglist>(in string service_name)</arglist>
    </member>
    <member kind="function">
      <type>CServiceRequester</type>
      <name>getRequester</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a908f420a02f03526596672d4eced1196</anchor>
      <arglist>(in string service_name)</arglist>
    </member>
    <member kind="function">
      <type>CPeerNames</type>
      <name>getPeerList</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>ac6a820f2197ac7bccfac3c24c9907c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CTaskContext</type>
      <name>getPeer</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>ac14c4516f8129ad19cff5c6d5243119a</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>hasPeer</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a26350486f87101d5dd55c2bb758325b1</anchor>
      <arglist>(in string name)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>addPeer</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>a5ebe42cbef8d95cccbac32b45e1208cc</anchor>
      <arglist>(in CTaskContext p, in string peer_alias)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>removePeer</name>
      <anchorfile>interfaceRTT_1_1corba_1_1CTaskContext.html</anchorfile>
      <anchor>ae5469855eeff1363041492a80a5a29f8</anchor>
      <arglist>(in string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::TaskContextFactory</name>
    <filename>classRTT_1_1corba_1_1TaskContextFactory.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>InitOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextFactory.html</anchorfile>
      <anchor>a78345bb924764568bd3a48950e38beeb</anchor>
      <arglist>(int argc, char *argv[], Seconds orb_timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DestroyOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextFactory.html</anchorfile>
      <anchor>a47b7926274ba3871e0f1b8e689faebb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskContext *</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextFactory.html</anchorfile>
      <anchor>aba49f62e83ae088968a02c81b8755b11</anchor>
      <arglist>(std::string name, bool is_ior=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskContext *</type>
      <name>CreateFromFile</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextFactory.html</anchorfile>
      <anchor>a3625a2fff4abbbea6f225b21a84eb73a</anchor>
      <arglist>(std::string filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::IllegalServer</name>
    <filename>structRTT_1_1corba_1_1IllegalServer.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::corba::TaskContextProxy</name>
    <filename>classRTT_1_1corba_1_1TaskContextProxy.html</filename>
    <base>RTT::TaskContext</base>
    <base>RTT::corba::ApplicationServer</base>
    <member kind="function">
      <type>corba::CTaskContext_ptr</type>
      <name>server</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a6d7a5238ce5bea0359ba5c2bf766584a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>activate</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a702052a95f039f56c9de1519e10c0b8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>aa9bd244082ee0352d45f448e1b5e841a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a9ea56b9ed500fbf9bec7a769cd2ccae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a3e5ecacf2bf68d3eabee711747a12dd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>configure</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a302f6a3d529d29c7c1ccc60afb840441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>cleanup</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a93f4379b062e7286e37c225996c0b709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a00904940f4bfcd7e23261a6e8325b06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConfigured</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a1da68cc7d2a8de66bcda32096b754735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inFatalError</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>aa58e8059f29506a1c4df9bd60eb24542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRunTimeError</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>ae94d2e03dda53dcad5e4a2b4aea0032e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TaskState</type>
      <name>getTaskState</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a03fd594949ef8654daa21998e313a7c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addPeer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a10ffef8be36a2ba8a74222f277b990bd</anchor>
      <arglist>(TaskContext *peer, std::string alias=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePeer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>ae92b284f9a6ea5a548d7043fdc005eba</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePeer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a051c31efd643ab61800e3dce2b9ad08f</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectPeers</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a38bac21e6c43395f9c3a8b3fc1db17ca</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectPeers</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a859604ef48fae11211537048f305150b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PeerList</type>
      <name>getPeerList</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a38955bca9a2ff2af401cb7f1a5824df2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPeer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>af5afb105eb7dc8add32be6bfc67d4423</anchor>
      <arglist>(const std::string &amp;peer_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TaskContext *</type>
      <name>getPeer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>aa8422f6c124522214dd159f19b8067e7</anchor>
      <arglist>(const std::string &amp;peer_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectPorts</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>ac842b590f49e2356afb68f06ee62ab4c</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connectServices</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>af8d5035a98b5c38a4a1476aa50bcb0d4</anchor>
      <arglist>(TaskContext *peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>ae9ca163585e0ea9480424cd59531a0aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DestroyOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a6cdbb26dfc54b67c284135e826b62960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskContextProxy *</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a5221c6007b7ceb6d397b9b8bf02b5943</anchor>
      <arglist>(std::string name, bool is_ior=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskContextProxy *</type>
      <name>CreateFromFile</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>af20c64c88305e2a64a8a1a778e8ebf2e</anchor>
      <arglist>(std::string filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskContext *</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a5a66a077c9d9add68b0057b6aa71feef</anchor>
      <arglist>(::RTT::corba::CTaskContext_ptr task, bool force_remote=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PortableServer::POA_ptr</type>
      <name>ProxyPOA</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a664bef894603be46e6998955246d2d61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskContextProxy</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>afb77d6dc2a2ba13037ff23716df5a539</anchor>
      <arglist>(std::string location, bool is_ior)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskContextProxy</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a09952a063807c4c700a815c6e6c2d13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskContextProxy</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>ac649aaa48922f229997a127672767ab4</anchor>
      <arglist>(::RTT::corba::CTaskContext_ptr t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFromURIOrTaskname</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>ab7f38a761efa69863de69ad7ab7b74c9</anchor>
      <arglist>(std::string location, bool is_ior)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; base::PortInterface * &gt;</type>
      <name>port_proxies</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>afb54764824414d6de6c7255b826b51f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static PortableServer::POA_var</type>
      <name>proxy_poa</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextProxy.html</anchorfile>
      <anchor>a28725d9d3f6dee48da6d05dd51ac4b66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::OrbRunner</name>
    <filename>classRTT_1_1corba_1_1OrbRunner.html</filename>
    <base>RTT::Activity</base>
    <member kind="function">
      <type>void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1corba_1_1OrbRunner.html</anchorfile>
      <anchor>a3a4a1d3b98cf13236d3782223ec1d8ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1corba_1_1OrbRunner.html</anchorfile>
      <anchor>ac94669e3014408393e4de70a55b84cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1corba_1_1OrbRunner.html</anchorfile>
      <anchor>aebc763c6fc4b234df241b247abf1285a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::corba::TaskContextServer</name>
    <filename>classRTT_1_1corba_1_1TaskContextServer.html</filename>
    <base>RTT::corba::ApplicationServer</base>
    <member kind="function">
      <type></type>
      <name>~TaskContextServer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>ac4f5ceca9ccae15b2230dca2bfab3f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CTaskContext_ptr</type>
      <name>server</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>ac7180249551001aeb5a522d713364691</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ShutdownOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a3bbbcfa14b3345f1e86dffaf6ac89ee5</anchor>
      <arglist>(bool wait_for_completion=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CleanupServers</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>afc3ce6e88c4e8234bff1fcd74c9018cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RunOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a3af4b20d329e7cfb5a64560ee1d6d3f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ThreadOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a923a61c9e6688d644b5e56bd9d7e78c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ThreadOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>abff12cff0635b30e8cb816b74208b6b1</anchor>
      <arglist>(int scheduler, int priority=RTT::os::LowestPriority, unsigned cpu_affinity=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DestroyOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a85b6ba45de3f5429bf7fc8466364c57b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskContextServer *</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a0de310b389647719c911d1f84433c41b</anchor>
      <arglist>(TaskContext *tc, bool use_naming=true, bool require_name_service=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CTaskContext_ptr</type>
      <name>CreateServer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a7b4b8c4d41cbcc825278525e30e3b7af</anchor>
      <arglist>(TaskContext *tc, bool use_naming=true, bool require_name_service=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CleanupServer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a0d81798b37a802b2804c2531c1c21c9c</anchor>
      <arglist>(TaskContext *tc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getIOR</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a0846b07cde5e625acdebae79a1242152</anchor>
      <arglist>(TaskContext *tc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskContextServer</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>a86e2bab01500f8915cabde2f9f8e09a3</anchor>
      <arglist>(TaskContext *taskcontext, bool use_naming, bool require_name_service)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>DoShutdownOrb</name>
      <anchorfile>classRTT_1_1corba_1_1TaskContextServer.html</anchorfile>
      <anchor>aa31747af6b538a581e907f6c41ee6874</anchor>
      <arglist>(bool wait_for_completion=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::corba::CorbaLibPlugin</name>
    <filename>structRTT_1_1corba_1_1CorbaLibPlugin.html</filename>
    <base>RTT::types::TransportPlugin</base>
    <member kind="function">
      <type>bool</type>
      <name>registerTransport</name>
      <anchorfile>structRTT_1_1corba_1_1CorbaLibPlugin.html</anchorfile>
      <anchor>a35b3480fc466970f3a613570b8d23b88</anchor>
      <arglist>(std::string name, RTT::types::TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTransportName</name>
      <anchorfile>structRTT_1_1corba_1_1CorbaLibPlugin.html</anchorfile>
      <anchor>a12b48f5bc5e7d16a76d48f493392ac9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypekitName</name>
      <anchorfile>structRTT_1_1corba_1_1CorbaLibPlugin.html</anchorfile>
      <anchor>a8a87eea3097000045e8d74bdf9917aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>structRTT_1_1corba_1_1CorbaLibPlugin.html</anchorfile>
      <anchor>a8dc0b5a514af05873900636ae8ccf9e3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::detail</name>
    <filename>namespaceRTT_1_1detail.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::dev::AnalogInInterface</name>
    <filename>classRTT_1_1dev_1_1AnalogInInterface.html</filename>
    <base protection="private">NameServerRegistrator&lt; AnalogInInterface * &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>AnalogReference</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a72f0d588bbdfe1d90c8e664ef6339b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Common</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a72f0d588bbdfe1d90c8e664ef6339b7aa0ef2e74db08abf8fb6d4cea5882d16df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Differential</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a72f0d588bbdfe1d90c8e664ef6339b7aa9ebb6830cc796712b0c9e262d348e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Other</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a72f0d588bbdfe1d90c8e664ef6339b7aa8d7d5a3dfd468377d9e5481e532966b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalogInInterface</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a2ce88331de390a5a368061bbfca56e1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalogInInterface</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a643e68c258ad050b0f91c2a33bc272e6</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rangeSet</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>aaac102fe8c045415bbf7777dc3a7a5ca</anchor>
      <arglist>(unsigned int chan, unsigned int range)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>arefSet</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>af45d5df2f5545953f2ebd6ed8825d0b0</anchor>
      <arglist>(unsigned int chan, unsigned int aref)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rawRead</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a77ef5c4d5a1063199780892ec16ca5fd</anchor>
      <arglist>(unsigned int chan, int &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>aa10b8ac6f54843a46f9d39b77a8a3246</anchor>
      <arglist>(unsigned int chan, double &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>rawRange</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a284949ba034a262ff5b35481a55206ea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>lowest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a1fa115f4efd722cbd887efa23742ed37</anchor>
      <arglist>(unsigned int chan) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>highest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>ad21815345ae33e32db82f9f56ef86047</anchor>
      <arglist>(unsigned int chan) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>resolution</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a910c41da6c6c1309c0b4ecc0ce9163b3</anchor>
      <arglist>(unsigned int chan) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>nbOfChannels</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a8263c2ab866c1f9e6215d86ff31bbe34</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>binaryRange</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a33a22d9cdeb196b5d50ce3224722cef7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binaryLowest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a9b955935ff8baa2cbd8ef9262f5921bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binaryHighest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>aa6521bdba1cc2916e0b5c5b93295b56a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NameServer&lt; AnalogInInterface * &gt;</type>
      <name>nameserver</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInInterface.html</anchorfile>
      <anchor>a3fc19cab4906bd8ae9f76c269039ed89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::AnalogInput</name>
    <filename>classRTT_1_1dev_1_1AnalogInput.html</filename>
    <member kind="function">
      <type></type>
      <name>AnalogInput</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInput.html</anchorfile>
      <anchor>ad415dabdb6a62a5b7a18b76744e7d958</anchor>
      <arglist>(AnalogInInterface *ana_in, unsigned int channel_nr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnalogInput</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInput.html</anchorfile>
      <anchor>a3f7b1f54b7292d2fcc3aba18f06eb54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInput.html</anchorfile>
      <anchor>ac601de5b4f076a959c77a9002d64205e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rawValue</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogInput.html</anchorfile>
      <anchor>a547b6136e538afa97fd892303d66e48f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::AnalogOutInterface</name>
    <filename>classRTT_1_1dev_1_1AnalogOutInterface.html</filename>
    <base protection="private">NameServerRegistrator&lt; AnalogOutInterface * &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>AnalogReference</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a8587829dff5f3db377a5c9f69af4b950</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Common</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a8587829dff5f3db377a5c9f69af4b950a43aa8798301ffb95f46c20b1f97f7b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Differential</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a8587829dff5f3db377a5c9f69af4b950aa13fa0f716cb5320a8ed8c9c1284bd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Other</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a8587829dff5f3db377a5c9f69af4b950a6125fe01baf81544568f7f4204e34b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalogOutInterface</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>aefd3948c7804e6f00b49b78a233ba5d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalogOutInterface</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a0f01f244585e4aba38999874f1fcbf66</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rangeSet</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a5a920abec812f287e32b876078294401</anchor>
      <arglist>(unsigned int chan, unsigned int range)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>arefSet</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>ac386ff25bbeeb0f3a99fc7ea23182ad8</anchor>
      <arglist>(unsigned int chan, unsigned int aref)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rawWrite</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a758993b2f00065e8dfb87136ff31568f</anchor>
      <arglist>(unsigned int chan, int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rawRead</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a6bee2515461b2a0ce282dfe4b138e592</anchor>
      <arglist>(unsigned int chan, int &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>rawRange</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>aee254a4441bc37bc5cc259ac2d10eb19</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>aac3278b8924e5d71b64254942f9f23e9</anchor>
      <arglist>(unsigned int chan, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a3da58ad30e08322040b00d8de5bab9ae</anchor>
      <arglist>(unsigned int chan, double &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>lowest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a6195782882a78a65d202bf67a5c9d1d3</anchor>
      <arglist>(unsigned int chan) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>highest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>ab390545ca4fc950f60f982991c6ad671</anchor>
      <arglist>(unsigned int chan) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>resolution</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a4863059ef6f409d7a7b3029988583d8f</anchor>
      <arglist>(unsigned int chan) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>nbOfChannels</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a5233b02294d49fcc2a3fccf4b379fb45</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>binaryRange</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a92f1913c53358dc749387cdb32e7413d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binaryLowest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a0e3cd61593ae43da16df7be858d3147c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binaryHighest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>ab5c696b08b60050fcffb4fadc10df3f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NameServer&lt; AnalogOutInterface * &gt;</type>
      <name>nameserver</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutInterface.html</anchorfile>
      <anchor>a71523997bebeb1bd4e6fd074f2eda864</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::AnalogOutput</name>
    <filename>classRTT_1_1dev_1_1AnalogOutput.html</filename>
    <member kind="function">
      <type></type>
      <name>AnalogOutput</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>af9a7d61eeb2cfd613ab7254a6260d596</anchor>
      <arglist>(AnalogOutInterface *ana_out, unsigned int channel_nr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnalogOutput</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>aac2833527fd6c5406f2cd6ed2693d667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>value</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>aa88f6be8eeee032aabe62c99e6d12dcd</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rawValue</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>aa3435b0dbfaf656687b98cbf1e67b48d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>a293f24686d68eb82be37a0149b61daa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rawValue</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>a01b5c1f55f27ca04c36a27d0c4e7d545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>highest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>a7c6695245b57f035cf9980171dc7dc46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lowest</name>
      <anchorfile>classRTT_1_1dev_1_1AnalogOutput.html</anchorfile>
      <anchor>a19079bb82f66bfda66a1ad25befb3ef2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::AxisInterface</name>
    <filename>classRTT_1_1dev_1_1AxisInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a0710b9dadc14e9a58fca7eb88fb6f132</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>lock</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>ae0ba692d28ed8d19881a26fff35c8091</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>unlock</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a62dec668d823d6e3756e29c6aea537de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>drive</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a137b566b248bb145a0ccb1506ec9c772</anchor>
      <arglist>(double v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDriveValue</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>aa8d42b9ab30375c1b7fb0bcc3c5de308</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLocked</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>ab2ad7d4587e72d1dc0a42290b9c5ecc9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isStopped</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a485155b04f6e156fed67b82ba20d9e40</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDriven</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>ad9e41a4386bd0b3faccbea01ccf54d9d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DigitalOutput *</type>
      <name>getBrake</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>abb399b8bfc70a56cc204fc83bead634d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DigitalOutput *</type>
      <name>getEnable</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>ac46fa472a92954e24e49b70c59b0bd90</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SensorInterface&lt; double &gt; *</type>
      <name>getSensor</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a2c53e3682cafef4edce6e0e2119c0c04</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>sensorList</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a9196a96fd30b9c8866448c85676e7350</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DigitalInput *</type>
      <name>getSwitch</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>acee840ed6829696ab04a172118feedf1</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>switchList</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a57b004ef17168f230dfca43cf1d269d9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SensorInterface&lt; int &gt; *</type>
      <name>getCounter</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>aaa5c956b957c2f9e1d251647cacccf90</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>counterList</name>
      <anchorfile>classRTT_1_1dev_1_1AxisInterface.html</anchorfile>
      <anchor>a5a484b65511bf39a034907c665aacd1b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::CalibrationInterface</name>
    <filename>classRTT_1_1dev_1_1CalibrationInterface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calibrate</name>
      <anchorfile>classRTT_1_1dev_1_1CalibrationInterface.html</anchorfile>
      <anchor>a77859e5cbb924282449705962061fbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCalibrated</name>
      <anchorfile>classRTT_1_1dev_1_1CalibrationInterface.html</anchorfile>
      <anchor>a979e71e78509f6ad7b8cc72efa817062</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unCalibrate</name>
      <anchorfile>classRTT_1_1dev_1_1CalibrationInterface.html</anchorfile>
      <anchor>a027ba2a4ea1ab6009ca7f00348f9b329</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::DigitalInInterface</name>
    <filename>classRTT_1_1dev_1_1DigitalInInterface.html</filename>
    <base protection="private">NameServerRegistrator&lt; DigitalInInterface * &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitalInInterface</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>a84e10fe07c96b545ed6d9c0ed23a39c1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalInInterface</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>a70f9fec3a9e3e65c47a1b210feaac640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOn</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>a74756da2bb541b0d061fd832ea62a2ed</anchor>
      <arglist>(unsigned int bit=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOff</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>aaf69a03b93da2d1589a186aa86a930b4</anchor>
      <arglist>(unsigned int bit=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readBit</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>ab47731d99bfe2ca845b413af094352ad</anchor>
      <arglist>(unsigned int bit=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>readSequence</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>adb80ff0d0d01efd180616e8e28b577e6</anchor>
      <arglist>(unsigned int start_bit, unsigned int stop_bit) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>nbOfInputs</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>ae3e5bdf074a389a82378ffcd6f91d1e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NameServer&lt; DigitalInInterface * &gt;</type>
      <name>nameserver</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInInterface.html</anchorfile>
      <anchor>a6b6a45771f17504a0e0e8da0b8dc9457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::DigitalInput</name>
    <filename>classRTT_1_1dev_1_1DigitalInput.html</filename>
    <member kind="function">
      <type></type>
      <name>DigitalInput</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInput.html</anchorfile>
      <anchor>aacb1e1ab622c82a076340352ccba947e</anchor>
      <arglist>(DigitalInInterface *dig_in, unsigned int bit_nr, bool invert=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalInput</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInput.html</anchorfile>
      <anchor>ab30a1b784a9e315a72f660ff98207cee</anchor>
      <arglist>(const bool &amp;value, bool invert=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalInput</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInput.html</anchorfile>
      <anchor>aac4dad51d018508202ca2737e0914c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOn</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalInput.html</anchorfile>
      <anchor>a4cc86a9e6fc26ed787f8b97ab88b6d2a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::DigitalOutInterface</name>
    <filename>classRTT_1_1dev_1_1DigitalOutInterface.html</filename>
    <base protection="private">NameServerRegistrator&lt; DigitalOutInterface * &gt;</base>
    <member kind="function">
      <type></type>
      <name>DigitalOutInterface</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>af2a81dc470e87444bb30ae30d87d0e2d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalOutInterface</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>a4582661895124882d69f9e858da6cdbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>switchOn</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>aaefa1bf86ee388f66b82cd63880cfbe3</anchor>
      <arglist>(unsigned int n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>switchOff</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>aea621e863ae76765df09d3beccde944a</anchor>
      <arglist>(unsigned int n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBit</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>ab38c83cfc8061750d0d1351e3be37f66</anchor>
      <arglist>(unsigned int bit, bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSequence</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>af4d4b150e447a42228765afdbc88e5a2</anchor>
      <arglist>(unsigned int start_bit, unsigned int stop_bit, unsigned int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkBit</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>adc989a7d5d5a461eefb992c6d9fea13c</anchor>
      <arglist>(unsigned int n) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>checkSequence</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>a39775b30dec70f712c13832ac76f8fea</anchor>
      <arglist>(unsigned int start_bit, unsigned int stop_bit) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>nbOfOutputs</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>a4819f8fa08cbb16d026bf76d362b4d42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NameServer&lt; DigitalOutInterface * &gt;</type>
      <name>nameserver</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutInterface.html</anchorfile>
      <anchor>af94e98e0c35b3ca01cfa620b1a3d287d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::DigitalOutput</name>
    <filename>classRTT_1_1dev_1_1DigitalOutput.html</filename>
    <member kind="function">
      <type></type>
      <name>DigitalOutput</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>a75396b7d19bc65bbed7fcd31e89848c7</anchor>
      <arglist>(DigitalOutInterface *dig_out, unsigned int relay_nr, bool _invert=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalOutput</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>ac4a87b04613a20e8ce279996bc31f3b5</anchor>
      <arglist>(bool initial_state=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalOutput</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>a65d5e704ae02b89b305e23aebf71fd2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBit</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>aa7a1455d88a2ba3939e0e0995fa41e16</anchor>
      <arglist>(bool on_off)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchOn</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>aec78a8fd013d50f6162fc75a771e89bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchOff</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>a122e104948791a895d8a04083450186e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOn</name>
      <anchorfile>classRTT_1_1dev_1_1DigitalOutput.html</anchorfile>
      <anchor>ab8642c8bbab269d3a775619334d2e8f6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::DriveInterface</name>
    <filename>classRTT_1_1dev_1_1DriveInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enableDrive</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a0acfdd858a13e6b4e21f300765659719</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>disableDrive</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a2247638fa674d0b01a4264d868b88137</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>af0e7dfe1c189f751e1fb811b18bfa5eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DigitalOutput *</type>
      <name>getEnable</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a2f18f345acfaea4270cf5e1e3410b0b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addOffset</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a24e1e989618577108d8728e15995d919</anchor>
      <arglist>(double addoffset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getOffset</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a8e7ba2d9c0f5735eb731970230dc5d07</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>driveSet</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a296e62fa2fc7de076243bd217c5738a6</anchor>
      <arglist>(double v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>driveGet</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a42d0ada4bb91a6b35d282fc65f9d2f61</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxDriveGet</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a2e7583ca16d2ead9facd1ae1a7ef3fbe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>minDriveGet</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a40b796d263ac98baa6a0d52dd655d77a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>limit</name>
      <anchorfile>classRTT_1_1dev_1_1DriveInterface.html</anchorfile>
      <anchor>a2adfe82ded117ac1470d1259cefb38c7</anchor>
      <arglist>(double lower, double higher, const internal::Signal&lt; void(std::string)&gt; &amp;ev)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::EncoderInterface</name>
    <filename>classRTT_1_1dev_1_1EncoderInterface.html</filename>
    <base protection="private">NameServerRegistrator&lt; EncoderInterface * &gt;</base>
    <member kind="function">
      <type></type>
      <name>EncoderInterface</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>a66050823b361e63818b2630392b6a696</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EncoderInterface</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>a6aab9c4d06284cb72a7b3d872917313e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>positionGet</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>aabdd70b05438b08b0f2635fab5eb509a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>turnGet</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>a7824a01fdfb2d412d7af416b9fcfc80b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>positionSet</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>aee4eca7dc670209b01ee334fdc94ce31</anchor>
      <arglist>(int p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>turnSet</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>a7cd14f4da7f7014b27833e037f642830</anchor>
      <arglist>(int t)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resolution</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>a21f18b6c186d64bfbb6d87812619c253</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>upcounting</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>ac48c8930a16fc17e685a76f7c9713999</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NameServer&lt; EncoderInterface * &gt;</type>
      <name>nameserver</name>
      <anchorfile>classRTT_1_1dev_1_1EncoderInterface.html</anchorfile>
      <anchor>ae702e158259f77edfdea83128516339e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::NameServer</name>
    <filename>classRTT_1_1dev_1_1NameServer.html</filename>
    <templarg>_ValueType</templarg>
    <class kind="class">RTT::dev::NameServer::name_iterator</class>
    <class kind="class">RTT::dev::NameServer::value_iterator</class>
    <member kind="typedef">
      <type>Rep::iterator</type>
      <name>iterator</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>ae05983dbfe7908e6031a3b69f1cea72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rep::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a52646d1da9ba1c44db31453f91ed57b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NameServer</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a40a847c2a2735a5cba44925e7fafcaf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NameServer</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>af6ad4054f9cb718f9abb01f357d91ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNameRegistered</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>ae84e422051d0584ed668183904a7e947</anchor>
      <arglist>(const NameType &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isObjectRegistered</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a86a10aeaf9fd6d0b1e09654317a3017b</anchor>
      <arglist>(const ValueType o) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getObject</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a081601a8cf2275fefbf92bc93d9e7fef</anchor>
      <arglist>(const NameType &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const NameType &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>ae54354c96531b432b04b49fa33b18758</anchor>
      <arglist>(const ValueType s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerObject</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>add2c78b667f7127b55e86cbc5c08a94e</anchor>
      <arglist>(const ValueType obj, const NameType &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>af91b37960f24a96625445e890148ed18</anchor>
      <arglist>(const ValueType obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterName</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a3a7746a7440d63df4dfd2524bfa5f509</anchor>
      <arglist>(const NameType &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>name_iterator</type>
      <name>getNameBegin</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>aa75e9062b6f8e51fab7a2b910ee2ce16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>name_iterator</type>
      <name>getNameEnd</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a1fac237168343d23d20dac287a0ce9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_iterator</type>
      <name>getValueBegin</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>a292b1b1f40be7ae4c2cea7473bd6ccd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_iterator</type>
      <name>getValueEnd</name>
      <anchorfile>classRTT_1_1dev_1_1NameServer.html</anchorfile>
      <anchor>adf8a0c010de27bf0156ee87580efe43f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::NameServer::name_iterator</name>
    <filename>classRTT_1_1dev_1_1NameServer_1_1name__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::dev::NameServer::value_iterator</name>
    <filename>classRTT_1_1dev_1_1NameServer_1_1value__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::dev::NameServerRegistrator</name>
    <filename>classRTT_1_1dev_1_1NameServerRegistrator.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::dev::PulseTrainGeneratorInterface</name>
    <filename>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</filename>
    <base protection="private">NameServerRegistrator&lt; PulseTrainGeneratorInterface * &gt;</base>
    <member kind="function">
      <type></type>
      <name>PulseTrainGeneratorInterface</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>a861a26ef7993d37cd44c3f7f43db0f28</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulseTrainGeneratorInterface</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>aca7f5e21a83226e230f253c94ab12f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pulseWidthSet</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>ac7650f5264ec80ab9b98549dd22fa43a</anchor>
      <arglist>(psecs picos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pulsePeriodSet</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>acb8d134b74b7b08815c4cca1298976eb</anchor>
      <arglist>(psecs picos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>a2ca3db20baae37f0d8b09eb522e19707</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>a83319c5f9364abf402187b0d286e7e3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NameServer&lt; PulseTrainGeneratorInterface * &gt;</type>
      <name>nameserver</name>
      <anchorfile>classRTT_1_1dev_1_1PulseTrainGeneratorInterface.html</anchorfile>
      <anchor>ac17beb8d02490580266e5cb499d9e9c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::dev::SensorInterface</name>
    <filename>classRTT_1_1dev_1_1SensorInterface.html</filename>
    <templarg></templarg>
    <base>RTT::dev::CalibrationInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readSensor</name>
      <anchorfile>classRTT_1_1dev_1_1SensorInterface.html</anchorfile>
      <anchor>a8c23e8d39fc67a96385e83b02d31f6b8</anchor>
      <arglist>(DataType &amp;p) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataType</type>
      <name>readSensor</name>
      <anchorfile>classRTT_1_1dev_1_1SensorInterface.html</anchorfile>
      <anchor>ab3470bdece6e15e37dcabb23a0963802</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataType</type>
      <name>maxMeasurement</name>
      <anchorfile>classRTT_1_1dev_1_1SensorInterface.html</anchorfile>
      <anchor>a161642d1275ece00ae85e20551235551</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataType</type>
      <name>minMeasurement</name>
      <anchorfile>classRTT_1_1dev_1_1SensorInterface.html</anchorfile>
      <anchor>a339a097c14cbd1d02b89b37ac0189613</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataType</type>
      <name>zeroMeasurement</name>
      <anchorfile>classRTT_1_1dev_1_1SensorInterface.html</anchorfile>
      <anchor>ae5cef701ce521b5f8bcd5f91f4efc53f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::extras</name>
    <filename>namespaceRTT_1_1extras.html</filename>
    <class kind="class">RTT::extras::FileDescriptorActivity</class>
    <class kind="class">RTT::extras::FileDescriptorActivityInterface</class>
    <class kind="class">RTT::extras::FileDescriptorSimulationActivity</class>
    <class kind="class">RTT::extras::IRQActivity</class>
    <class kind="struct">RTT::extras::MultiVector</class>
    <class kind="class">RTT::extras::PeriodicActivity</class>
    <class kind="class">RTT::extras::ReadOnlyPointer</class>
    <class kind="class">RTT::extras::SequentialActivity</class>
    <class kind="class">RTT::extras::SimulationActivity</class>
    <class kind="class">RTT::extras::SimulationThread</class>
    <class kind="class">RTT::extras::SlaveActivity</class>
    <class kind="class">RTT::extras::TimerThread</class>
    <member kind="typedef">
      <type>MultiVector&lt; 6, double &gt;</type>
      <name>Double6D</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>a6b335af9b09392da66ca6051c1c1064c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiVector&lt; 6, int &gt;</type>
      <name>Int6D</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>a5e1bc3286d786f3bb4ca52b2f74651c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiVector&lt; 6, bool &gt;</type>
      <name>Bool6D</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>a8f92b51c32521a925c6c585b692e67b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiVector&lt; 6, long &gt;</type>
      <name>Long6D</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>ad949fdee31daadae8be40f07a5a5299c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TimerThread &gt;</type>
      <name>TimerThreadPtr</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>a2527e5f831cdac569196f3d34958f2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>ac5603b9ed4e95438fc3efe130f928dcd</anchor>
      <arglist>(std::ostream &amp;os, MultiVector&lt; S, T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>a5c6009f86438775322b1949ccd10eaba</anchor>
      <arglist>(std::istream &amp;os, MultiVector&lt; S, T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decomposeProperty</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>ae35ec884a3cf1af72671e91d2841c5c1</anchor>
      <arglist>(base::PropertyIntrospection *pi, const Property&lt; MultiVector&lt; S, T &gt; &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>composeProperty</name>
      <anchorfile>namespaceRTT_1_1extras.html</anchorfile>
      <anchor>a2494f853f769876d91b5b640ecedc684</anchor>
      <arglist>(const PropertyBag &amp;bag, Property&lt; MultiVector&lt; S, T &gt; &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::FileDescriptorActivity</name>
    <filename>classRTT_1_1extras_1_1FileDescriptorActivity.html</filename>
    <base>RTT::extras::FileDescriptorActivityInterface</base>
    <base>RTT::Activity</base>
    <member kind="function">
      <type></type>
      <name>FileDescriptorActivity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>afd5aa263867e5ebd5a187bbfe3b87262</anchor>
      <arglist>(int priority, base::RunnableInterface *_r=0, const std::string &amp;name=&quot;FileDescriptorActivity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileDescriptorActivity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a0c213fba8721397706d0c52722ad0ba6</anchor>
      <arglist>(int scheduler, int priority, base::RunnableInterface *_r=0, const std::string &amp;name=&quot;FileDescriptorActivity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileDescriptorActivity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>af9f7bdb0ab9473bd6655ad53e4666c0e</anchor>
      <arglist>(int scheduler, int priority, Seconds period, base::RunnableInterface *_r=0, const std::string &amp;name=&quot;FileDescriptorActivity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileDescriptorActivity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>af49efaa4c63df7bf1b3d7a71cf756e79</anchor>
      <arglist>(int scheduler, int priority, Seconds period, unsigned cpu_affinity, base::RunnableInterface *_r=0, const std::string &amp;name=&quot;FileDescriptorActivity&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a41ea7eb806cb34dac532c0acc12513dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a1a7ae66f0c1c77c17acf05eae57d3e11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>ab945813a275686f6bbaf6e55c3e102a3</anchor>
      <arglist>(Seconds period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>aaffa36dd8a3bece07ce48b773e48fafc</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwatch</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a248b4473d666ecef8ad4644a51c7f83c</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllWatches</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a02e98b358e83f845c5a43597406f464a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWatched</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a3361185c2083bf10c2f149336343e71d</anchor>
      <arglist>(int fd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdated</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>af757c6c6f5ec98bb4580b9e0944ff315</anchor>
      <arglist>(int fd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a9f5975a8dd88124fa9885cca379decaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasError</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a770952053f01743cc517d5cb2d479ea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a6a222764f691233877315a218e0eb356</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout_us</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a52447308cb87b1b6ff4aacbe700f5deb</anchor>
      <arglist>(int timeout_us)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a3afed22658793bf7dd978fdd20df8e18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimeout_us</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a5fe2656a5a138823daa33fdbe91180fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a64ecda39f8c91afde14b64aa71b67f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a6c8e8b54ca6f7dbf6ef902a26f039231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>ad8b977911405631693b5a0fcba5883b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>a311c8656b08744fa5dd3a7b28184a57b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>ac9e8bef0993c0fd1219567c61673d113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivity.html</anchorfile>
      <anchor>af7a62d5013ac78a6cb5e0414eabd09d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::FileDescriptorActivityInterface</name>
    <filename>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>watch</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>ac46f870fc92f362ab6429dcc93222b5f</anchor>
      <arglist>(int fd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unwatch</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>a1897fbb5d755ac2ceba9b628137187a5</anchor>
      <arglist>(int fd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearAllWatches</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>a4c5183a8e3a8c8fc07b5e676862ad4db</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWatched</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>a9da74c4cf6b639c51e5895b5b8a7e284</anchor>
      <arglist>(int fd) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUpdated</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>adbceff67307608560094f8fcd24d424d</anchor>
      <arglist>(int fd) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>a9b0ab120250bd72a584148f7a71e0af8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasError</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>add80cf4937ff433c2291a42f6a180422</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>a8ecf225f34cc113dcd424f5881d31cac</anchor>
      <arglist>(int timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTimeout_us</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>ae7de553dac217bae1733e3ecf4fbed6b</anchor>
      <arglist>(int timeout_us)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>a4eaf025623a937974e8b639b6a4f04fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTimeout_us</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorActivityInterface.html</anchorfile>
      <anchor>addd62a2dbbdb5d9712794fde868b891e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::FileDescriptorSimulationActivity</name>
    <filename>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</filename>
    <base>RTT::extras::FileDescriptorActivityInterface</base>
    <base>RTT::base::ActivityInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileDescriptorSimulationActivity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a2bf08fb7a17dbda5770daf48d1397256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>acae3caeab39da1cb464259065b411260</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwatch</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a0e5fd9f4be605d8d07a219d913b25191</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllWatches</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>aed948706f86c59df14e1a69d1b85b819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWatched</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>aa2fe734681f358ab99b1f725eba1aaf3</anchor>
      <arglist>(int fd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdated</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>ae0fa82c3132e48fb72a6e07b78a8e7f6</anchor>
      <arglist>(int fd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a24d5b6ea0ba652b8fcea84eb09758433</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasError</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a68d704d785c8d1cc8cd0e665ef7b70b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>acc45a79db4db915b0f2488e0743f260c</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout_us</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>aff097486e5e6484f06eb0623fd03bb16</anchor>
      <arglist>(int timeout_us)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimeout</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>aef6259ce97f4e8ce15571ef0102eb0c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTimeout_us</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a0a41517813575152907e5afa3ced6a0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a58487e9d94fe422993e2a7fefcc1fab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a2ddc04e97a697c0ebb80d542f8ba9e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>ae7a35c5fd8f6865fa26b951c495857e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a43c43f955123aac577b7b44b64e25885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a3f1616ad18f7d8beaabc8c370ce5d7ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPeriodic</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a04837935398c444d97f92a256e1bce37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>abc617e8c9c1a2237b41914a0b12ec1f6</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>abf007d757fa2a48d5f8c8fbe7866f7c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a9bef459602750ab311cbc35ecd3dc086</anchor>
      <arglist>(unsigned cpu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a1abd2aac98787a084d13abdd6639e8ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>af92b1873cfbf9d1394bb28c971c42f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>ac80f95b259ca29b70e32973a519da38d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Seconds</type>
      <name>period</name>
      <anchorfile>classRTT_1_1extras_1_1FileDescriptorSimulationActivity.html</anchorfile>
      <anchor>a6397d9a3b76bb2aafd782589f444d5ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::IRQActivity</name>
    <filename>classRTT_1_1extras_1_1IRQActivity.html</filename>
    <base>RTT::Activity</base>
    <class kind="struct">RTT::extras::IRQActivity::Provider</class>
    <member kind="function">
      <type></type>
      <name>IRQActivity</name>
      <anchorfile>classRTT_1_1extras_1_1IRQActivity.html</anchorfile>
      <anchor>ae4d08de755e54d5f2d21f8adf0b305cb</anchor>
      <arglist>(int priority, base::RunnableInterface *_r=0, const std::string &amp;name=&quot;IRQActivity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IRQActivity</name>
      <anchorfile>classRTT_1_1extras_1_1IRQActivity.html</anchorfile>
      <anchor>ab6e2e6d7f39a33abe4281d0fd4534f25</anchor>
      <arglist>(int scheduler, int priority, base::RunnableInterface *_r=0, const std::string &amp;name=&quot;IRQActivity&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1IRQActivity.html</anchorfile>
      <anchor>aaea3053773a4c7b16cfb526d20ac84fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::extras::IRQActivity::Provider</name>
    <filename>structRTT_1_1extras_1_1IRQActivity_1_1Provider.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::extras::MultiVector</name>
    <filename>structRTT_1_1extras_1_1MultiVector.html</filename>
    <templarg>S</templarg>
    <templarg>T</templarg>
    <member kind="enumeration">
      <type></type>
      <name>Size</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a2f752b3217b04e8d0f1478bd2d5cd235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>aa4108f8250e29cbde608c5216384a8f2</anchor>
      <arglist>[S]</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a51c188b5cdefba8f794fee56198a5479</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a3989208b35c081c9d40405ed6da13bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVector</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>aca3aec281b2f2d3ef4d53a84c0497904</anchor>
      <arglist>(const T d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVector</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>acb0c46e12190da92a44f73c3058c8cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVector</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a46e562007087e26484a6c4b431fc9be8</anchor>
      <arglist>(const std::vector&lt; T, Alloc &gt; &amp;vect)</arglist>
    </member>
    <member kind="function">
      <type>MultiVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a0fed7be78d71f42c035559ad02ce43db</anchor>
      <arglist>(const MultiVector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>MultiVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>ae65fcc62055b15a793d7e4990d5e99c4</anchor>
      <arglist>(const MultiVector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>MultiVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>abf49e61fc8321d00f47d7738fbbd7113</anchor>
      <arglist>(const T d)</arglist>
    </member>
    <member kind="function">
      <type>MultiVector</type>
      <name>operator-</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a44e5e1abb60f41cf86e52fc0a806b0cc</anchor>
      <arglist>(const MultiVector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>MultiVector</type>
      <name>operator+</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>af737a386eea3f529c3c5342b6fe3944f</anchor>
      <arglist>(const MultiVector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>MultiVector</type>
      <name>operator*</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>ae626e2dce1f9292e81c302daf5e1c584</anchor>
      <arglist>(const MultiVector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>MultiVector</type>
      <name>operator*</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>ac7f1a01269a0f5002161649d56c9c427</anchor>
      <arglist>(const T d) const </arglist>
    </member>
    <member kind="function">
      <type>MultiVector &amp;</type>
      <name>operator=</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a1388959ca98c7185f9b32356c3a2e0e5</anchor>
      <arglist>(const MultiVector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>aac62d65833bcda4153bc01cd1926b6b7</anchor>
      <arglist>(const MultiVector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a8673055bdf31a0aabaaaeeb454310b08</anchor>
      <arglist>(const MultiVector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a7da23a1d7dcc08fce2196a28cf60a958</anchor>
      <arglist>(std::vector&lt; T, Alloc &gt; &amp;vect) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVector</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a543507ac30edb1c197696732089ddd9e</anchor>
      <arglist>(const std::vector&lt; T, Alloc &gt; &amp;vect)</arglist>
    </member>
    <member kind="function">
      <type>MultiVector &amp;</type>
      <name>operator=</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a17293a00fddc9119fc3c121e5e693ddc</anchor>
      <arglist>(const T d)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a02855f7e0f1c46be44521a880b716f4c</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>DataType</type>
      <name>data</name>
      <anchorfile>structRTT_1_1extras_1_1MultiVector.html</anchorfile>
      <anchor>a1dfa7e35cd01dcd81e042cb30caa2790</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::PeriodicActivity</name>
    <filename>classRTT_1_1extras_1_1PeriodicActivity.html</filename>
    <base>RTT::base::ActivityInterface</base>
    <member kind="function">
      <type></type>
      <name>PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a8b25dae3569b8b84d8a686bde5a09ec7</anchor>
      <arglist>(int priority, Seconds period, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a6c96b9cf44105f199fe43b6c0f8d8053</anchor>
      <arglist>(int scheduler, int priority, Seconds period, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>af4e58d3df63ddd19a6df67623a103873</anchor>
      <arglist>(int scheduler, int priority, Seconds period, unsigned cpu_affinity, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a8e24f0033159e714138183067fd8344e</anchor>
      <arglist>(TimerThreadPtr thread, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>ac438607370a3f1c33853d83d66ced7a8</anchor>
      <arglist>(Seconds period, TimerThreadPtr thread, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a65eda76d8a41824b8ea55dce50dac932</anchor>
      <arglist>(secs sec, nsecs nsec, TimerThreadPtr thread, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PeriodicActivity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>ae2cf66aa7fd23c3825d1cd77536b7fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a0bcdfe88feb65d01144de3f57acc9c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a1a3b79de1247cb69feaf2d8dd0e37730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a4e8b44c70a81df7f52c38db43c11d1e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a08eea5381e3ec00421ab8a756a3f9c80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a993714c1198e8988d22bdc1cb1c8eaec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>aba07b50ee59196fd4455d4eb553d1e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPeriodic</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>aa821c03fff2c535fd536e8bbde59e2ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a38ab56832d19d42efe1ab6c6c19891a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>aa810781f35438ca494b360e3e626eb19</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>ab61bbf008747b9d5820382428c057c0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a779adbf6f2de144a3caa28e2f52abdce</anchor>
      <arglist>(unsigned cpu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a316c7a53e867709cf889e3a6b9f9677a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a16aaa9cecd0edbfcd996880e94ab7f91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>aa163bd2ab91c1dca1f63c36f9007ac29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>adeb85e6ceedbd7fe705cb8683547873e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>ab114e77dde9b078ad9a84f9f19e9f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>aee89c4e6ae7f8aaeaba90698a7affc03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimerThreadPtr</type>
      <name>thread_</name>
      <anchorfile>classRTT_1_1extras_1_1PeriodicActivity.html</anchorfile>
      <anchor>a181972b798505c48ae3824415cfe4f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::ReadOnlyPointer</name>
    <filename>classRTT_1_1extras_1_1ReadOnlyPointer.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classRTT_1_1extras_1_1ReadOnlyPointer.html</anchorfile>
      <anchor>ab93081029bbcb41a6841ddfd3d20501e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1extras_1_1ReadOnlyPointer.html</anchorfile>
      <anchor>a9070bb7b6ca4954bc9ef397a660c04f5</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>try_write_access</name>
      <anchorfile>classRTT_1_1extras_1_1ReadOnlyPointer.html</anchorfile>
      <anchor>ae9d1861cf34598aaeaa87176545b74b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>write_access</name>
      <anchorfile>classRTT_1_1extras_1_1ReadOnlyPointer.html</anchorfile>
      <anchor>a08c6e4cb998d4b11ff866e9c75d3846d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::SequentialActivity</name>
    <filename>classRTT_1_1extras_1_1SequentialActivity.html</filename>
    <base>RTT::base::ActivityInterface</base>
    <member kind="function">
      <type></type>
      <name>SequentialActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>ab157bc0fb534d8f8958e6855f3392bb5</anchor>
      <arglist>(base::RunnableInterface *run=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequentialActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a7d19c22378134e8b08cb05b335c66253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>ad6c7a6cb43e451e690b07397d6a9fbb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>ae97aee9bdea186347ec53d46fd4f0125</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a8d3f5071b6e13d34b01e215148febd43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a2fc61a944fd22a2349d66018e3c36a69</anchor>
      <arglist>(unsigned cpu)</arglist>
    </member>
    <member kind="function">
      <type>os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a85f538397597ba967b6bd8b5a0a6917e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a66cb3ea82084c7b2fa0092935f34984d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a198d86398fc2a9bc5dd6769ea72fea29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a3f32a5a080af421974152b7126d8ae19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPeriodic</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a0d4db5442d7d2dc10bf1dd1743655a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a819a65c63a987b6a5a747551534b54a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>ab4eff1cc78f9fe45f2ec5a25491aecfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1extras_1_1SequentialActivity.html</anchorfile>
      <anchor>a30d9844ad4e61e7460dfec2b863d7515</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classRTT_1_1extras_1_1SlaveActivity" title="Reactions to execute():">ExecReact</docanchor>
    <docanchor file="classRTT_1_1extras_1_1SlaveActivity" title="Reactions to trigger():">TrigReact</docanchor>
  </compound>
  <compound kind="class">
    <name>RTT::extras::SimulationActivity</name>
    <filename>classRTT_1_1extras_1_1SimulationActivity.html</filename>
    <base>RTT::extras::PeriodicActivity</base>
    <member kind="function">
      <type></type>
      <name>SimulationActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationActivity.html</anchorfile>
      <anchor>ab84bf539cba5bacc4c5e5c2863164a5f</anchor>
      <arglist>(Seconds period, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulationActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationActivity.html</anchorfile>
      <anchor>a92faa25a9eff0b7162f941e65848e013</anchor>
      <arglist>(secs s, nsecs ns, base::RunnableInterface *r=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationActivity.html</anchorfile>
      <anchor>a6384c0421d5286b72a003b0dd169436e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationActivity.html</anchorfile>
      <anchor>ab39da36d6ce85405bdb702eb669dd6db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimulationActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationActivity.html</anchorfile>
      <anchor>ac4f1354c9262438005236e0a19d58bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationActivity.html</anchorfile>
      <anchor>a8a2d0471c2bfe168e2dbe1bbedcc86b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::SimulationThread</name>
    <filename>classRTT_1_1extras_1_1SimulationThread.html</filename>
    <base>RTT::extras::TimerThread</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimulationThread</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>a001334c2353e5fc182f635790c667cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>aca6d0e024296a23f8d918686b0adc950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>aa96baa0c54a62c1e4420c3082a04b934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>a0e9bcb38c566f597911b1f5df13a2b43</anchor>
      <arglist>(unsigned int maxsteps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>ada7423aee20d37a94313027c36c0bb0e</anchor>
      <arglist>(unsigned int maxsteps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual os::ThreadInterface *</type>
      <name>simthread</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>aae4f69c8d12bed5cef79cabdddcbcd1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addActivity</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>a21fe73b36befa9c4a669ef82951c06e3</anchor>
      <arglist>(PeriodicActivity *t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a49ccf6e01b1cbde69452d4449de4f237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a573be4cc4b23aaf18fde7b546579b171</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a7893507a27011a1e5b0a18ca09082457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a0e351c9ab63970389eee3f2e9b602adb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a7a7dd3aa0458d90340118953fee67532</anchor>
      <arglist>(unsigned cpu_affinity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>af25c7c7fa2f741e8f7caaf4180efdcf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimulationThreadPtr</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>a44a6658d0d9786ca5e22fbc67ecfe276</anchor>
      <arglist>(double period=0.001)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>a7fe1de66914af73ef45f3c83a328c1f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerThreadPtr</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>ad46631862a6726bc5eb5e64f64c156ea</anchor>
      <arglist>(int priority, double periodicity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerThreadPtr</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>a0c7e7c1f4676b2c9cd52690e7a994213</anchor>
      <arglist>(int scheduler, int priority, double periodicity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerThreadPtr</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>ad8fb1570e45b2dc4b3788d38d2949e4b</anchor>
      <arglist>(int scheduler, int priority, double periodicity, unsigned cpu_affinity)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; boost::weak_ptr&lt; TimerThread &gt; &gt;</type>
      <name>TimerThreadList</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>a43dfe36fb57dac4c859ab6e6c5f0784c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>a680b1263df07e46148faaef8a5d48ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>afd9b0ea50a09b728300087e1b28df332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>a2eec7f681c967c5d31f2cf1323cd3484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimulationThread</name>
      <anchorfile>classRTT_1_1extras_1_1SimulationThread.html</anchorfile>
      <anchor>ada2aa76bd5b1a1027ad1f9d5d0eece90</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ae1d49c238372d1336e21ec9b3adc6349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a138e3536f1de8b4361f0db9ad9dfd07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>os::MutexRecursive</type>
      <name>mutex</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>a2e6fae0334021037022baf1d0b514d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static TimerThreadList</type>
      <name>TimerThreads</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>af8b881351111e43d0a6be13c4b6c7f67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::extras::SlaveActivity</name>
    <filename>classRTT_1_1extras_1_1SlaveActivity.html</filename>
    <base>RTT::base::ActivityInterface</base>
    <member kind="function">
      <type></type>
      <name>SlaveActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ab27f702bd943b036030ffc40b15001be</anchor>
      <arglist>(base::ActivityInterface *master, base::RunnableInterface *run=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaveActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ab0a3fd77dffefa5ddecd242c8f7cc337</anchor>
      <arglist>(double period, base::RunnableInterface *run=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaveActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>aa3dec94c3d8d20b10d229eaad18ba014</anchor>
      <arglist>(base::RunnableInterface *run=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaveActivity</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>a7154a1421f3f06add5c95966c1d7cfde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ad496a440891a9d5978223bee6ac104cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ae60c05f76fc052b27cc7f6838034bc0c</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>a506cb64e55e141c21aea10b5b0561969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCpuAffinity</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>a5313bb427dc1d8fe4d9c817704f332de</anchor>
      <arglist>(unsigned cpu)</arglist>
    </member>
    <member kind="function">
      <type>os::ThreadInterface *</type>
      <name>thread</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ab44f990a889895adbcb475e2fb235796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ab883c67a72e9b487a4f5e73d7a8cc4a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>a10a2b74ac9491d431cb4646e4a92abf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>afbd99244fcb03b565583d0b6a7e4ba71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPeriodic</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>aeba655229e066f09e2dd9bb32652ebc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>a7b2a4d011bc38ad3043c9146a2a53a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>ac2d6c1c9a666582c206eea80811881fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trigger</name>
      <anchorfile>classRTT_1_1extras_1_1SlaveActivity.html</anchorfile>
      <anchor>a2576f14538c68a2db82f97be75fe5c32</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classRTT_1_1extras_1_1SlaveActivity" title="Reactions to execute():">ExecReact</docanchor>
    <docanchor file="classRTT_1_1extras_1_1SlaveActivity" title="Reactions to trigger():">TrigReact</docanchor>
  </compound>
  <compound kind="class">
    <name>RTT::extras::TimerThread</name>
    <filename>classRTT_1_1extras_1_1TimerThread.html</filename>
    <base>RTT::os::Thread</base>
    <member kind="function">
      <type></type>
      <name>TimerThread</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>a31f5fce2c973dc4a341fdd3be288502a</anchor>
      <arglist>(int priority, const std::string &amp;name, double periodicity, unsigned cpu_affinity=~0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimerThread</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>ac27356a206697eaa75d0cd7f0a1e3c20</anchor>
      <arglist>(int scheduler, int priority, const std::string &amp;name, double periodicity, unsigned cpu_affinity=~0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimerThread</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>a9b05364397e76975633fe603e5f991d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ad3c97f7252b4ba41e06edf63cf7412de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a49de57cf538992cb54fdc20658094aab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>add09f3f866c491ef64eef4e964cc2258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>ae15e9e4ec6850b57502a6e36072bb5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1extras_1_1TimerThread.html</anchorfile>
      <anchor>acc080310d1681fc01c4e6e1e02b5e260</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::internal</name>
    <filename>namespaceRTT_1_1internal.html</filename>
    <class kind="class">RTT::internal::ArrayPartDataSource</class>
    <class kind="class">RTT::internal::AssignCommand</class>
    <class kind="class">RTT::internal::AtomicMWSRQueue</class>
    <class kind="class">RTT::internal::AtomicQueue</class>
    <class kind="struct">RTT::internal::AStore</class>
    <class kind="struct">RTT::internal::RStore</class>
    <class kind="struct">RTT::internal::is_arg_return</class>
    <class kind="struct">RTT::internal::is_out_arg</class>
    <class kind="struct">RTT::internal::BindStorageImpl&lt; 0, ToBind &gt;</class>
    <class kind="struct">RTT::internal::BindStorageImpl&lt; 1, ToBind &gt;</class>
    <class kind="struct">RTT::internal::BindStorage</class>
    <class kind="class">RTT::internal::ChannelBufferElement</class>
    <class kind="class">RTT::internal::ChannelDataElement</class>
    <class kind="struct">RTT::internal::Collect</class>
    <class kind="struct">RTT::internal::CollectBaseImpl</class>
    <class kind="struct">RTT::internal::CollectBase</class>
    <class kind="struct">RTT::internal::CollectType</class>
    <class kind="struct">RTT::internal::CollectSignature</class>
    <class kind="class">RTT::internal::ConnectionManager</class>
    <class kind="struct">RTT::internal::LocalConnID</class>
    <class kind="struct">RTT::internal::StreamConnID</class>
    <class kind="class">RTT::internal::ConnFactory</class>
    <class kind="class">RTT::internal::ConnID</class>
    <class kind="class">RTT::internal::SimpleConnID</class>
    <class kind="class">RTT::internal::ConnInputEndpoint</class>
    <class kind="class">RTT::internal::ConnOutputEndpoint</class>
    <class kind="struct">RTT::internal::GetArgument</class>
    <class kind="struct">RTT::internal::GetArgument&lt; Seq, Data, typename boost::enable_if&lt; is_pure_reference&lt; Data &gt; &gt;::type &gt;</class>
    <class kind="struct">RTT::internal::AssignHelper</class>
    <class kind="struct">RTT::internal::UpdateHelper</class>
    <class kind="struct">RTT::internal::create_sequence_helper</class>
    <class kind="struct">RTT::internal::create_sequence</class>
    <class kind="class">RTT::internal::DataObjectDataSource</class>
    <class kind="struct">RTT::internal::bad_assignment</class>
    <class kind="class">RTT::internal::DataSource</class>
    <class kind="class">RTT::internal::AssignableDataSource</class>
    <class kind="class">RTT::internal::DataSourceCommand</class>
    <class kind="struct">RTT::internal::GenerateDataSource</class>
    <class kind="class">RTT::internal::ValueDataSource</class>
    <class kind="class">RTT::internal::ConstantDataSource</class>
    <class kind="class">RTT::internal::ConstReferenceDataSource</class>
    <class kind="class">RTT::internal::ReferenceDataSource</class>
    <class kind="class">RTT::internal::AliasDataSource</class>
    <class kind="class">RTT::internal::ArrayDataSource</class>
    <class kind="class">RTT::internal::LateReferenceDataSource</class>
    <class kind="class">RTT::internal::LateConstReferenceDataSource</class>
    <class kind="class">RTT::internal::ActionAliasDataSource</class>
    <class kind="class">RTT::internal::ActionAliasAssignableDataSource</class>
    <class kind="class">RTT::internal::UnboundDataSource</class>
    <class kind="class">RTT::internal::BinaryDataSource</class>
    <class kind="class">RTT::internal::UnaryDataSource</class>
    <class kind="class">RTT::internal::NArityDataSource</class>
    <class kind="struct">RTT::internal::DSRStore</class>
    <class kind="struct">RTT::internal::DataSourceResultStorage</class>
    <class kind="struct">RTT::internal::DataSourceResultStorage&lt; R const &amp; &gt;</class>
    <class kind="struct">RTT::internal::DataSourceArgStorage</class>
    <class kind="struct">RTT::internal::DataSourceArgStorage&lt; A &amp; &gt;</class>
    <class kind="struct">RTT::internal::DataSourceArgStorage&lt; A const &amp; &gt;</class>
    <class kind="struct">RTT::internal::DataSourceStorageImpl&lt; 0, DataType &gt;</class>
    <class kind="struct">RTT::internal::DataSourceStorageImpl&lt; 1, DataType &gt;</class>
    <class kind="struct">RTT::internal::DataSourceStorage</class>
    <class kind="struct">RTT::internal::DataSourceTypeInfo</class>
    <class kind="struct">RTT::internal::DataSourceTypeInfo&lt; UnknownType &gt;</class>
    <class kind="struct">RTT::internal::DataSourceTypeInfo&lt; const T &amp; &gt;</class>
    <class kind="struct">RTT::internal::DataSourceTypeInfo&lt; types::carray&lt; T &gt; &gt;</class>
    <class kind="struct">RTT::internal::DataSourceTypeInfo&lt; void &gt;</class>
    <class kind="struct">RTT::internal::FusedFunctorDataSource</class>
    <class kind="struct">RTT::internal::FusedMCallDataSource</class>
    <class kind="struct">RTT::internal::FusedMSendDataSource</class>
    <class kind="struct">RTT::internal::FusedMCollectDataSource</class>
    <class kind="struct">RTT::internal::FusedMSignal</class>
    <class kind="struct">RTT::internal::GetSignature</class>
    <class kind="struct">RTT::internal::GetSignatureDS</class>
    <class kind="class">RTT::internal::GlobalEngine</class>
    <class kind="class">RTT::internal::GlobalService</class>
    <class kind="class">RTT::internal::InputPortSource</class>
    <class kind="struct">RTT::internal::Invoker</class>
    <class kind="struct">RTT::internal::InvokerBaseImpl</class>
    <class kind="struct">RTT::internal::InvokerBase</class>
    <class kind="struct">RTT::internal::InvokerSignature</class>
    <class kind="class">RTT::internal::List</class>
    <class kind="class">RTT::internal::ListLocked</class>
    <class kind="class">RTT::internal::ListLockFree</class>
    <class kind="class">RTT::internal::LocalOperationCallerImpl</class>
    <class kind="struct">RTT::internal::LocalOperationCaller</class>
    <class kind="class">RTT::internal::LockedQueue</class>
    <class kind="class">RTT::internal::MWSRQueue</class>
    <class kind="struct">RTT::internal::NA</class>
    <class kind="struct">RTT::internal::NA&lt; void &gt;</class>
    <class kind="struct">RTT::internal::OperationCallerBinder</class>
    <class kind="class">RTT::internal::OperationCallerC</class>
    <class kind="class">RTT::internal::OperationInterfacePartFused</class>
    <class kind="class">RTT::internal::SynchronousOperationInterfacePartFused</class>
    <class kind="class">RTT::internal::OperationInterfacePartFusedDS</class>
    <class kind="class">RTT::internal::PartDataSource</class>
    <class kind="class">RTT::internal::PartDataSource&lt; types::carray&lt; T &gt; &gt;</class>
    <class kind="class">RTT::internal::Queue</class>
    <class kind="class">RTT::internal::Reference</class>
    <class kind="class">RTT::internal::RemoteOperationCallerImpl</class>
    <class kind="class">RTT::internal::RemoteOperationCaller</class>
    <class kind="struct">RTT::internal::ReturnImpl</class>
    <class kind="struct">RTT::internal::ReturnBaseImpl</class>
    <class kind="struct">RTT::internal::ReturnBase</class>
    <class kind="struct">RTT::internal::ReturnSignature</class>
    <class kind="class">RTT::internal::Signal</class>
    <class kind="class">RTT::internal::AddMember</class>
    <class kind="class">RTT::internal::ArgMember</class>
    <class kind="class">RTT::internal::UnMember</class>
    <class kind="class">RTT::internal::UnPointer</class>
    <class kind="class">RTT::internal::TsPool</class>
    <class kind="class">RTT::internal::SendHandleC</class>
    <class kind="class">RTT::internal::ConnectionBase</class>
    <class kind="class">RTT::internal::SignalBase</class>
    <member kind="function">
      <type>void</type>
      <name>clearChannel</name>
      <anchorfile>namespaceRTT_1_1internal.html</anchorfile>
      <anchor>aa11ee548bc4cd0406a3286bd97e8cebc</anchor>
      <arglist>(ConnectionManager::ChannelDescriptor &amp;descriptor)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase *</type>
      <name>newFunctorDataSource</name>
      <anchorfile>namespaceRTT_1_1internal.html</anchorfile>
      <anchor>a34a9e49d4f3c57bdd09353cc6d7bd076</anchor>
      <arglist>(Function f, const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ArrayPartDataSource</name>
    <filename>classRTT_1_1internal_1_1ArrayPartDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type></type>
      <name>ArrayPartDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>a05a54bb7aecb008a80db4c4bf70f9f2f</anchor>
      <arglist>(typename AssignableDataSource&lt; T &gt;::reference_t ref, DataSource&lt; unsigned int &gt;::shared_ptr index, base::DataSourceBase::shared_ptr parent, unsigned int max)</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>af09e66d892369e0b3f70f3bee5421a3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>ad2df4fd6d7f1c80ff815d58332a5a703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>af3e4ecf3fb1ced324bdb8775726ac9d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>a0a6ff3bfb0cddb773f0f27a82ecbab71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updated</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>af009cd0b35a6262017ffb078e089914e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArrayPartDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>aec9a065e61f5be6109cd83db9d3b8904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArrayPartDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayPartDataSource.html</anchorfile>
      <anchor>a2c798bf9a43516168ca95def3500b1ad</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replace) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::AssignCommand</name>
    <filename>classRTT_1_1internal_1_1AssignCommand.html</filename>
    <templarg>T</templarg>
    <templarg>S</templarg>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type></type>
      <name>AssignCommand</name>
      <anchorfile>classRTT_1_1internal_1_1AssignCommand.html</anchorfile>
      <anchor>a4848785d656a3302442d1ee21e8ba3c3</anchor>
      <arglist>(LHSSource l, RHSSource r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1internal_1_1AssignCommand.html</anchorfile>
      <anchor>a908fd5cd76974818ff38cbd668fccbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1internal_1_1AssignCommand.html</anchorfile>
      <anchor>a5f3f82a731c4fb4c43ab4d758f24d178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1AssignCommand.html</anchorfile>
      <anchor>a627d3fc3cf5b7c0491e8d502b04e13ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1AssignCommand.html</anchorfile>
      <anchor>a16b5af42d8571b62c0d2f96765c05e7e</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::AtomicMWSRQueue</name>
    <filename>classRTT_1_1internal_1_1AtomicMWSRQueue.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>AtomicMWSRQueue</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a96866c4e69e3185e72721f213f16ecbe</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a8b23d4d0a8a912ea7c8a064d267a70f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a0a9cb01e242d90ee380f7493088bf37f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a8513d7cafb97f3c5b588fb55231e499b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>aadcea64d28866c0aa04f9b536d972ab2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enqueue</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a013b887da567a4ad6c7dc568eee4bcb2</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dequeue</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a7c8b4ae9f3f81b36327a6127014eae84</anchor>
      <arglist>(T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>front</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>a1c23e2cf5409e26069ea272775de3bd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicMWSRQueue.html</anchorfile>
      <anchor>afececfb43fba186eac09ffc6a65e81fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::AtomicQueue</name>
    <filename>classRTT_1_1internal_1_1AtomicQueue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AtomicQueue</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>aa79cbdb6ab966df9915af172890e6a78</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>a9bdf3c197df813915af1588ff3fac338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>a6955f2bcbdd68cac4d345631423be92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>a6674055d217658c9cdee73c71b465966</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>af831bff5e1e5fa474b083fd300255b1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enqueue</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>a533041d5973a04f26720f19deaa68cb2</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dequeue</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>ac85fbd261cd8fdea2e18d0261681282d</anchor>
      <arglist>(T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>front</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>afbb53332fa5358b87b03829fc5756e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1AtomicQueue.html</anchorfile>
      <anchor>aa3530a18a46b50daf82d795b53791215</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::AStore</name>
    <filename>structRTT_1_1internal_1_1AStore.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::RStore</name>
    <filename>structRTT_1_1internal_1_1RStore.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>exec</name>
      <anchorfile>structRTT_1_1internal_1_1RStore.html</anchorfile>
      <anchor>a541e769356d312dd0edb6320a643f716</anchor>
      <arglist>(F f)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::is_arg_return</name>
    <filename>structRTT_1_1internal_1_1is__arg__return.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::is_out_arg</name>
    <filename>structRTT_1_1internal_1_1is__out__arg.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::BindStorageImpl&lt; 0, ToBind &gt;</name>
    <filename>structRTT_1_1internal_1_1BindStorageImpl_3_010_00_01ToBind_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::BindStorageImpl&lt; 1, ToBind &gt;</name>
    <filename>structRTT_1_1internal_1_1BindStorageImpl_3_011_00_01ToBind_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::BindStorage</name>
    <filename>structRTT_1_1internal_1_1BindStorage.html</filename>
    <templarg>ToBind</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ChannelBufferElement</name>
    <filename>classRTT_1_1internal_1_1ChannelBufferElement.html</filename>
    <templarg></templarg>
    <base>RTT::base::ChannelElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelBufferElement.html</anchorfile>
      <anchor>a9c2816ce88ea0ab86668f87915ff791b</anchor>
      <arglist>(param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelBufferElement.html</anchorfile>
      <anchor>a25ab43756bedb550a5084804bae936e2</anchor>
      <arglist>(reference_t sample, bool copy_old_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelBufferElement.html</anchorfile>
      <anchor>a766e9a0251cc25682d14e84c54fb7545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelBufferElement.html</anchorfile>
      <anchor>a23852c04325f2dd577debe9f3241536b</anchor>
      <arglist>(param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelBufferElement.html</anchorfile>
      <anchor>aea9ca772ae81980b716639999b258ce1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ChannelDataElement</name>
    <filename>classRTT_1_1internal_1_1ChannelDataElement.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::ChannelElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelDataElement.html</anchorfile>
      <anchor>ab5a0b53d13bdc4f86fbfb358403c8b50</anchor>
      <arglist>(param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelDataElement.html</anchorfile>
      <anchor>aafb8b2b04e13eff6b11ed23388b6a2d9</anchor>
      <arglist>(reference_t sample, bool copy_old_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelDataElement.html</anchorfile>
      <anchor>ab9014c1217fce59552a19c929881a856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelDataElement.html</anchorfile>
      <anchor>a040ccad120939a8731161be85ad1e9d6</anchor>
      <arglist>(param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1internal_1_1ChannelDataElement.html</anchorfile>
      <anchor>ac73ce4889bf3ff1c3137a1a2bda5b67d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::Collect</name>
    <filename>structRTT_1_1internal_1_1Collect.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::CollectBaseImpl</name>
    <filename>structRTT_1_1internal_1_1CollectBaseImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::CollectBase</name>
    <filename>structRTT_1_1internal_1_1CollectBase.html</filename>
    <templarg>F</templarg>
    <base>CollectBaseImpl&lt; boost::function_traits&lt; CollectType&lt; F &gt;::Ft &gt;::arity, CollectType&lt; F &gt;::Ft &gt;</base>
    <base>ReturnBaseImpl&lt; boost::function_traits&lt; F &gt;::arity, F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::CollectType</name>
    <filename>structRTT_1_1internal_1_1CollectType.html</filename>
    <templarg>F</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::CollectSignature</name>
    <filename>structRTT_1_1internal_1_1CollectSignature.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConnectionManager</name>
    <filename>classRTT_1_1internal_1_1ConnectionManager.html</filename>
    <member kind="typedef">
      <type>boost::tuple&lt; boost::shared_ptr&lt; ConnID &gt;, base::ChannelElementBase::shared_ptr, ConnPolicy &gt;</type>
      <name>ChannelDescriptor</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a2b38bb2997ad504a705a6ab969334848</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionManager</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>ada2cb7d0a6ec4271d2bdf2a80f17d6a6</anchor>
      <arglist>(base::PortInterface *port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConnection</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a6378c49ba349a067d4af3d75687f8f05</anchor>
      <arglist>(ConnID *port_id, base::ChannelElementBase::shared_ptr channel_input, ConnPolicy policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a1070d33dd99d0fe1030c8b6aae3096ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>af26261c2f336fa248c386d390774e409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>abd1045b3445ff91659ef5b855fb608bc</anchor>
      <arglist>(base::PortInterface *port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select_reader_channel</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a47f758de5ca1be7c70a878a27b122dbf</anchor>
      <arglist>(Pred pred, bool copy_old_data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleConnection</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a2ebdd0bb795856f2f1b4e38d782d9dae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ChannelElementBase *</type>
      <name>getCurrentChannel</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a64ce9a7a72c1f8c386fd6724fdeef607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ChannelDescriptor &gt;</type>
      <name>getChannels</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a15aad87be4be1c50beee607e9d9e6cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a9c6df47283369b04b9bb850e9132aa47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>aba75892d4a0f46c3618463025f7ffd15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a263b371598bc5777f737df7a6c091e1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findMatchingPort</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>aed038ef943ce7c71c0ac5fbc955d216c</anchor>
      <arglist>(ConnID const *conn_id, ChannelDescriptor const &amp;descriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>eraseConnection</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>aadb5ee99baecb825c35db6a591e95fe2</anchor>
      <arglist>(ChannelDescriptor &amp;descriptor)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>os::Mutex</type>
      <name>connection_resize_mtx</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>affd6f4c38c9522ceb9e2d4412084b53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PortInterface *</type>
      <name>mport</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a2f8030b0a2960f5d6363873fc8d07659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ChannelDescriptor &gt;</type>
      <name>connections</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>ac7d52fa61c6d3322112a82de4c0ea43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelDescriptor</type>
      <name>cur_channel</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>af02d8df235cf10e00288c9cec0ed3dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RTT::os::Mutex</type>
      <name>connection_lock</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionManager.html</anchorfile>
      <anchor>a3a53fb15978f15ade46946a9cf653f88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::LocalConnID</name>
    <filename>structRTT_1_1internal_1_1LocalConnID.html</filename>
    <base>RTT::internal::ConnID</base>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::StreamConnID</name>
    <filename>structRTT_1_1internal_1_1StreamConnID.html</filename>
    <base>RTT::internal::ConnID</base>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConnFactory</name>
    <filename>classRTT_1_1internal_1_1ConnFactory.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual base::InputPortInterface *</type>
      <name>inputPort</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a8e6084977534b007af7b60293459ca85</anchor>
      <arglist>(std::string const &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::OutputPortInterface *</type>
      <name>outputPort</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a06866691dabe4e94a84074f6dd67d78e</anchor>
      <arglist>(std::string const &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>buildDataStorage</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a80b6b7d809a508f51cf7dd0af2259748</anchor>
      <arglist>(ConnPolicy const &amp;policy) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>buildChannelOutput</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a85fbc7cae2ff5a1af6509ea6a509a160</anchor>
      <arglist>(base::InputPortInterface &amp;port) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>buildChannelInput</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a22f7d3de12b4c052a0863f189e979c76</anchor>
      <arglist>(base::OutputPortInterface &amp;port) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::ChannelElementBase *</type>
      <name>buildDataStorage</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>ab417d0a01d2a3529598fb262eb0d0402</anchor>
      <arglist>(ConnPolicy const &amp;policy, const T &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::ChannelElementBase::shared_ptr</type>
      <name>buildChannelInput</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>ab4e0a33445d44b66dbffa4174623487e</anchor>
      <arglist>(OutputPort&lt; T &gt; &amp;port, ConnID *conn_id, base::ChannelElementBase::shared_ptr output_channel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::ChannelElementBase::shared_ptr</type>
      <name>buildBufferedChannelInput</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a0c5832ea6524873c5b9afb3842dba3a8</anchor>
      <arglist>(OutputPort&lt; T &gt; &amp;port, ConnID *conn_id, ConnPolicy const &amp;policy, base::ChannelElementBase::shared_ptr output_channel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::ChannelElementBase::shared_ptr</type>
      <name>buildChannelOutput</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>affae1fa3714352fc525fbd4544abfd3d</anchor>
      <arglist>(InputPort&lt; T &gt; &amp;port, ConnID *conn_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::ChannelElementBase::shared_ptr</type>
      <name>buildBufferedChannelOutput</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>ac5cfeb384be23a1219d750fe88ce0e41</anchor>
      <arglist>(InputPort&lt; T &gt; &amp;port, ConnID *conn_id, ConnPolicy const &amp;policy, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createConnection</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>aacb257ca47cb10ab7db3425589b47c16</anchor>
      <arglist>(OutputPort&lt; T &gt; &amp;output_port, base::InputPortInterface &amp;input_port, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a3442dff9c8e0cab5858a32ec0cc4f7e6</anchor>
      <arglist>(OutputPort&lt; T &gt; &amp;output_port, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createAndCheckStream</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a72b88dd72ba2690b969f2a509ec5ceef</anchor>
      <arglist>(base::OutputPortInterface &amp;output_port, ConnPolicy const &amp;policy, base::ChannelElementBase::shared_ptr chan, StreamConnID *conn_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>aa21f07d3aea4446b0c602d7f20858e46</anchor>
      <arglist>(InputPort&lt; T &gt; &amp;input_port, ConnPolicy const &amp;policy)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static base::ChannelElementBase::shared_ptr</type>
      <name>createOutOfBandConnection</name>
      <anchorfile>classRTT_1_1internal_1_1ConnFactory.html</anchorfile>
      <anchor>a7c99ef10c0314ef1638dc662b050e99d</anchor>
      <arglist>(OutputPort&lt; T &gt; &amp;output_port, InputPort&lt; T &gt; &amp;input_port, ConnPolicy const &amp;policy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConnID</name>
    <filename>classRTT_1_1internal_1_1ConnID.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::internal::SimpleConnID</name>
    <filename>classRTT_1_1internal_1_1SimpleConnID.html</filename>
    <base>RTT::internal::ConnID</base>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConnInputEndpoint</name>
    <filename>classRTT_1_1internal_1_1ConnInputEndpoint.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::ChannelElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1internal_1_1ConnInputEndpoint.html</anchorfile>
      <anchor>aa86f2fdac7df3fd4724e971fb5f31185</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::reference_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inputReady</name>
      <anchorfile>classRTT_1_1internal_1_1ConnInputEndpoint.html</anchorfile>
      <anchor>a608f3db8f81b53ccb1870c66e633b017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1internal_1_1ConnInputEndpoint.html</anchorfile>
      <anchor>a61192cf73cf5adcf59cad96cba2e1493</anchor>
      <arglist>(bool forward)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PortInterface *</type>
      <name>getPort</name>
      <anchorfile>classRTT_1_1internal_1_1ConnInputEndpoint.html</anchorfile>
      <anchor>ab67f67007cdb4c655aa195ed69a9da12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnID *</type>
      <name>getConnID</name>
      <anchorfile>classRTT_1_1internal_1_1ConnInputEndpoint.html</anchorfile>
      <anchor>aaf91c67a9b34563fd8ce7199bc651a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1internal_1_1ConnInputEndpoint.html</anchorfile>
      <anchor>adc8b82059a9ed58c1c76982cd22e2ccc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConnOutputEndpoint</name>
    <filename>classRTT_1_1internal_1_1ConnOutputEndpoint.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::ChannelElement</base>
    <member kind="function">
      <type></type>
      <name>ConnOutputEndpoint</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>a39b6e1c88fa17cd792fa8e00ff87e631</anchor>
      <arglist>(InputPort&lt; T &gt; *port, ConnID *output_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inputReady</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>a00280e7765cf99c11e19344dc8c8c498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>ae8f96606f55efbe704896cefab73920f</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>a85f205b17ab2a603b834585ce32a1c6b</anchor>
      <arglist>(bool forward)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>signal</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>a50c1b0f70fd902dbd239f4ae84ade643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PortInterface *</type>
      <name>getPort</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>a4184200033a0953f57ac8e1d8cfc5dbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnID *</type>
      <name>getConnID</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>ad5ff532488d78a5e3f2a4aa13328cc3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1internal_1_1ConnOutputEndpoint.html</anchorfile>
      <anchor>a6d96d73ffae8886ab693a6574a3eeb80</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::GetArgument</name>
    <filename>structRTT_1_1internal_1_1GetArgument.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::GetArgument&lt; Seq, Data, typename boost::enable_if&lt; is_pure_reference&lt; Data &gt; &gt;::type &gt;</name>
    <filename>structRTT_1_1internal_1_1GetArgument_3_01Seq_00_01Data_00_01typename_01boost_1_1enable__if_3_01i22dd4b1e6d13d9a6954ee3e459085881.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::AssignHelper</name>
    <filename>structRTT_1_1internal_1_1AssignHelper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::UpdateHelper</name>
    <filename>structRTT_1_1internal_1_1UpdateHelper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::create_sequence_helper</name>
    <filename>structRTT_1_1internal_1_1create__sequence__helper.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::create_sequence</name>
    <filename>structRTT_1_1internal_1_1create__sequence.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::DataObjectDataSource</name>
    <filename>classRTT_1_1internal_1_1DataObjectDataSource.html</filename>
    <templarg></templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>acc13bc835654f1d3ef0427da010f6fb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>a7e676ad8036bd4fb0536f9731fff9721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>a1ed16673c3cfea0bd9e969fc0a5923f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>aa1ccc628f60d465f57b77f772dee7c30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>aa5401b01df9c858d95f610e36b31e256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataObjectDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>ad8333443851047001912227b1f49965e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataObjectDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1DataObjectDataSource.html</anchorfile>
      <anchor>a9493218c7383ef4761f0814e0163452f</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::bad_assignment</name>
    <filename>structRTT_1_1internal_1_1bad__assignment.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::internal::DataSource</name>
    <filename>classRTT_1_1internal_1_1DataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::DataSourceBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a667b4de57e8f127baa5c12925e1e24bf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a04b9910d4e1813478a32fec421870beb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a7c10d4f18a3e7de9bbd534eb232d850e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8bd1aaa1016ba9103ac01e5ed8e4a2f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ae260418b87ff337f1acfa8204fe86ade</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::AssignableDataSource</name>
    <filename>classRTT_1_1internal_1_1AssignableDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function" virtualness="pure">
      <type>virtual reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a3fbb0b9564941923b5776b413bf75813</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AssignableDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a7c67083a42f8d2bf93cf29221872646e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AssignableDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a740d9322d6bb73965e2bb6d5103771bf</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::DataSourceCommand</name>
    <filename>classRTT_1_1internal_1_1DataSourceCommand.html</filename>
    <base>DataSource&lt; bool &gt;</base>
    <member kind="typedef">
      <type>bool</type>
      <name>value_t</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab7d4ab0d9eef6da77f667e26a14a5c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataSourceCommand</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>a7aececd4904bcea3485dfb05833121d4</anchor>
      <arglist>(base::ActionInterface *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>aece31e0596ad6999c45500cff7af7842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>aa6ab0aa18a08881b029bc6cf9cc53d35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool const &amp;</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>a1573b81a9943e65659c5de90c949284c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>a262d7ff8fc72a5d32b85debdd9b07113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataSourceCommand *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>a48ca899b94db858ec6df6b576139d872</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataSourceCommand *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1DataSourceCommand.html</anchorfile>
      <anchor>a1aecafb10863c4b5c68956ed18342f38</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; bool &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; bool &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::GenerateDataSource</name>
    <filename>structRTT_1_1internal_1_1GenerateDataSource.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ValueDataSource</name>
    <filename>classRTT_1_1internal_1_1ValueDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type></type>
      <name>~ValueDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>a45dc6bdfeaa9634b3dbf1d7570861ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>a49beaea7df1ad6bfa31bcb15e47299cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>a6a741cff3e31a421d4ef5d1b7f72b5f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>aba95205e504145fba310814953121d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>a1c811967bd69ebe014d04384aa072d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>a39f2715f42ac09fc0dcd289fe9a8826d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>a0b3e79dd8b7a625025f10243e42ce5c2</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replace) const </arglist>
    </member>
    <member kind="function">
      <type>RTT_API void</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1ValueDataSource.html</anchorfile>
      <anchor>ade47386514e67d52f40701dc9558c0f3</anchor>
      <arglist>(AssignableDataSource&lt; std::string &gt;::param_t t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConstantDataSource</name>
    <filename>classRTT_1_1internal_1_1ConstantDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function">
      <type></type>
      <name>~ConstantDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ConstantDataSource.html</anchorfile>
      <anchor>a3d2f966e1e5a79cc098c362c803cf10e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ConstantDataSource.html</anchorfile>
      <anchor>a274b252292bcf3ae47b41128fb05cd45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ConstantDataSource.html</anchorfile>
      <anchor>a9830da9bf9b20ffa2b7c28beb7199a4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ConstantDataSource.html</anchorfile>
      <anchor>ab3a7a5b4a90a1b1ac6e72bffc526696d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstantDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ConstantDataSource.html</anchorfile>
      <anchor>a660116c712e723d71b9ef77c93934743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstantDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ConstantDataSource.html</anchorfile>
      <anchor>a358ff2b1de250ff673caf7048dd30d01</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConstReferenceDataSource</name>
    <filename>classRTT_1_1internal_1_1ConstReferenceDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function">
      <type></type>
      <name>~ConstReferenceDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ConstReferenceDataSource.html</anchorfile>
      <anchor>a5d7fe1bae957002f55502c1df751289c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ConstReferenceDataSource.html</anchorfile>
      <anchor>aa1b06c27fe59708212844e40e2717f86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ConstReferenceDataSource.html</anchorfile>
      <anchor>a83327e4fdfb625fb4690b83616dce7fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ConstReferenceDataSource.html</anchorfile>
      <anchor>abedf1873691d5af39de90c25d5f2f0c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstReferenceDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ConstReferenceDataSource.html</anchorfile>
      <anchor>ac5c4f2e9326308baa61e1eed4d7feb67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstReferenceDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ConstReferenceDataSource.html</anchorfile>
      <anchor>a841d9ae24ecacfccb3b6986c63464c7d</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ReferenceDataSource</name>
    <filename>classRTT_1_1internal_1_1ReferenceDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <base>RTT::internal::Reference</base>
    <member kind="function">
      <type></type>
      <name>~ReferenceDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a930329334a7e1be1557e5e2dcbeb82b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReference</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>ad38c73748f077c9af29956c68bafa913</anchor>
      <arglist>(void *ref)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setReference</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a2dc1354df4d29f37434b34afa5e8c148</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dsb)</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a95e647501a663a646390c41c13ad1cdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a434eb949f27028643763d5df0cec0342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a4d3d2755809064b161a934d4dad7c254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a75ea8b14867e5ab79a26ccd1479e18ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReferenceDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a3145a1839051ab02534c6a691341b720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReferenceDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ReferenceDataSource.html</anchorfile>
      <anchor>a91a5461969585341e3e11ed793126f5f</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::AliasDataSource</name>
    <filename>classRTT_1_1internal_1_1AliasDataSource.html</filename>
    <templarg></templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>ac190a6125cc7d9026c9bbdd9bef69f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>a93d6b543b89ef7ae1c6c1e4f45ae6516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>a6b6250e9b66e59c0a62cc97d41cdc558</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>ac38273587936eb71869956c3af5738b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>a5a74bf1905124c235d0d16a4dc148362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AliasDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>a38eccf6d961e2db04bee2db583227c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AliasDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1AliasDataSource.html</anchorfile>
      <anchor>a61ab7fa2da98c32e6bf751f8686f89c6</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ArrayDataSource</name>
    <filename>classRTT_1_1internal_1_1ArrayDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type></type>
      <name>~ArrayDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a7d459017a3094bd0b41b95c84dd206a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a9fd06bc49a6e7a19e3a55a481e81d7fa</anchor>
      <arglist>(std::size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a64071327194dc92258cc59e92dbcb4e6</anchor>
      <arglist>(T const &amp;odata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newArray</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a7a3df2b6c101bbae1807eae391e2b937</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a7deb3be67b7c346797c00b3a0256d9ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>aa8fef19585bd46f69cf20312db312983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a7ef32da6f0d20931a972a62306d778a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a2161d01a58305e8e42e5472ef63309b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArrayDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a683a136eb543070d5659dcbeba506b0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArrayDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ArrayDataSource.html</anchorfile>
      <anchor>a9cd4941b5d0041254ea22d24976bc6bb</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replace) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::LateReferenceDataSource</name>
    <filename>classRTT_1_1internal_1_1LateReferenceDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1LateReferenceDataSource.html</anchorfile>
      <anchor>af8a3a160b00693a86a81eb628889a179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1LateReferenceDataSource.html</anchorfile>
      <anchor>a133887bf24bff443d2d91088eb37c545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1LateReferenceDataSource.html</anchorfile>
      <anchor>a689807d7f1d5c6dd359303f00772edc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1LateReferenceDataSource.html</anchorfile>
      <anchor>a8510e442a6c14e8556802f36e7642651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LateReferenceDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1LateReferenceDataSource.html</anchorfile>
      <anchor>a5fa7c39d088c48a1203d2aac8c885fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LateReferenceDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1LateReferenceDataSource.html</anchorfile>
      <anchor>a18f1cd8c783029283e3c8efe65c8dfd3</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::LateConstReferenceDataSource</name>
    <filename>classRTT_1_1internal_1_1LateConstReferenceDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1LateConstReferenceDataSource.html</anchorfile>
      <anchor>a503c87a8d006b154117aa377eae2c9de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1LateConstReferenceDataSource.html</anchorfile>
      <anchor>a335b083fec7d5d105595a379613bd687</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1LateConstReferenceDataSource.html</anchorfile>
      <anchor>a93e0f60e25a8ad0a0a92f2c17711ef9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LateConstReferenceDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1LateConstReferenceDataSource.html</anchorfile>
      <anchor>afcd4e69559a731fd68949b2d7e9c35dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LateConstReferenceDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1LateConstReferenceDataSource.html</anchorfile>
      <anchor>ae1f99c4f9f1b479d3cf23a3c06bd63be</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ActionAliasDataSource</name>
    <filename>classRTT_1_1internal_1_1ActionAliasDataSource.html</filename>
    <templarg></templarg>
    <base>RTT::internal::DataSource</base>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>a78a69050caa6da781cc0ccd818e1b7ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>aad7ac173a1a63b7e29c9b48348d95809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>ad6830bf2241c11e2b2cd36b997a7fb4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>a185275cbd651ae72963f38e143267154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>a8388df7e5ed6483bde3a8b013bb21554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActionAliasDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>afca0d9a46d89613429f27039ee443a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActionAliasDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasDataSource.html</anchorfile>
      <anchor>a00b3f872df9ee214e45201395ac0461b</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ActionAliasAssignableDataSource</name>
    <filename>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</filename>
    <templarg></templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>acaff6e038428e93d7499d0b2df86f22d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>ab1c046fc0f02fe998d342bf1b886025a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>ab171b155709caf370766abc5d370a03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>aa65204f3fd7c295eecd36d0e1edf8e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>aa911d01cee5a7c6a810876940d958f6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>a3b7b69aa50fbc588dc791d0d88d54c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActionAliasAssignableDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>aad0bb5ba03cbea4677d554fc8155a489</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActionAliasAssignableDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1ActionAliasAssignableDataSource.html</anchorfile>
      <anchor>a92e933534e51b1c2241f2fbef674a091</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::UnboundDataSource</name>
    <filename>classRTT_1_1internal_1_1UnboundDataSource.html</filename>
    <templarg>BoundType</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::BinaryDataSource</name>
    <filename>classRTT_1_1internal_1_1BinaryDataSource.html</filename>
    <templarg>function</templarg>
    <base>DataSource&lt; remove_cr&lt; function::result_type &gt;::type &gt;</base>
    <member kind="function">
      <type></type>
      <name>BinaryDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>a6026fe2ced7300a64703559664832ae8</anchor>
      <arglist>(typename DataSource&lt; first_arg_t &gt;::shared_ptr a, typename DataSource&lt; second_arg_t &gt;::shared_ptr b, function f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>af7310a64bd25938111460f40babe1962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>af601445a2c2edaf100b77be8dce6a199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; value_t &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>a598f09c53f2442e7cf038614d7f8ea12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>a52acf4c07ca905a8ac4de6212d631ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryDataSource&lt; function &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>a908ee500a33183ae074e115cdc1f21cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryDataSource&lt; function &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1BinaryDataSource.html</anchorfile>
      <anchor>a22b2b37dc98129bd2d910a3cc6092c26</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; remove_cr&lt; function::result_type &gt;::type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; remove_cr&lt; function::result_type &gt;::type &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::UnaryDataSource</name>
    <filename>classRTT_1_1internal_1_1UnaryDataSource.html</filename>
    <templarg>function</templarg>
    <base>DataSource&lt; remove_cr&lt; function::result_type &gt;::type &gt;</base>
    <member kind="function">
      <type></type>
      <name>UnaryDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>af8d7ac721934f86e56d8b11c062b72d8</anchor>
      <arglist>(typename DataSource&lt; arg_t &gt;::shared_ptr a, function f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>a616a0d42677053336e824085642dd970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>ab8d7d43fd562f361769c9ab250535cd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; value_t &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>af0bfabf29412b3f12a10951f4c3b4bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>a3d14d6e28df7059be5bca5e392aedf3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnaryDataSource&lt; function &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>ac3ea897d6fe87bf067d47acc6a0c8358</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnaryDataSource&lt; function &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1UnaryDataSource.html</anchorfile>
      <anchor>a6056673ccbad2483195f941f91be426c</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::NArityDataSource</name>
    <filename>classRTT_1_1internal_1_1NArityDataSource.html</filename>
    <templarg>function</templarg>
    <base>DataSource&lt; remove_cr&lt; function::result_type &gt;::type &gt;</base>
    <member kind="function">
      <type></type>
      <name>NArityDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>a0ffb9ccb4c4e78b0d1539f5f86d9bc71</anchor>
      <arglist>(function f=function())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NArityDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>afbd59e7fac6ac291f3b02b640e914bf2</anchor>
      <arglist>(function f, const std::vector&lt; typename DataSource&lt; arg_t &gt;::shared_ptr &gt; &amp;dsargs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>ae3643b886055f35e373e83009213686d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>add90ebfe8521fad22b804e37cd83b15a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; value_t &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>afdb85312f49e56e27ab3dd955ed45fa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>aa38a0f405dda8ae4e2452ec402ae8a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NArityDataSource&lt; function &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>a84a955b36eef55dd509f9b21f8cc31aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NArityDataSource&lt; function &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1NArityDataSource.html</anchorfile>
      <anchor>a9078e6a74ed6651b296e7d7c0e387335</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DSRStore</name>
    <filename>structRTT_1_1internal_1_1DSRStore.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceResultStorage</name>
    <filename>structRTT_1_1internal_1_1DataSourceResultStorage.html</filename>
    <templarg>R</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceResultStorage&lt; R const &amp; &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceResultStorage_3_01R_01const_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceArgStorage</name>
    <filename>structRTT_1_1internal_1_1DataSourceArgStorage.html</filename>
    <templarg>A</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceArgStorage&lt; A &amp; &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceArgStorage_3_01A_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceArgStorage&lt; A const &amp; &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceArgStorage_3_01A_01const_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceStorageImpl&lt; 0, DataType &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceStorageImpl_3_010_00_01DataType_01_4.html</filename>
    <templarg></templarg>
    <base>DataSourceResultStorage&lt; boost::function_traits&lt; DataType &gt;::result_type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceStorageImpl&lt; 1, DataType &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceStorageImpl_3_011_00_01DataType_01_4.html</filename>
    <templarg></templarg>
    <base>DataSourceResultStorage&lt; boost::function_traits&lt; DataType &gt;::result_type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceStorage</name>
    <filename>structRTT_1_1internal_1_1DataSourceStorage.html</filename>
    <templarg>DataType</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceTypeInfo</name>
    <filename>structRTT_1_1internal_1_1DataSourceTypeInfo.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo.html</anchorfile>
      <anchor>aa8d1f0c0fb3cf1a24add02e2ce953683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo.html</anchorfile>
      <anchor>ad8d82673cc5b52082e3d5b711e9e278b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getQualifier</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo.html</anchorfile>
      <anchor>aa8b834f526e9348c9fa0b186343b9f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo.html</anchorfile>
      <anchor>afea57c835b08d84d60e4b39a57890d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static types::TypeInfo *</type>
      <name>TypeInfoObject</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo.html</anchorfile>
      <anchor>a2879e55383ae8d40d7f0b6b726a278fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceTypeInfo&lt; UnknownType &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01UnknownType_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceTypeInfo&lt; const T &amp; &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01const_01T_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceTypeInfo&lt; types::carray&lt; T &gt; &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01types_1_1carray_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::DataSourceTypeInfo&lt; void &gt;</name>
    <filename>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01void_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01void_01_4.html</anchorfile>
      <anchor>a9e5a2a0eb047f8435cd95b6fb8e69181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01void_01_4.html</anchorfile>
      <anchor>a9e82236668ae8ac790da8a9bb85aec7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getQualifier</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01void_01_4.html</anchorfile>
      <anchor>a110c2dbc4588639b38848751c25b0ceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01void_01_4.html</anchorfile>
      <anchor>ad5c2ab2edc24fe7e0f6ff9195cada334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static types::TypeInfo *</type>
      <name>TypeInfoObject</name>
      <anchorfile>structRTT_1_1internal_1_1DataSourceTypeInfo_3_01void_01_4.html</anchorfile>
      <anchor>a2219c397587222b59708f3943131686c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::FusedFunctorDataSource</name>
    <filename>structRTT_1_1internal_1_1FusedFunctorDataSource.html</filename>
    <templarg>Signature</templarg>
    <templarg>Enable</templarg>
    <base>DataSource&lt; remove_cr&lt; boost::function_traits&lt; Signature &gt;::result_type &gt;::type &gt;</base>
    <member kind="function">
      <type>value_t</type>
      <name>value</name>
      <anchorfile>structRTT_1_1internal_1_1FusedFunctorDataSource.html</anchorfile>
      <anchor>a8929cbc0d8d04e8286547941bfa56275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>structRTT_1_1internal_1_1FusedFunctorDataSource.html</anchorfile>
      <anchor>a9f2c3e5f7340cd5a5018fd6ddd31ba08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>structRTT_1_1internal_1_1FusedFunctorDataSource.html</anchorfile>
      <anchor>a73bf776b157b781cc44c3852561e9e7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>get</name>
      <anchorfile>structRTT_1_1internal_1_1FusedFunctorDataSource.html</anchorfile>
      <anchor>a358463b695fc29c3569eee946825a93b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedFunctorDataSource&lt; Signature &gt; *</type>
      <name>clone</name>
      <anchorfile>structRTT_1_1internal_1_1FusedFunctorDataSource.html</anchorfile>
      <anchor>a517d2ce2d5be6269eb3ae0f4dba8856b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedFunctorDataSource&lt; Signature &gt; *</type>
      <name>copy</name>
      <anchorfile>structRTT_1_1internal_1_1FusedFunctorDataSource.html</anchorfile>
      <anchor>ae2cfa21cc0faaecb876736c75c90f3c5</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; remove_cr&lt; boost::function_traits&lt; Signature &gt;::result_type &gt;::type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; remove_cr&lt; boost::function_traits&lt; Signature &gt;::result_type &gt;::type &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::FusedMCallDataSource</name>
    <filename>structRTT_1_1internal_1_1FusedMCallDataSource.html</filename>
    <templarg>Signature</templarg>
    <base>DataSource&lt; remove_cr&lt; boost::function_traits&lt; Signature &gt;::result_type &gt;::type &gt;</base>
    <member kind="function">
      <type>value_t</type>
      <name>value</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCallDataSource.html</anchorfile>
      <anchor>aeafc56e0f5e465c981940087d9b2fd23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCallDataSource.html</anchorfile>
      <anchor>aa3bae3d4caec7714c064e9dd7e4750c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCallDataSource.html</anchorfile>
      <anchor>a134bf6b83805fa361e3fab9afbb395fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>get</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCallDataSource.html</anchorfile>
      <anchor>a5ff812490ebc503ef4591f404ec279e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedMCallDataSource&lt; Signature &gt; *</type>
      <name>clone</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCallDataSource.html</anchorfile>
      <anchor>a6cbf0d9a64499a6fa1a86a80ea051cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedMCallDataSource&lt; Signature &gt; *</type>
      <name>copy</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCallDataSource.html</anchorfile>
      <anchor>a1dd1c22a80ba88dccc1c73e7e996340c</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::FusedMSendDataSource</name>
    <filename>structRTT_1_1internal_1_1FusedMSendDataSource.html</filename>
    <templarg>Signature</templarg>
    <base>DataSource&lt; SendHandle&lt; Signature &gt; &gt;</base>
    <member kind="function">
      <type>value_t</type>
      <name>value</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSendDataSource.html</anchorfile>
      <anchor>a70e5a134211b83a20c3eebcc51023526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSendDataSource.html</anchorfile>
      <anchor>aa2d3e9f198bcfb7a04aa5d8ce452e0e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>get</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSendDataSource.html</anchorfile>
      <anchor>a73e94fc25fdba980264652fc97ac95d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedMSendDataSource&lt; Signature &gt; *</type>
      <name>clone</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSendDataSource.html</anchorfile>
      <anchor>a94557d559903065c744aac3af4e4cbe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedMSendDataSource&lt; Signature &gt; *</type>
      <name>copy</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSendDataSource.html</anchorfile>
      <anchor>a3a708d1db2ab1f6e156ac3434b23010c</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; SendHandle&lt; Signature &gt; &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; SendHandle&lt; Signature &gt; &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::FusedMCollectDataSource</name>
    <filename>structRTT_1_1internal_1_1FusedMCollectDataSource.html</filename>
    <templarg>Signature</templarg>
    <base>DataSource&lt; SendStatus &gt;</base>
    <member kind="function">
      <type>value_t</type>
      <name>value</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCollectDataSource.html</anchorfile>
      <anchor>a14470e9e7298c215d9eb5550ce621cc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCollectDataSource.html</anchorfile>
      <anchor>a1181495bb3a34c5850a17e5b0031203f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>get</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCollectDataSource.html</anchorfile>
      <anchor>adf22f3e0d0fd9278d6689e553472f047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedMCollectDataSource&lt; Signature &gt; *</type>
      <name>clone</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCollectDataSource.html</anchorfile>
      <anchor>a9aadfd3794bc8d5bad249970a2dfd84e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FusedMCollectDataSource&lt; Signature &gt; *</type>
      <name>copy</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMCollectDataSource.html</anchorfile>
      <anchor>a0f7ad5ee69610917ef1f380853e5c874</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::FusedMSignal</name>
    <filename>structRTT_1_1internal_1_1FusedMSignal.html</filename>
    <templarg>Signature</templarg>
    <base>RTT::base::DisposableInterface</base>
    <member kind="function">
      <type></type>
      <name>FusedMSignal</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSignal.html</anchorfile>
      <anchor>a08e23687af20494dd4ac441794dd54f3</anchor>
      <arglist>(base::ActionInterface *act, const DataSourceSequence &amp;s, ExecutionEngine *subscr)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>invoke</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSignal.html</anchorfile>
      <anchor>a9ff6569ea7cf9a4f9f7bf6000888bfa5</anchor>
      <arglist>(typename SequenceFactory::data_type seq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeAndDispose</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSignal.html</anchorfile>
      <anchor>ab44d9861778507ae7caa3eb1f0459f3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSignal.html</anchorfile>
      <anchor>ade71a27fafd17d9d068f8ead9004b987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; FusedMSignal&lt; Signature &gt; &gt;</type>
      <name>self</name>
      <anchorfile>structRTT_1_1internal_1_1FusedMSignal.html</anchorfile>
      <anchor>ac44f832b1c83d5e8c682de563ec1c869</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::GetSignature</name>
    <filename>structRTT_1_1internal_1_1GetSignature.html</filename>
    <templarg>FunctionT</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::GetSignatureDS</name>
    <filename>structRTT_1_1internal_1_1GetSignatureDS.html</filename>
    <templarg>FunctionT</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::GlobalEngine</name>
    <filename>classRTT_1_1internal_1_1GlobalEngine.html</filename>
    <base>RTT::ExecutionEngine</base>
    <member kind="function" static="yes">
      <type>static RTT_API ExecutionEngine *</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1internal_1_1GlobalEngine.html</anchorfile>
      <anchor>acd69e0c7eae8ec2010c6729e1f85d968</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::GlobalService</name>
    <filename>classRTT_1_1internal_1_1GlobalService.html</filename>
    <base>RTT::Service</base>
    <member kind="function">
      <type>bool</type>
      <name>require</name>
      <anchorfile>classRTT_1_1internal_1_1GlobalService.html</anchorfile>
      <anchor>a42a8ad1f45db5a29b8fdb8ef89235f71</anchor>
      <arglist>(const std::string servicename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::InputPortSource</name>
    <filename>classRTT_1_1internal_1_1InputPortSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>a9a9a1b5d7f5bc87905b8c537f725d929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>aca069c020f2c97a4373d9252a1a8a413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>a2a43b783ef08077b198b187edd743d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>aa7d39a1b280d10cb412ac49c81a4ccc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>aeb6c1d893606f2d823ccb98895e8a67e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>a7d05fae952e2fe8a0dfe1a9d4934e7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>a0daa322c6dc14fed6409bff2fa0c35f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1InputPortSource.html</anchorfile>
      <anchor>a8388f38129c26628dd88d88cf246ea24</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::Invoker</name>
    <filename>structRTT_1_1internal_1_1Invoker.html</filename>
    <templarg>F</templarg>
    <templarg>BaseImpl</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::InvokerBaseImpl</name>
    <filename>structRTT_1_1internal_1_1InvokerBaseImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::InvokerBase</name>
    <filename>structRTT_1_1internal_1_1InvokerBase.html</filename>
    <templarg></templarg>
    <base>InvokerBaseImpl&lt; boost::function_traits&lt; F &gt;::arity, F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::InvokerSignature</name>
    <filename>structRTT_1_1internal_1_1InvokerSignature.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::List</name>
    <filename>classRTT_1_1internal_1_1List.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::ListLockFree</base>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classRTT_1_1internal_1_1List.html</anchorfile>
      <anchor>af1832a7890627dddc711202bbb74eb28</anchor>
      <arglist>(int qsize, int t=ORONUM_OS_MAX_THREADS)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a551db73fd3adcd10819aac0af0de38d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a1a8a9d1cd6d9a744293172478dc849b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a34acd0922aa999ea9111415b40b97f78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a5ef7bf1bc7728ffd83345749da37389d</anchor>
      <arglist>(size_t items=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a876efb6ea3b2ba75a32f5df6ef87edd2</anchor>
      <arglist>(size_t items=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>acebcc8c4eeda204c4e80e0fd94a318f9</anchor>
      <arglist>(size_t lsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>ab0a33a1fd530f769e8930a67690d7977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>afdccdb8c0f6ab07175eedb4a8d2f87c2</anchor>
      <arglist>(value_t item)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>append</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a84bb35686c9469ac8d8574e6684fa23d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>front</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a8e76e11049d5dc7d01f62d30ed80daec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>back</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>aee2b1c6e45fd0050d31e184372884d81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>af3f6c0def76cfd1785ad1ce57a797f3e</anchor>
      <arglist>(value_t item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>delete_if</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>ab2a035be89881d237b556828371512fd</anchor>
      <arglist>(Pred pred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a91e5fea5fd6a55d35b14d1113744909a</anchor>
      <arglist>(Function func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_and_blank</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a15580a2d3e277b49a62beb191ccd88e0</anchor>
      <arglist>(Function func, value_t blank)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase_and_blank</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a0791134080e84bccfce42e390110dd25</anchor>
      <arglist>(value_t item, value_t blank)</arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>find_if</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a0860c2d99cb8e4961d04955055c590df</anchor>
      <arglist>(Function func, value_t blank=value_t())</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_THREADS</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>abbfcc6616b41903f06f31db69f34c07a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ListLocked</name>
    <filename>classRTT_1_1internal_1_1ListLocked.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ListLocked</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>ac39ad6a6d939d5116bc9141c07db6cdc</anchor>
      <arglist>(unsigned int lsize, unsigned int unused=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>ab33d6cef755f5a0e90995579287d27ff</anchor>
      <arglist>(size_t items=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>a20f217144067f5345feeba860056cdc9</anchor>
      <arglist>(size_t items=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>adfe0d57a36d5d231c7d7d447521d6686</anchor>
      <arglist>(size_t lsize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>ac8dc8c8faebba46bf82ebc767b939020</anchor>
      <arglist>(value_t item)</arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>front</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>a1239e22cfe2ba291f89fced6e0e84cb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>back</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>aa9c254f92676a24c3ea3d0b11b9fa8e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>append</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>acfd980c78c15bc38ba624e6a2e3ee806</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>a5a82a869c6f77d5c78638c2fa59ebf46</anchor>
      <arglist>(value_t item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>delete_if</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>ac1d2a06fd1630b2ff54b27b26fb47eae</anchor>
      <arglist>(Pred pred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>a2ffd87147d197fa18dc6fe5e0670d1f2</anchor>
      <arglist>(Function func)</arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>find_if</name>
      <anchorfile>classRTT_1_1internal_1_1ListLocked.html</anchorfile>
      <anchor>a9d0f355a13ea24975aa0b93732d0c0b2</anchor>
      <arglist>(Function func, value_t blank=value_t())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ListLockFree</name>
    <filename>classRTT_1_1internal_1_1ListLockFree.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ListLockFree</name>
      <anchorfile>classRTT_1_1internal_1_1ListLockFree.html</anchorfile>
      <anchor>a3afb0eb0236bd23a913faf8920d1926e</anchor>
      <arglist>(unsigned int lsize, unsigned int threads=ORONUM_OS_MAX_THREADS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::LocalOperationCallerImpl</name>
    <filename>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</filename>
    <templarg></templarg>
    <base>OperationCallerBase&lt; FunctionT &gt;</base>
    <base>CollectBase&lt; FunctionT &gt;</base>
    <base protection="protected">BindStorage&lt; FunctionT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>aface284b7fe9b35f348a284d0d9fc9db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeAndDispose</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>ad850ee6a0d3cebab3a64c65d238f38c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>a19b583d1028f50656cd17445e1d777f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>call_impl</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>a6e63388627ce68f1f93497aa425a8648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>call_impl</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>ae817f7de92fd6925b8dcbb1e7d875a8f</anchor>
      <arglist>(T1 a1)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>ret_impl</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>ad25e2ebd87b3dbef174e88a7fea30996</anchor>
      <arglist>(T1 a1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OperationCallerBase&lt; FunctionT &gt; *</type>
      <name>cloneI</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBase.html</anchorfile>
      <anchor>a0ce632b8b4756316f80cf535c4f4ea49</anchor>
      <arglist>(ExecutionEngine *caller) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OperationCallerBase&lt; FunctionT &gt;::shared_ptr</type>
      <name>self</name>
      <anchorfile>classRTT_1_1internal_1_1LocalOperationCallerImpl.html</anchorfile>
      <anchor>a497261109ad558b494abb882bdce1838</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::LocalOperationCaller</name>
    <filename>structRTT_1_1internal_1_1LocalOperationCaller.html</filename>
    <templarg>FunctionT</templarg>
    <base>Invoker&lt; FunctionT, LocalOperationCallerImpl&lt; FunctionT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>LocalOperationCaller</name>
      <anchorfile>structRTT_1_1internal_1_1LocalOperationCaller.html</anchorfile>
      <anchor>ae181f3c8c271ae1704b8bf261c6186b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalOperationCaller</name>
      <anchorfile>structRTT_1_1internal_1_1LocalOperationCaller.html</anchorfile>
      <anchor>a16779f47d48bebf9dec95ab4e26cffa3</anchor>
      <arglist>(M meth, ObjectType object, ExecutionEngine *ee, ExecutionEngine *caller, ExecutionThread et=ClientThread)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalOperationCaller</name>
      <anchorfile>structRTT_1_1internal_1_1LocalOperationCaller.html</anchorfile>
      <anchor>a0b84a3b1a117e3dbc263d005c1349ab0</anchor>
      <arglist>(M meth, ExecutionEngine *ee, ExecutionEngine *caller, ExecutionThread et=ClientThread)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::LockedQueue</name>
    <filename>classRTT_1_1internal_1_1LockedQueue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LockedQueue</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>a5a1f8e19b2cd848001100e7dc9d34a8d</anchor>
      <arglist>(unsigned int lsize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>a352f3783157153c2301ba640e4edd0c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>aac54f7b695dac1b2a40a2dccf1e1437e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enqueue</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>a663e1b59ca0816b8e3c3bc9f4b991cbd</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dequeue</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>a949a00fbd2182d9f2f892025bd0c468b</anchor>
      <arglist>(T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>front</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>aba388437abc64217f04276aac627ee5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_t</type>
      <name>back</name>
      <anchorfile>classRTT_1_1internal_1_1LockedQueue.html</anchorfile>
      <anchor>ae806d1f65e5588f0951b0ba542765e63</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::MWSRQueue</name>
    <filename>classRTT_1_1internal_1_1MWSRQueue.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AtomicMWSRQueue</base>
    <member kind="function">
      <type></type>
      <name>MWSRQueue</name>
      <anchorfile>classRTT_1_1internal_1_1MWSRQueue.html</anchorfile>
      <anchor>ab29e8ddfcd2bd79f22ae0aa7797c84cb</anchor>
      <arglist>(int qsize)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::NA</name>
    <filename>structRTT_1_1internal_1_1NA.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::NA&lt; void &gt;</name>
    <filename>structRTT_1_1internal_1_1NA_3_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::OperationCallerBinder</name>
    <filename>structRTT_1_1internal_1_1OperationCallerBinder.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::OperationCallerC</name>
    <filename>classRTT_1_1internal_1_1OperationCallerC.html</filename>
    <member kind="function">
      <type></type>
      <name>OperationCallerC</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a05ee8f1a8c38ddf9619d74f1c6444e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCallerC</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>ab6207f7e1b068f6102dc0bdebf2c6ee7</anchor>
      <arglist>(OperationInterfacePart *mr, const std::string &amp;name, ExecutionEngine *caller)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperationCallerC</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a4048f78fbaadbe1d177800767dd0bdd9</anchor>
      <arglist>(const OperationCallerC &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a517390f72c3b37de365a9c7878a1a926</anchor>
      <arglist>(const OperationCallerC &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>arg</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>ab77f55f0bb9ce910ac9c885a54a53051</anchor>
      <arglist>(base::DataSourceBase::shared_ptr a)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>argC</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a2434e12263de02b83d450bef6d3ef410</anchor>
      <arglist>(const ArgT a)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>arg</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>aad495f2fd08fad6a420403d61077a87b</anchor>
      <arglist>(ArgT &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>ret</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>aaf99ba898219e2c99d2c72233e509a4f</anchor>
      <arglist>(base::AttributeBase *r)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>ret</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a2d08e4f2f5811906b91941da5b56fa27</anchor>
      <arglist>(base::DataSourceBase::shared_ptr r)</arglist>
    </member>
    <member kind="function">
      <type>OperationCallerC &amp;</type>
      <name>ret</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>ac6f0e7a5b1fdb8c1d1bc55e5191cfa53</anchor>
      <arglist>(RetT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>call</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a730a1523cefa54fa14c4d31ce9055877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SendHandleC</type>
      <name>send</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a893f4379094d91d0cc094714ac6bb57e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a42a0532a81f388fdeb66c0bc93eeb45a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>adc3c441904ae474827a34f4decc7c74e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OperationInterfacePart *</type>
      <name>getOrp</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>aaa143ba517c53d3541359568a6fa05f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string const &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a083c59b0949a03055d0ce97a7e2d26ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getCallDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>acc7255daee9f97f9385543d37b4b20e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getSendDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>a18259f653c00e60c4d918d3d5a570ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getSendHandleDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1OperationCallerC.html</anchorfile>
      <anchor>ac5ac9f1f0e52babee0c5df8e28292b5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::OperationInterfacePartFused</name>
    <filename>classRTT_1_1internal_1_1OperationInterfacePartFused.html</filename>
    <templarg></templarg>
    <base>RTT::OperationInterfacePart</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a4c3dcbe8138fbede49027bc8b2fc5488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>description</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a8aef312cf9354b347755f767fb5dbb01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArgumentDescription &gt;</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>aec6401df7f16db6d4af9967a84bff789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resultType</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a196e2237b7422de642094d4e7bcad531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a1feb467a3e9c47eec547843c130f2ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getArgumentType</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a77e73a0838caea37737b16cf16632d6b</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>collectArity</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a485d634c618db438c20fb3d867ff9bb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getCollectType</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a81e6c09a830cec65ecf9d510743e06d3</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produce</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a187615aff42b64883f8ff15c33a3a57e</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a48551e5ac3a94225cccbfa652ab6b015</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a1a9f4d08d24e46b17f4ec4b937d39093</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>abebb8e13f8e7d6a055e03cfc2530160e</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, DataSource&lt; bool &gt;::shared_ptr blocking) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; base::DisposableInterface &gt;</type>
      <name>getLocalOperation</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a78ec7c17c3a967bee2255e1b72f1dc9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>create_sequence&lt; typename boost::function_types::parameter_types&lt; Signature &gt;::type &gt;</type>
      <name>SequenceFactory</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a380e5ed4f8f8c0bc51a1ce9dd33cb924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>create_sequence&lt; typename boost::function_types::parameter_types&lt; typename CollectType&lt; Signature &gt;::type &gt;::type &gt;</type>
      <name>CollectSequenceFactory</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFused.html</anchorfile>
      <anchor>a6a840445d36c2816ca902e8171fe1b39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::SynchronousOperationInterfacePartFused</name>
    <filename>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</filename>
    <templarg></templarg>
    <base>RTT::OperationInterfacePart</base>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>aaef42e03f76faa4f1cc1612e0ab7ecbe</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a7a8bbccf905cf1d0c714aca437cdce06</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, internal::DataSource&lt; bool &gt;::shared_ptr blocking) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>ad9034a7642d37749c33f7776bba5d384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>ad1adc6c71de099ee6ca9a84ae5af0bbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>description</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a43f11132037656cfd2edc41cce149e31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArgumentDescription &gt;</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>ab957e0cf34e15aaf7c4b4408b5fb368c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>resultType</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a04005012b8394f780a5b4f043b106898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a8cde798cc157d47e122553d8a48b3d00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getArgumentType</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>af15c9d76aa1d36f555f2d27cd7a3f106</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>collectArity</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a34ab73a54f0a17f892c60f98bf5192ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getCollectType</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a8f235730629db465d380f4ddbe519a51</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produce</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a1d5481cfb6bc8cd2b0db703a2b9ff1e7</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; base::DisposableInterface &gt;</type>
      <name>getLocalOperation</name>
      <anchorfile>classRTT_1_1internal_1_1SynchronousOperationInterfacePartFused.html</anchorfile>
      <anchor>a2fa2c4209eefd648901964361c47394b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::OperationInterfacePartFusedDS</name>
    <filename>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</filename>
    <templarg>Signature</templarg>
    <templarg>ObjT</templarg>
    <base>RTT::OperationInterfacePart</base>
    <member kind="function">
      <type>std::string</type>
      <name>resultType</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a2601ea4bcaa17ea6e0be8e016e1213f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>ae083054c8ec293871ab7e10d3ca5ce7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getArgumentType</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>acf7d7c730bbaadc822992981997fb485</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>collectArity</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a055184f5f2639d207a8dd98270129d96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getCollectType</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a16f3bad7453b8f1e98e1c930aa1ec459</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a5a5203850d2ba9b858a41a14aa06b0d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>description</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a24cff5e4c3472238b79b462d1b6bff58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ArgumentDescription &gt;</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>aab6f00f3582b1bffe3215cdb4d3ea4fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a9d09158fb83304a252746a11324319ba</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a6af4abd257ae0806a34638cd4f4e7c02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>af7594f3819ea2264cf0281db16fba367</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, DataSource&lt; bool &gt;::shared_ptr blocking) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; base::DisposableInterface &gt;</type>
      <name>getLocalOperation</name>
      <anchorfile>classRTT_1_1internal_1_1OperationInterfacePartFusedDS.html</anchorfile>
      <anchor>a17422e73b014a4413f26062b0879e818</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::PartDataSource</name>
    <filename>classRTT_1_1internal_1_1PartDataSource.html</filename>
    <templarg>T</templarg>
    <base>RTT::internal::AssignableDataSource</base>
    <member kind="function">
      <type></type>
      <name>PartDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>a095b27f83f2b07c5346659c10cb9cdf2</anchor>
      <arglist>(typename AssignableDataSource&lt; T &gt;::reference_t ref, base::DataSourceBase::shared_ptr parent)</arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>a2d64385bac5cf475ec305f154ded235f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSource&lt; T &gt;::result_t</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>aea728cfcde177ddbc73704a502418c9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::reference_t</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>a3390be90ed30e575cea10c2fb037535a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssignableDataSource&lt; T &gt;::const_reference_t</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>a3af3056fabcfafb8e212a2409bb3fd24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updated</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>a134973934b5308f9306ef9e2844ece65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PartDataSource&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>a0c3f4ea9254f632df78be649b94823e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PartDataSource&lt; T &gt; *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource.html</anchorfile>
      <anchor>aa647f894c4a9850c397aeba19e653c0f</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replace) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::PartDataSource&lt; types::carray&lt; T &gt; &gt;</name>
    <filename>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>AssignableDataSource&lt; types::carray&lt; T &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>PartDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af28125a5e578948ee5ed5714b6beb275</anchor>
      <arglist>(types::carray&lt; T &gt; ref, base::DataSourceBase::shared_ptr parent)</arglist>
    </member>
    <member kind="function">
      <type>types::carray&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afb4c964d8989abd087ad9ed037b05aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>types::carray&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8dffe619a675d491386ec7e07b6bbf47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>types::carray&lt; T &gt; &amp;</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1b909cc2925d33bbac2058e11b4b58f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>types::carray&lt; T &gt; const &amp;</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7bda2e0853f523a5cc17fd3c68e78ca2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updated</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8fdf61e0354a78379deef19d7b4a54e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PartDataSource *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acd4d5ac87678f40f4f79dee0c09f9091</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PartDataSource *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1internal_1_1PartDataSource_3_01types_1_1carray_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a622c61303a0444f03437bcdf5a3d9572</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replace) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a8d8768e83fae929586428a6cd66ca75a</anchor>
      <arglist>(param_t t)=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getRawPointer</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a5519827f47fdfdea189cf01666e81a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAssignable</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>abf2dfcdb08b91febf963cd4a806ba43e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>a9b7a379cdbb70860714ab653673d0957</anchor>
      <arglist>(base::DataSourceBase *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>updateAction</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>ad4a5d078288ce2e01e66122b79aebe69</anchor>
      <arglist>(base::DataSourceBase *other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AssignableDataSource&lt; types::carray&lt; T &gt; &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1AssignableDataSource.html</anchorfile>
      <anchor>ad1fa9e588f9641c35bad6b7c05eceab5</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::Queue</name>
    <filename>classRTT_1_1internal_1_1Queue.html</filename>
    <templarg></templarg>
    <base>RTT::internal::AtomicQueue</base>
    <member kind="function">
      <type></type>
      <name>Queue</name>
      <anchorfile>classRTT_1_1internal_1_1Queue.html</anchorfile>
      <anchor>a5a4a5ec164472349e88b3742bca7e709</anchor>
      <arglist>(int qsize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::Reference</name>
    <filename>classRTT_1_1internal_1_1Reference.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setReference</name>
      <anchorfile>classRTT_1_1internal_1_1Reference.html</anchorfile>
      <anchor>afa9fe9a32c317735a42cfc07e8c3ee88</anchor>
      <arglist>(void *ref)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setReference</name>
      <anchorfile>classRTT_1_1internal_1_1Reference.html</anchorfile>
      <anchor>a501f44c061ee035c8281bc7c86f2438b</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dsb)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::RemoteOperationCallerImpl</name>
    <filename>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</filename>
    <templarg></templarg>
    <base>OperationCallerBase&lt; OperationCallerT &gt;</base>
    <base>CollectBase&lt; OperationCallerT &gt;</base>
    <member kind="function">
      <type></type>
      <name>RemoteOperationCallerImpl</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</anchorfile>
      <anchor>a7d5e519d733beb356e38bbe4567dcd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteOperationCallerImpl</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</anchorfile>
      <anchor>a18a67a4a91cacf705764656622ebca54</anchor>
      <arglist>(SendHandleC handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executeAndDispose</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</anchorfile>
      <anchor>af22e2c72a8c669b354f825f8d8159338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dispose</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</anchorfile>
      <anchor>aa4bab9983dec19120c78794b65f036c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>call_impl</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</anchorfile>
      <anchor>a511a9430730853999469f1688a67ff39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>ret_impl</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCallerImpl.html</anchorfile>
      <anchor>afb902f5f8d3e2fb61c41aa4ecdf0c93f</anchor>
      <arglist>(T1 a1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OperationCallerBase&lt; OperationCallerT &gt; *</type>
      <name>cloneI</name>
      <anchorfile>structRTT_1_1base_1_1OperationCallerBase.html</anchorfile>
      <anchor>a0ce632b8b4756316f80cf535c4f4ea49</anchor>
      <arglist>(ExecutionEngine *caller) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::RemoteOperationCaller</name>
    <filename>classRTT_1_1internal_1_1RemoteOperationCaller.html</filename>
    <templarg></templarg>
    <base>Invoker&lt; OperationCallerT, RemoteOperationCallerImpl&lt; OperationCallerT &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>RemoteOperationCaller</name>
      <anchorfile>classRTT_1_1internal_1_1RemoteOperationCaller.html</anchorfile>
      <anchor>af4ef449c862b76034ba7fa59b9037550</anchor>
      <arglist>(OperationInterfacePart *of, std::string name, ExecutionEngine *caller)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::ReturnImpl</name>
    <filename>structRTT_1_1internal_1_1ReturnImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::ReturnBaseImpl</name>
    <filename>structRTT_1_1internal_1_1ReturnBaseImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::ReturnBase</name>
    <filename>structRTT_1_1internal_1_1ReturnBase.html</filename>
    <templarg></templarg>
    <base>ReturnBaseImpl&lt; boost::function_traits&lt; F &gt;::arity, F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>RTT::internal::ReturnSignature</name>
    <filename>structRTT_1_1internal_1_1ReturnSignature.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::Signal</name>
    <filename>classRTT_1_1internal_1_1Signal.html</filename>
    <templarg>Signature</templarg>
    <templarg>TSlotFunction</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::AddMember</name>
    <filename>classRTT_1_1internal_1_1AddMember.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ArgMember</name>
    <filename>classRTT_1_1internal_1_1ArgMember.html</filename>
    <templarg>F</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::UnMember</name>
    <filename>classRTT_1_1internal_1_1UnMember.html</filename>
    <templarg>F</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::UnPointer</name>
    <filename>classRTT_1_1internal_1_1UnPointer.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::internal::TsPool</name>
    <filename>classRTT_1_1internal_1_1TsPool.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>TsPool</name>
      <anchorfile>classRTT_1_1internal_1_1TsPool.html</anchorfile>
      <anchor>a42cfce721a56fe7631e250feb8d09e89</anchor>
      <arglist>(unsigned int ssize, const T &amp;sample=T())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1internal_1_1TsPool.html</anchorfile>
      <anchor>a97f664f5217e8e25288398f917f3b5d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>data_sample</name>
      <anchorfile>classRTT_1_1internal_1_1TsPool.html</anchorfile>
      <anchor>a923ec29c8748259fff3a8863863c50fa</anchor>
      <arglist>(const T &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classRTT_1_1internal_1_1TsPool.html</anchorfile>
      <anchor>aa2c1d8776e667d1791fde41e1a3d130c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>capacity</name>
      <anchorfile>classRTT_1_1internal_1_1TsPool.html</anchorfile>
      <anchor>aac4d0d16ce02bf044af123562fe394e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::SendHandleC</name>
    <filename>classRTT_1_1internal_1_1SendHandleC.html</filename>
    <member kind="function">
      <type></type>
      <name>SendHandleC</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a9cc84999384c9c1b4de1be96ce61769b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SendHandleC</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a48c0c0da46a973a4a5bdc5dcca3c7174</anchor>
      <arglist>(base::DataSourceBase::shared_ptr operation, base::DataSourceBase::shared_ptr handle, OperationInterfacePart *ofp, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SendHandleC</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>ad0ccb259991fc277680a9e58e8c8f000</anchor>
      <arglist>(const SendHandleC &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SendHandleC &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>ad3508fd64a41f1393dddb1cc81c12b89</anchor>
      <arglist>(const SendHandleC &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SendHandleC &amp;</type>
      <name>arg</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a29047fe6b5f4c86055fbbfcd0f920454</anchor>
      <arglist>(base::DataSourceBase::shared_ptr a)</arglist>
    </member>
    <member kind="function">
      <type>SendHandleC &amp;</type>
      <name>arg</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a661f1501b767b3ba1c4cf025cbc083f9</anchor>
      <arglist>(ArgT &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SendStatus</type>
      <name>collect</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>ab6b2fb3abf5ccb07a5b087bc19bab840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SendStatus</type>
      <name>collectIfDone</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>ae7dd521802b01466c06629d83169690d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>afaafc18c1b5391e49e24ca2157c9e507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a4ace74d2b84711239eed556d3ea05cff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoCollect</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a47b001a7d8f03c400c340eed33ba6aae</anchor>
      <arglist>(bool on_off)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getSendHandleDataSource</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>ad3675185b47f60b57c23aae4975aac56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OperationInterfacePart *</type>
      <name>getOrp</name>
      <anchorfile>classRTT_1_1internal_1_1SendHandleC.html</anchorfile>
      <anchor>a75d1f55f8bead55f473a4c6851ab68d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::ConnectionBase</name>
    <filename>classRTT_1_1internal_1_1ConnectionBase.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionBase.html</anchorfile>
      <anchor>aae6603d11e08499f3ef93ec210a713e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deref</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionBase.html</anchorfile>
      <anchor>af4401dbaf7185ba2c9442f2a60cd7fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>os::AtomicInt</type>
      <name>refcount</name>
      <anchorfile>classRTT_1_1internal_1_1ConnectionBase.html</anchorfile>
      <anchor>ade8bde0b33f3ad8aa876dd1a014de676</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::internal::SignalBase</name>
    <filename>classRTT_1_1internal_1_1SignalBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SignalBase</name>
      <anchorfile>classRTT_1_1internal_1_1SignalBase.html</anchorfile>
      <anchor>a70a679c2fc26d9df96fe3342027ff68f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classRTT_1_1internal_1_1SignalBase.html</anchorfile>
      <anchor>aa4531f8ec6dd67c17ac77d08f374e637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classRTT_1_1internal_1_1SignalBase.html</anchorfile>
      <anchor>a27d85fdb15d5e87c62baf88d0f5313f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classRTT_1_1internal_1_1SignalBase.html</anchorfile>
      <anchor>aaba17d6534c0bbff96d9e2ab2dfd0665</anchor>
      <arglist>(size_t conns)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1internal_1_1SignalBase.html</anchorfile>
      <anchor>af5d68bbd3b7bfd9bb9270affc3117140</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::marsh</name>
    <filename>namespaceRTT_1_1marsh.html</filename>
    <class kind="class">RTT::marsh::CPFMarshaller&lt; std::ostream &gt;</class>
    <class kind="class">RTT::marsh::MarshallingService</class>
    <class kind="class">RTT::marsh::MarshallInterface</class>
    <class kind="class">RTT::marsh::DemarshallInterface</class>
    <class kind="class">RTT::marsh::PropertyBagIntrospector</class>
    <class kind="class">RTT::marsh::PropertyDemarshaller</class>
    <class kind="class">RTT::marsh::PropertyLoader</class>
    <class kind="class">RTT::marsh::PropertyMarshaller</class>
    <class kind="class">RTT::marsh::StreamProcessor</class>
    <class kind="class">RTT::marsh::XMLRPCMarshaller</class>
    <class kind="class">RTT::marsh::TinyDemarshaller</class>
    <class kind="class">RTT::marsh::TiXmlBase</class>
    <class kind="class">RTT::marsh::TiXmlNode</class>
    <class kind="class">RTT::marsh::TiXmlAttribute</class>
    <class kind="class">RTT::marsh::TiXmlElement</class>
    <class kind="class">RTT::marsh::TiXmlComment</class>
    <class kind="class">RTT::marsh::TiXmlText</class>
    <class kind="class">RTT::marsh::TiXmlDeclaration</class>
    <class kind="class">RTT::marsh::TiXmlUnknown</class>
    <class kind="class">RTT::marsh::TiXmlDocument</class>
    <class kind="class">RTT::marsh::TiXmlHandle</class>
    <class kind="class">RTT::marsh::XMLRPCDemarshaller</class>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::CPFMarshaller&lt; std::ostream &gt;</name>
    <filename>classRTT_1_1marsh_1_1CPFMarshaller_3_01std_1_1ostream_01_4.html</filename>
    <base>RTT::marsh::MarshallInterface</base>
    <base protection="protected">RTT::base::PropertyIntrospection</base>
    <base>StreamProcessor&lt; std::ostream &gt;</base>
    <member kind="function">
      <type></type>
      <name>CPFMarshaller</name>
      <anchorfile>classRTT_1_1marsh_1_1CPFMarshaller_3_01std_1_1ostream_01_4.html</anchorfile>
      <anchor>adda1415ec4545b25f5e8d6365be13521</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPFMarshaller</name>
      <anchorfile>classRTT_1_1marsh_1_1CPFMarshaller_3_01std_1_1ostream_01_4.html</anchorfile>
      <anchor>a098bac78b476786002c49aa14a057948</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1CPFMarshaller_3_01std_1_1ostream_01_4.html</anchorfile>
      <anchor>a32fd7345a8ec827a7d91f95d45509f3c</anchor>
      <arglist>(base::PropertyBase *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1CPFMarshaller_3_01std_1_1ostream_01_4.html</anchorfile>
      <anchor>a418330d7ee4214c5243746eb2c62f1ac</anchor>
      <arglist>(const PropertyBag &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classRTT_1_1marsh_1_1CPFMarshaller_3_01std_1_1ostream_01_4.html</anchorfile>
      <anchor>a43b206b8afade6ad9583f147bac06cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStream</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>abd7f552d3b53e72c5fce5a40a3639259</anchor>
      <arglist>(std::ostream &amp;_s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getStream</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>a12ec254212a44e5220c31c868b8d5961</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::MarshallingService</name>
    <filename>classRTT_1_1marsh_1_1MarshallingService.html</filename>
    <base>RTT::Service</base>
    <member kind="function">
      <type></type>
      <name>MarshallingService</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a6c06608859b1e2c5c9e48c168d02268c</anchor>
      <arglist>(TaskContext *parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a6af420e8a71e4e534b2eef94a6da9bee</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a7a17d250b1ff56fdf3b26765242eb07e</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a54a726b42143b9ae00d30e0532e1337f</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>ac9ac51e97688ef95c80d29dae2fabc52</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readProperty</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>ac743adc52697c042e964da3608629fe3</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a9141114ac252e964c10cfe0de3fe951a</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateFile</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>ae38746c7b62a2dccbb75ca99d87cbdfe</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeProperty</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>aab71e8368286dc831f9e0a833e184fd6</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadServiceProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>ae821fb953dc43fae269561b9368b2b05</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;servicename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeServiceProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>aa85e8305c52a983abeb4f56f0d9e46b2</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;servicename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readServiceProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>aadd6580e21dc5c8f8aa543bc8894cdeb</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;servicename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateServiceProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a9737101c89b2c902dc222f912780ef9f</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;servicename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readServiceProperty</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>aea235f582e6eef2444264250393162af</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;filename, const std::string &amp;servicename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeServiceProperties</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a99180b006082cab141bac556e4b58fa0</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;servicename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateServiceFile</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a227738280dae9d008f24a01ec50f9a96</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;servicename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeServiceProperty</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>ad306f410ab58bc70e9bea403445feb78</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;filename, const std::string &amp;servicename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallingService.html</anchorfile>
      <anchor>a23d16136ce474b27fe19bf91fea86750</anchor>
      <arglist>(TaskContext *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::MarshallInterface</name>
    <filename>classRTT_1_1marsh_1_1MarshallInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallInterface.html</anchorfile>
      <anchor>a97451618b19106f7be77cb45db48abd9</anchor>
      <arglist>(base::PropertyBase *v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallInterface.html</anchorfile>
      <anchor>af6e9dac4222e6e318cfb3c8f40932f2c</anchor>
      <arglist>(const PropertyBag &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classRTT_1_1marsh_1_1MarshallInterface.html</anchorfile>
      <anchor>a895a49ad0361aba91be5a81b5e85285c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::DemarshallInterface</name>
    <filename>classRTT_1_1marsh_1_1DemarshallInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>deserialize</name>
      <anchorfile>classRTT_1_1marsh_1_1DemarshallInterface.html</anchorfile>
      <anchor>a47c3fefdb4d553180557ee916578eaef</anchor>
      <arglist>(PropertyBag &amp;v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::PropertyBagIntrospector</name>
    <filename>classRTT_1_1marsh_1_1PropertyBagIntrospector.html</filename>
    <base>RTT::base::PropertyBagVisitor</base>
    <member kind="function">
      <type></type>
      <name>PropertyBagIntrospector</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyBagIntrospector.html</anchorfile>
      <anchor>aee15aca48a6cd0c52a1247684a9cbbe3</anchor>
      <arglist>(PropertyBag &amp;bag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyBagIntrospector.html</anchorfile>
      <anchor>a1072d9a2390bb33a109006bb33f7b878</anchor>
      <arglist>(PropertyBag &amp;new_bag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyBagIntrospector.html</anchorfile>
      <anchor>a5c7b7debe16873341a5eadd497193377</anchor>
      <arglist>(const PropertyBag &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyBagIntrospector.html</anchorfile>
      <anchor>a7d12fc601ac1e4f38d598d8118053987</anchor>
      <arglist>(base::PropertyBase *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>introspect</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyBagIntrospector.html</anchorfile>
      <anchor>ace71812d4cf9d8d4d31daa400ab0fad4</anchor>
      <arglist>(Property&lt; PropertyBag &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::PropertyDemarshaller</name>
    <filename>classRTT_1_1marsh_1_1PropertyDemarshaller.html</filename>
    <base>RTT::marsh::DemarshallInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserialize</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyDemarshaller.html</anchorfile>
      <anchor>a2511b39eac687e2c768ee4cc404e60a0</anchor>
      <arglist>(PropertyBag &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::PropertyLoader</name>
    <filename>classRTT_1_1marsh_1_1PropertyLoader.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyLoader</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>a4bb3a9ae0970fc9fc535bee548960a22</anchor>
      <arglist>(TaskContext *task)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyLoader</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>ad40652b46a28da1dd0b3c7ab59729e8e</anchor>
      <arglist>(Service *service)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>ae4a194225bf71aef501058e4ea0b5728</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>store</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>a39aa8ef8566b60a4c276c9ec4d6ce711</anchor>
      <arglist>(const std::string &amp;filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>ae7b575d98bc5919e75ba78fca73694fa</anchor>
      <arglist>(const std::string &amp;filename, bool all=true) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>a7755872d5232e1d27fd3cf1da4d77f00</anchor>
      <arglist>(const std::string &amp;filename, bool all=true) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>afb8ea1334e3d52d02a6c5f0aa897abdc</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyLoader.html</anchorfile>
      <anchor>a33ce1e5a6584ce9851fbf570e87df04e</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;name) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::PropertyMarshaller</name>
    <filename>classRTT_1_1marsh_1_1PropertyMarshaller.html</filename>
    <base>RTT::marsh::MarshallInterface</base>
    <member kind="function">
      <type></type>
      <name>PropertyMarshaller</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyMarshaller.html</anchorfile>
      <anchor>a963fe3f9d3700e7fe8f90746827db2ef</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyMarshaller.html</anchorfile>
      <anchor>a5f622319fefa70c7f611490d347ab7c9</anchor>
      <arglist>(base::PropertyBase *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyMarshaller.html</anchorfile>
      <anchor>abc7098663d410ee13764d8fa0b1db93a</anchor>
      <arglist>(const PropertyBag &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classRTT_1_1marsh_1_1PropertyMarshaller.html</anchorfile>
      <anchor>a18d37ae41ca25a8bb01e275c869a1759</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::StreamProcessor</name>
    <filename>classRTT_1_1marsh_1_1StreamProcessor.html</filename>
    <templarg>Stream</templarg>
    <member kind="function">
      <type></type>
      <name>StreamProcessor</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>a7cd2a956d65b32f1fea954dc9578ee78</anchor>
      <arglist>(Stream &amp;_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StreamProcessor</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>af13ff9f82ac1a3862d5a88cd10748f7d</anchor>
      <arglist>(Stream *_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStream</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>abd7f552d3b53e72c5fce5a40a3639259</anchor>
      <arglist>(Stream &amp;_s)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>getStream</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>a12ec254212a44e5220c31c868b8d5961</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::XMLRPCMarshaller</name>
    <filename>classRTT_1_1marsh_1_1XMLRPCMarshaller.html</filename>
    <templarg></templarg>
    <base>RTT::marsh::MarshallInterface</base>
    <base>RTT::base::PropertyIntrospection</base>
    <base>StreamProcessor&lt; output_stream &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classRTT_1_1marsh_1_1XMLRPCMarshaller.html</anchorfile>
      <anchor>a46f244647696a5c7f327103881fb0355</anchor>
      <arglist>(const PropertyBag &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classRTT_1_1marsh_1_1XMLRPCMarshaller.html</anchorfile>
      <anchor>a73fce92aa3fc2522e4312dc10f44881e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStream</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>abd7f552d3b53e72c5fce5a40a3639259</anchor>
      <arglist>(output_stream &amp;_s)</arglist>
    </member>
    <member kind="function">
      <type>output_stream &amp;</type>
      <name>getStream</name>
      <anchorfile>classRTT_1_1marsh_1_1StreamProcessor.html</anchorfile>
      <anchor>a12ec254212a44e5220c31c868b8d5961</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TinyDemarshaller</name>
    <filename>classRTT_1_1marsh_1_1TinyDemarshaller.html</filename>
    <base>RTT::marsh::DemarshallInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserialize</name>
      <anchorfile>classRTT_1_1marsh_1_1TinyDemarshaller.html</anchorfile>
      <anchor>a82dbaab60b8af6ef08c31418c440878d</anchor>
      <arglist>(PropertyBag &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlBase</name>
    <filename>classRTT_1_1marsh_1_1TiXmlBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlBase.html</anchorfile>
      <anchor>a26c58359a18140e170c4cd8f2fdbc20b</anchor>
      <arglist>(FILE *cfile, int depth) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Row</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlBase.html</anchorfile>
      <anchor>aa779caab399fdcfea6b9802abda3bbef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Column</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlBase.html</anchorfile>
      <anchor>a9cd3335e7d79943e2a9411dc90059021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetCondenseWhiteSpace</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlBase.html</anchorfile>
      <anchor>ad3e1bfe846e2591195e2b0d72ed69c31</anchor>
      <arglist>(bool condense)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsWhiteSpaceCondensed</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlBase.html</anchorfile>
      <anchor>aae479a08edc5d3b98498d3124cbc453a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>userData</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlBase.html</anchorfile>
      <anchor>ae27ec4038733c7403e93650cf37a0b3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlNode</name>
    <filename>classRTT_1_1marsh_1_1TiXmlNode.html</filename>
    <base>RTT::marsh::TiXmlBase</base>
    <member kind="enumeration">
      <type></type>
      <name>NodeType</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a382888b494d366ef7b75dde6c3b40bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Value</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>af82061238487833d84ee7cee374adba9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>ae70ef69efeca9dd200b71e663d438b17</anchor>
      <arglist>(const char *_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a1612715175c363f9d2b21442f39b1966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>Parent</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a5396a7dc8a05e1f3efe329913f9e3b6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>FirstChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a63fa64974e6a47e93b3ae4e88a0600e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>FirstChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a3328ff86f5742c6f8950c465a981c21e</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>FirstChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a86ecb970d13dd6bf500af1324f34637b</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>LastChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a64b909419e5ab8b60ab97960b142e684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>LastChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a3258806e8e8ff4575acfeafe41b32cd5</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>IterateChildren</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>aae96266878edbbb4f683d314f43df1d9</anchor>
      <arglist>(const TiXmlNode *previous) const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>IterateChildren</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a8e827f3c3d2caf8a13e87a5b7c119c2d</anchor>
      <arglist>(const char *value, const TiXmlNode *previous) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>InsertEndChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a4985834c79bddcc3a50488de8c6767f9</anchor>
      <arglist>(const TiXmlNode &amp;addThis)</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>LinkEndChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>ad59fd7110bbc178646a044ec1d0661f6</anchor>
      <arglist>(TiXmlNode *addThis)</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>InsertBeforeChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>aa6d25b01f06e77e9d505fe692244ab8c</anchor>
      <arglist>(TiXmlNode *beforeThis, const TiXmlNode &amp;addThis)</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>InsertAfterChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a88bb246290d8a1511b4ca74de9df4770</anchor>
      <arglist>(TiXmlNode *afterThis, const TiXmlNode &amp;addThis)</arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>ReplaceChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a408fbe1ed6e771ce2e3db98d374a92ef</anchor>
      <arglist>(TiXmlNode *replaceThis, const TiXmlNode &amp;withThis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RemoveChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a9c4937971ce4f1bc609d359ae6886ff5</anchor>
      <arglist>(TiXmlNode *removeThis)</arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>PreviousSibling</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a0c7bde7d2098fccfa33fad86c796c446</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>PreviousSibling</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a95bd650b327ab845f8ff644554a902df</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>NextSibling</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a1e0e23f4e7ea1de3f6be0e063a921a72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlNode *</type>
      <name>NextSibling</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>afb68191f3f95b5c2249f087e1414bf7f</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlElement *</type>
      <name>NextSiblingElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a9f05314a21c17e36525d452270221e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlElement *</type>
      <name>NextSiblingElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a790dc686ad16dd8edd9815c865296d93</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlElement *</type>
      <name>FirstChildElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a4e5ad273ab171aeffa95ca896ee55e08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlElement *</type>
      <name>FirstChildElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>ac9b037cd0df3113b85fcf0a4f0ba2965</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Type</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>af91cbd334d5bae798f9ffa4221e7b6e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlDocument *</type>
      <name>GetDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>ae696522f789029d9a2f2852c97db518f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NoChildren</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a97a662f436b5d5abc978cdb3daf6e546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlDocument *</type>
      <name>ToDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a2d3652debce2e0fdd2e000c3e11c976a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlElement *</type>
      <name>ToElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>ae979e77312040a6e05639551db6a82c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlComment *</type>
      <name>ToComment</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>af02422fbdb38cb61a840e520b1ee61c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlUnknown *</type>
      <name>ToUnknown</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>adf5e75057a7f35e1b8f90ba678e6fe6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlText *</type>
      <name>ToText</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>ab5252d0e1867740984dbb0da4450d515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlDeclaration *</type>
      <name>ToDeclaration</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>acc52fcd0f2949b048ef2c837d80dc67a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlDocument *</type>
      <name>ToDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a69fc7262061e654ad8468c7c069574c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlElement *</type>
      <name>ToElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>aa8066b4fdea86b123b9c31e5bd7479d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlComment *</type>
      <name>ToComment</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a7573ff74c4163100c5f6f506a4114236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlUnknown *</type>
      <name>ToUnknown</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a03b34355a967196ad96799a8f081065d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlText *</type>
      <name>ToText</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a1ce7ff74112485d798316a35356c0598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlDeclaration *</type>
      <name>ToDeclaration</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a21f69d998c36e9397b1e8d830b867282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlNode.html</anchorfile>
      <anchor>a3937f35e7ad38e7a605ba96ed57c2277</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlAttribute</name>
    <filename>classRTT_1_1marsh_1_1TiXmlAttribute.html</filename>
    <base>RTT::marsh::TiXmlBase</base>
    <member kind="function">
      <type></type>
      <name>TiXmlAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>aaf8c18e286e12c9c7688b2bb4fc77af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiXmlAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>ad1255b915fc49eba41abc038885a39ee</anchor>
      <arglist>(const char *_name, const char *_value)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Name</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>aa8999e25a6a91d3fa755a48db210052f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Value</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a7ca525a401aa458873739f92b208c4b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IntValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a17c811ef96f6975a43f0cec48928e19d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DoubleValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>ad7190b1ab11b196c6069523810351680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QueryIntValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a6e570e6df564704b2d7d53b3e554f63a</anchor>
      <arglist>(int *_value) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QueryDoubleValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a65ba2becba378c871d09966b711ce7a1</anchor>
      <arglist>(double *_value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetName</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a57357bfb4c3d994269d69901297a96a0</anchor>
      <arglist>(const char *_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a54c17c4adaf8efb3add3b929ffc6034e</anchor>
      <arglist>(const char *_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIntValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a7c35b6f42bffe8e75e25dacc3f4f9f3c</anchor>
      <arglist>(int _value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDoubleValue</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a4978ca4b6737e06cbcb0a945b2e1b4de</anchor>
      <arglist>(double _value)</arglist>
    </member>
    <member kind="function">
      <type>const TiXmlAttribute *</type>
      <name>Next</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a3d95d7dc29d934c02f76be40cc44de07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlAttribute *</type>
      <name>Previous</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>a8232ce474e1d0efeb68e1707524d35e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlAttribute.html</anchorfile>
      <anchor>afd6ca7b306ccc80aa332d54fa3c64971</anchor>
      <arglist>(FILE *cfile, int depth) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlElement</name>
    <filename>classRTT_1_1marsh_1_1TiXmlElement.html</filename>
    <base>RTT::marsh::TiXmlNode</base>
    <member kind="function">
      <type></type>
      <name>TiXmlElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>af135e776a349ccbae946a292031858c4</anchor>
      <arglist>(const char *in_value)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>adcc956356c57c100a27fb4c95889b583</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>ab15beaa01d11abdfb01e8511c92f583e</anchor>
      <arglist>(const char *name, int *i) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Attribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>ad05453cf20275f6780631ee9a95c2e88</anchor>
      <arglist>(const char *name, double *d) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QueryIntAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a97f1174837c2fc0ea3d77b7ca4c10d26</anchor>
      <arglist>(const char *name, int *_value) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QueryDoubleAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a59e90085a2854375724091117a9f4713</anchor>
      <arglist>(const char *name, double *_value) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QueryFloatAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a8fb676f19d5f550096429036de973767</anchor>
      <arglist>(const char *name, float *_value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>aa1c9cd7291229387dbc12ae0a61b14cb</anchor>
      <arglist>(const char *name, const char *_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a3e6bd9e3d76e2c3d15aed6e68740f627</anchor>
      <arglist>(const char *name, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDoubleAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a53e7f3ee960f5839781021a95cb365f4</anchor>
      <arglist>(const char *name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a46a95a61dbbe696a3e6f9ffe2a9f220e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const TiXmlAttribute *</type>
      <name>FirstAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>ae0f45bca89a2a39c0d5796b9a2481ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TiXmlAttribute *</type>
      <name>LastAttribute</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a706167905888cce526a0dabd9a6220ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetText</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a406ef6c03a3691bea25005c9f4be97b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a00f5ade0f6bdc369e683be1df7257bc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a330e7b92678ebef7cd0a241d65a50d73</anchor>
      <arglist>(FILE *cfile, int depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlElement *</type>
      <name>ToElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a1c1fc7fb628fad35dceb5d2b3249868a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlElement *</type>
      <name>ToElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlElement.html</anchorfile>
      <anchor>a2d397cf1478f89786d9aa5c544f942a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlComment</name>
    <filename>classRTT_1_1marsh_1_1TiXmlComment.html</filename>
    <base>RTT::marsh::TiXmlNode</base>
    <member kind="function">
      <type></type>
      <name>TiXmlComment</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlComment.html</anchorfile>
      <anchor>a2d713dda5d993597e3088192f0d3fdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlComment.html</anchorfile>
      <anchor>a94fcc1f99c799bf3a108c57b773460d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlComment.html</anchorfile>
      <anchor>a7af7c6c328acd93a879e4c3bf104db67</anchor>
      <arglist>(FILE *cfile, int depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlComment *</type>
      <name>ToComment</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlComment.html</anchorfile>
      <anchor>a7e712791a13294a790375a3c6c376773</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlComment *</type>
      <name>ToComment</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlComment.html</anchorfile>
      <anchor>ab31fa7f8f0f1c458658bca21c721efdb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlText</name>
    <filename>classRTT_1_1marsh_1_1TiXmlText.html</filename>
    <base>RTT::marsh::TiXmlNode</base>
    <member kind="function">
      <type></type>
      <name>TiXmlText</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a4234a7e96737b2085472c8b6b59bc054</anchor>
      <arglist>(const char *initValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a5ee6a38cb25b0819be84f7b16406a8fd</anchor>
      <arglist>(FILE *cfile, int depth) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CDATA</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a0979f4a3d6aa6868da69506a5bebdcdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCDATA</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a7610e5042626c1768e1750e94fc1a14a</anchor>
      <arglist>(bool _cdata)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlText *</type>
      <name>ToText</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a21295fc04d38e2e5476abd9156101e9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlText *</type>
      <name>ToText</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a9c50e380f6027fb0d5b0c106113db866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlText.html</anchorfile>
      <anchor>a1acdf40393385c9f5aa1ef8c8a3b8127</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlDeclaration</name>
    <filename>classRTT_1_1marsh_1_1TiXmlDeclaration.html</filename>
    <base>RTT::marsh::TiXmlNode</base>
    <member kind="function">
      <type></type>
      <name>TiXmlDeclaration</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>a9263f04975e4458671ce251790d0e089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiXmlDeclaration</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>a2189cc48a506780742f4489238302175</anchor>
      <arglist>(const char *_version, const char *_encoding, const char *_standalone)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Version</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>a4d7a4c6383a4e884417551c1fc99acfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Encoding</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>ab79aee6ece7acce65f494614005480a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Standalone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>a9088cf566c3ec49f1296875d48661b63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>aef14f32104f9b114966e1c2d68fc76b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>aacf4cf7ca5a98da4dba54b0a3b624fae</anchor>
      <arglist>(FILE *cfile, int depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlDeclaration *</type>
      <name>ToDeclaration</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>af7a4f9754ae7b583b2ec6be0361cbb09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlDeclaration *</type>
      <name>ToDeclaration</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDeclaration.html</anchorfile>
      <anchor>a71923fc9e37a10713db40cdb04401bdb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlUnknown</name>
    <filename>classRTT_1_1marsh_1_1TiXmlUnknown.html</filename>
    <base>RTT::marsh::TiXmlNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlUnknown.html</anchorfile>
      <anchor>a4a03b7f7c00ab14590210386326609d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlUnknown.html</anchorfile>
      <anchor>a51f0e2aeb7f2a7a14125a40a22254822</anchor>
      <arglist>(FILE *cfile, int depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlUnknown *</type>
      <name>ToUnknown</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlUnknown.html</anchorfile>
      <anchor>aa3e530d490f3b79de950da205437c76c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlUnknown *</type>
      <name>ToUnknown</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlUnknown.html</anchorfile>
      <anchor>a4e5334f81d9deb00a551ee2144bf9018</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlDocument</name>
    <filename>classRTT_1_1marsh_1_1TiXmlDocument.html</filename>
    <base>RTT::marsh::TiXmlNode</base>
    <member kind="function">
      <type></type>
      <name>TiXmlDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>af381ea057c6139c7c1b485eb2d85c5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiXmlDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a21fa1b4d0a2a89d95c960d1f36c540e7</anchor>
      <arglist>(const char *documentName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadFile</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ae29792432928dc462f416c20d835f590</anchor>
      <arglist>(TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SaveFile</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a5d7bf27aaa0864305c309405af65e58c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadFile</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ac4f927c46f1ccd94cc10f6afaf1ae54f</anchor>
      <arglist>(const char *filename, TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SaveFile</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ad5582a966fa123d53f02f1e788843a7f</anchor>
      <arglist>(const char *filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadFile</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>abbf761bc7f97b34fa3b23c1f4ad74251</anchor>
      <arglist>(FILE *, TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SaveFile</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a6344dc739be00d4ee1b8f0e689739d12</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Parse</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a04caf3d441e911f3c7f4e406bf8d114f</anchor>
      <arglist>(const char *p, TiXmlParsingData *data=0, TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)</arglist>
    </member>
    <member kind="function">
      <type>const TiXmlElement *</type>
      <name>RootElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ad516b6ee367258b89e0e8e5f633cceae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Error</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>aa9671034e3410f22a782b1a0accce37e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ErrorDesc</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a77455bbd0df6688172118dd413dcc4f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ErrorId</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ab4a55f462dd0d27934912a59261bda12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ErrorRow</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>aec470e86894b05998f4c2bd803b0fb18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ErrorCol</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ab9fe187456642b6d9db95d07e5d812d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTabSize</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a953f50ea96854ebaf1355d4b6afb250c</anchor>
      <arglist>(int _tabsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearError</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>afae5fdc4323cb3b9827e0f70069fa6ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ae1752fe6fdbe1efc417951bc1e29797e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>aee114e9faa12cc80c50c62fb5a762e7b</anchor>
      <arglist>(FILE *cfile, int depth=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TiXmlDocument *</type>
      <name>ToDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a6e95146d13e78e6c02d44db6f12701ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TiXmlDocument *</type>
      <name>ToDocument</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>a56b5255bad7b6b01f0ae69f133f021f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiXmlNode *</type>
      <name>Clone</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlDocument.html</anchorfile>
      <anchor>ad2066b9d9f64dbd90e92b767d12e8ad8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::TiXmlHandle</name>
    <filename>classRTT_1_1marsh_1_1TiXmlHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>TiXmlHandle</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a6f4a88adf257fe144051a105db178ed9</anchor>
      <arglist>(TiXmlNode *_node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiXmlHandle</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a122f3ef75e90199e37fbe4c311b7e603</anchor>
      <arglist>(const TiXmlHandle &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>FirstChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>ad3ae3f69c2eb7312adefb32749b7193e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>FirstChild</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a0cf9949e6eb2fa985df8f87a55276629</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>FirstChildElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>af1e144dbb7b5a35850d90a04d45ad9b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>FirstChildElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>abe362308f66e84d19c5ee748f3193126</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>Child</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a0f552cb26f42193b806d93111dd22a16</anchor>
      <arglist>(const char *value, int index) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>Child</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a70bbb292a1e9bb3fa01ba34d8bc6df36</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>ChildElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a5a20550f16a98b3f08078402dbcd4541</anchor>
      <arglist>(const char *value, int index) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlHandle</type>
      <name>ChildElement</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a2def8d3ced2ae310220ecd8bda28276b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlNode *</type>
      <name>Node</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a1baf82197a9d6e97e7aba384c2cbf444</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlElement *</type>
      <name>Element</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>ab6a2677328afd2e91fce286b5af54189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlText *</type>
      <name>Text</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>af656fa9f2ae910c624e608b73124ee59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TiXmlUnknown *</type>
      <name>Unknown</name>
      <anchorfile>classRTT_1_1marsh_1_1TiXmlHandle.html</anchorfile>
      <anchor>a0d44eb3d04e22b1374ed5d7a3e201189</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::marsh::XMLRPCDemarshaller</name>
    <filename>classRTT_1_1marsh_1_1XMLRPCDemarshaller.html</filename>
    <base>RTT::marsh::DemarshallInterface</base>
    <member kind="function">
      <type></type>
      <name>XMLRPCDemarshaller</name>
      <anchorfile>classRTT_1_1marsh_1_1XMLRPCDemarshaller.html</anchorfile>
      <anchor>a9d21a2624657a4cd885b0d492454bd79</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deserialize</name>
      <anchorfile>classRTT_1_1marsh_1_1XMLRPCDemarshaller.html</anchorfile>
      <anchor>acf4aae8911ce4401a4141c1d7445fd5b</anchor>
      <arglist>(PropertyBag &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::binary_data_iarchive</name>
    <filename>classRTT_1_1mqueue_1_1binary__data__iarchive.html</filename>
    <class kind="struct">RTT::mqueue::binary_data_iarchive::use_array_optimization</class>
    <member kind="typedef">
      <type>boost::mpl::bool_&lt; true &gt;</type>
      <name>is_loading</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a117300e942adadb9c715a9f8e7d758da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mpl::bool_&lt; false &gt;</type>
      <name>is_saving</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>ac17a2458de63ecc22329fa2eec4088c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>binary_data_iarchive</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a4b724461fbfd7d5c876040d3fcfbfcf8</anchor>
      <arglist>(std::streambuf &amp;bsb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>binary_data_iarchive</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a4915fd4d26437282bd0a2a5d4a346383</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_library_version</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>aabb4460bfd64577c046218b56c0c0add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_object_address</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a96059e52ef92fe72eb365a6fc5e2da3e</anchor>
      <arglist>(const void *new_address, const void *old_address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_created_pointers</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a34ac4400b64e91d3f177e542003c5ec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const boost::archive::detail::basic_pointer_iserializer *</type>
      <name>register_type</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a5bb29a84ae86df3f536bc85a0e138ad6</anchor>
      <arglist>(T *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_object</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a6e5287d1bfc669e71a2f51b3a5735e3e</anchor>
      <arglist>(void *t, const boost::archive::detail::basic_iserializer &amp;bis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_override</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>add0f79e2da66120b3164db4195bd6bd5</anchor>
      <arglist>(T &amp;t, BOOST_PFTO int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_override</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a957c0cbe394dcfc57000fcc7f98df78b</anchor>
      <arglist>(const boost::serialization::nvp&lt; T &gt; &amp;t, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_override</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a37e59bc4fadd8ce3742c91c3f6b6f657</anchor>
      <arglist>(const boost::serialization::array&lt; T &gt; &amp;t, int)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_iarchive &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a6f49fadb4cfad5746d98b373f6dac4e8</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_iarchive &amp;</type>
      <name>operator&amp;</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a5221726471bfd3e201f1e0bd7a7823c2</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_binary</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>ab2c561e5cea8f6b7d6b12d694f16f001</anchor>
      <arglist>(void *address, std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_iarchive &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>acabc86bf17db110330e1a96c6425785b</anchor>
      <arglist>(T &amp;t, boost::mpl::true_)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_iarchive &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a2353df46d36eaa3fe529ba105fe282f3</anchor>
      <arglist>(T &amp;t, boost::mpl::false_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_array</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>ab7d65fef7a3fa5cdf903fb12ee30ef92</anchor>
      <arglist>(boost::serialization::array&lt; ValueType &gt; &amp;a, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArchiveSize</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__iarchive.html</anchorfile>
      <anchor>a480c1b292388c03bca39f778e18396df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::mqueue::binary_data_iarchive::use_array_optimization</name>
    <filename>structRTT_1_1mqueue_1_1binary__data__iarchive_1_1use__array__optimization.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::binary_data_oarchive</name>
    <filename>classRTT_1_1mqueue_1_1binary__data__oarchive.html</filename>
    <class kind="struct">RTT::mqueue::binary_data_oarchive::use_array_optimization</class>
    <member kind="typedef">
      <type>boost::mpl::bool_&lt; false &gt;</type>
      <name>is_loading</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>ab2967b2ab510db7839f22b412d95da13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mpl::bool_&lt; true &gt;</type>
      <name>is_saving</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a405a905d1b81fd064496102373be59aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>binary_data_oarchive</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a9be00c8b3d91c72d121ab46723d257bf</anchor>
      <arglist>(std::ostream &amp;os, bool do_save=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>binary_data_oarchive</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>ac0fcf5d83d042eae07983f4c5fafc985</anchor>
      <arglist>(std::streambuf &amp;sb, bool do_save=true)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_library_version</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a0b7bb8e1ad562a3cad9a9f2839d12f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const boost::archive::detail::basic_pointer_iserializer *</type>
      <name>register_type</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>acd7c7548121d6e96078501fe62f391b9</anchor>
      <arglist>(T *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_object</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>ae7fe0579a7dedb45e84c93af93f58196</anchor>
      <arglist>(const void *x, const boost::archive::detail::basic_oserializer &amp;bos)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_oarchive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a863705004ad0143a6c446674b4018324</anchor>
      <arglist>(T const &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_oarchive &amp;</type>
      <name>operator&amp;</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>ad1e23c6ad1ea9e16d6233d9914666597</anchor>
      <arglist>(T const &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_binary</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a429e3a7da029d1f1bf5fe281be20afa4</anchor>
      <arglist>(const void *address, std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_oarchive &amp;</type>
      <name>save_a_type</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a0c76c030a11b189ef4a76c90f8bfca87</anchor>
      <arglist>(T const &amp;t, boost::mpl::true_)</arglist>
    </member>
    <member kind="function">
      <type>binary_data_oarchive &amp;</type>
      <name>save_a_type</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a7bba059a2fd0fdbf3c00f3c731ba0dd2</anchor>
      <arglist>(T const &amp;t, boost::mpl::false_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_array</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a41dfcb95c8b04078d56e134195a80391</anchor>
      <arglist>(boost::serialization::array&lt; ValueType &gt; const &amp;a, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArchiveSize</name>
      <anchorfile>classRTT_1_1mqueue_1_1binary__data__oarchive.html</anchorfile>
      <anchor>a171e07b6aebffb9cad98ac1fb5de92d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::mqueue::binary_data_oarchive::use_array_optimization</name>
    <filename>structRTT_1_1mqueue_1_1binary__data__oarchive_1_1use__array__optimization.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::Dispatcher</name>
    <filename>classRTT_1_1mqueue_1_1Dispatcher.html</filename>
    <base>RTT::Activity</base>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1mqueue_1_1Dispatcher.html</anchorfile>
      <anchor>ae655bc525e368e153b36d9275eb0c7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1mqueue_1_1Dispatcher.html</anchorfile>
      <anchor>acc9a9ea14d577dfd8b11f5ceaee2ca91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1mqueue_1_1Dispatcher.html</anchorfile>
      <anchor>a5f8b2380de8ee28723acefffa9b9ce3b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::MQChannelElement</name>
    <filename>classRTT_1_1mqueue_1_1MQChannelElement.html</filename>
    <templarg>T</templarg>
    <base>RTT::base::ChannelElement</base>
    <base>RTT::mqueue::MQSendRecv</base>
    <member kind="function">
      <type></type>
      <name>MQChannelElement</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a82b2be0bface24331d63a678d3973b8b</anchor>
      <arglist>(base::PortInterface *port, types::TypeMarshaller const &amp;transport, const ConnPolicy &amp;policy, bool is_sender)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inputReady</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a5be071ead3000be6c082385cf9d887d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signal</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a17bec196982377f40a7691b1854d8586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FlowStatus</type>
      <name>read</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a6c2ffd366d9161f3e6087ad173adca60</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::reference_t sample, bool copy_old_data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a55fe940009876e637d6c4164eadbdf91</anchor>
      <arglist>(typename base::ChannelElement&lt; T &gt;::param_t sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoteElement</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a10bfcee86c4f172889c6e4faecfdfcc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteURI</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a63c1ccd3e23783738c942b72294f693a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getLocalURI</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a92de07aadda7043a8ce1b74ad33774ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getElementName</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQChannelElement.html</anchorfile>
      <anchor>a6014e7d5f669cf248922d7c943088c32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mqNewSample</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>af687da2ce172b3ed6869eb877e09a954</anchor>
      <arglist>(base::DataSourceBase::shared_ptr ds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mqReady</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a1131df7142246c91f3c6573471828908</anchor>
      <arglist>(base::DataSourceBase::shared_ptr ds, base::ChannelElementBase *chan)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mqRead</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>aef5a32dfa0c2034666a37826a48f7210</anchor>
      <arglist>(base::DataSourceBase::shared_ptr ds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mqWrite</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a6725c130af22d7abe1035e88fa1b6e44</anchor>
      <arglist>(base::DataSourceBase::shared_ptr ds)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>types::TypeMarshaller const &amp;</type>
      <name>mtransport</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>ae56e6832aae9920d4e74c1c71d75505c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>marshaller_cookie</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a12a0b2227bd4d9cccec2607227fecd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mqd_t</type>
      <name>mqdes</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a0f846d13e42728e2ee35c424d0963907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>buf</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a191d2d7bcc44bb99ba59f5a95c6be678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mis_sender</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a0df88d069c8752c4042d5a903d45182d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>minit_done</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a468417ba1e1f6a7dac18e1724f673cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_size</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a9aca65de383ce108853ebc43140f6e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mqname</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a66e319487b31e83d288038bebc80d30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mdata_size</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a29e3f05929bc35ed308ebfe9b30352fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::mqueue::MQLibPlugin</name>
    <filename>structRTT_1_1mqueue_1_1MQLibPlugin.html</filename>
    <base>RTT::types::TransportPlugin</base>
    <base>RTT::types::TransportPlugin</base>
    <member kind="function">
      <type>bool</type>
      <name>registerTransport</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>a9e132fd3920b3149d51a3fd022ff4284</anchor>
      <arglist>(std::string name, RTT::types::TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTransportName</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>acb10c6697ea9ff2841065e8d5303385d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypekitName</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>ac0584c352384e14bdfebc4ac6739765c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>a52b3dd7394ef7422dbd37d9a7dba8d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerTransport</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>a9e132fd3920b3149d51a3fd022ff4284</anchor>
      <arglist>(std::string name, RTT::types::TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTransportName</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>acb10c6697ea9ff2841065e8d5303385d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypekitName</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>ac0584c352384e14bdfebc4ac6739765c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>structRTT_1_1mqueue_1_1MQLibPlugin.html</anchorfile>
      <anchor>a52b3dd7394ef7422dbd37d9a7dba8d05</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::MQSendRecv</name>
    <filename>classRTT_1_1mqueue_1_1MQSendRecv.html</filename>
    <member kind="function">
      <type></type>
      <name>MQSendRecv</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQSendRecv.html</anchorfile>
      <anchor>a556afac2c97768838168e1ee827c0b07</anchor>
      <arglist>(types::TypeMarshaller const &amp;transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::MQTemplateProtocol</name>
    <filename>classRTT_1_1mqueue_1_1MQTemplateProtocol.html</filename>
    <templarg></templarg>
    <base>RTT::mqueue::MQTemplateProtocolBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocol.html</anchorfile>
      <anchor>a873c4603157dae609d19c86f94bdf447</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocol.html</anchorfile>
      <anchor>acefe05d33b157639f2a35084e42c07a4</anchor>
      <arglist>(!boost::has_virtual_destructor&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; void const *, int &gt;</type>
      <name>fillBlob</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocol.html</anchorfile>
      <anchor>a25a6a74fccb365b56d3672e1e335a8bc</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, void *blob, int size, void *cookie) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateFromBlob</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocol.html</anchorfile>
      <anchor>a43e4b8050f17d06f7eeba745536991b0</anchor>
      <arglist>(const void *blob, int size, base::DataSourceBase::shared_ptr target, void *cookie) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSampleSize</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocol.html</anchorfile>
      <anchor>a9d04af1b915f897afd5b223b725c5df4</anchor>
      <arglist>(base::DataSourceBase::shared_ptr ignored, void *cookie) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocolBase.html</anchorfile>
      <anchor>afb044ae47a45b3de1ab61d62c1f850c3</anchor>
      <arglist>(base::PortInterface *port, const ConnPolicy &amp;policy, bool is_sender) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>createCookie</name>
      <anchorfile>classRTT_1_1types_1_1TypeMarshaller.html</anchorfile>
      <anchor>ac5c6b4636ec30781b85facbe7444a15e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteCookie</name>
      <anchorfile>classRTT_1_1types_1_1TypeMarshaller.html</anchorfile>
      <anchor>a32fdcfe926db0446abe001cd2e55323e</anchor>
      <arglist>(void *cookie) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::mqueue::MQTemplateProtocolBase</name>
    <filename>classRTT_1_1mqueue_1_1MQTemplateProtocolBase.html</filename>
    <templarg></templarg>
    <base>RTT::types::TypeMarshaller</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1mqueue_1_1MQTemplateProtocolBase.html</anchorfile>
      <anchor>a4b49a2092f9134e7b5414d06402b09b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; void const *, int &gt;</type>
      <name>fillBlob</name>
      <anchorfile>classRTT_1_1types_1_1TypeMarshaller.html</anchorfile>
      <anchor>acb946c48dd52e635847105bccdcc0234</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, void *blob, int size, void *cookie=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateFromBlob</name>
      <anchorfile>classRTT_1_1types_1_1TypeMarshaller.html</anchorfile>
      <anchor>aa35cc5d6eaa9d60cd0bf24e73590c622</anchor>
      <arglist>(const void *blob, int size, base::DataSourceBase::shared_ptr target, void *cookie=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getSampleSize</name>
      <anchorfile>classRTT_1_1types_1_1TypeMarshaller.html</anchorfile>
      <anchor>a0aabb6cb6611806502df0752c83cdf72</anchor>
      <arglist>(base::DataSourceBase::shared_ptr sample, void *cookie=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::os</name>
    <filename>namespaceRTT_1_1os.html</filename>
    <class kind="class">RTT::os::AtomicInt</class>
    <class kind="class">RTT::os::Condition</class>
    <class kind="class">RTT::os::MainThread</class>
    <class kind="class">RTT::os::MutexInterface</class>
    <class kind="class">RTT::os::Mutex</class>
    <class kind="class">RTT::os::MutexRecursive</class>
    <class kind="class">RTT::os::MutexLock</class>
    <class kind="class">RTT::os::MutexTryLock</class>
    <class kind="class">RTT::os::MutexTimedLock</class>
    <class kind="class">RTT::os::local_allocator</class>
    <class kind="class">RTT::os::rt_allocator</class>
    <class kind="struct">RTT::os::rt_list</class>
    <class kind="class">RTT::os::streambufs</class>
    <class kind="class">RTT::os::stringbufs</class>
    <class kind="class">RTT::os::basic_streams</class>
    <class kind="class">RTT::os::basic_istreams</class>
    <class kind="class">RTT::os::basic_ostreams</class>
    <class kind="class">RTT::os::basic_iostreams</class>
    <class kind="class">RTT::os::printstream</class>
    <class kind="class">RTT::os::stringstreams</class>
    <class kind="class">RTT::os::Semaphore</class>
    <class kind="class">RTT::os::StartStopManager</class>
    <class kind="struct">RTT::os::InitFunction</class>
    <class kind="struct">RTT::os::CleanupFunction</class>
    <class kind="class">RTT::os::Thread</class>
    <class kind="class">RTT::os::ThreadInterface</class>
    <class kind="class">RTT::os::Timer</class>
    <class kind="class">RTT::os::TimeService</class>
    <member kind="function">
      <type>bool</type>
      <name>CAS</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ab0b670c83a99f4708ee795641439792c</anchor>
      <arglist>(volatile T *addr, const V &amp;expected, const W &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_create_main</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>aa319232bbd7d78d759935b24f8bbb0cb</anchor>
      <arglist>(RTOS_TASK *main_task)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_delete_main</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>acd19e0cae31ab63a81fad180b3bdd0cb</anchor>
      <arglist>(RTOS_TASK *main_task)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_create</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a8efad6db6f063c77b485752566d077b4</anchor>
      <arglist>(RTOS_TASK *task, int priority, unsigned cpu_affinity, const char *name, int sched_type, size_t stack_size, void *(*start_routine)(void *), ThreadInterface *obj)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL void</type>
      <name>rtos_task_yield</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a1747cd3054d03590167081addcdb31d2</anchor>
      <arglist>(RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL void</type>
      <name>rtos_task_make_periodic</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ab54481e0c77bd488ff10d09e9819a3f6</anchor>
      <arglist>(RTOS_TASK *mytask, NANO_TIME nanosecs)</arglist>
    </member>
    <member kind="function">
      <type>INTERNAL_QUAL int</type>
      <name>rtos_task_check_priority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a0e8344bb99f804040e197a841a141776</anchor>
      <arglist>(int *sched_type, int *priority)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rtos_task_get_pid</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a5f2df2e67170d279a3b073f9d992b014</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_set_scheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a602ffa710e4c011f181051f7480e6a44</anchor>
      <arglist>(RTOS_TASK *t, int sched_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_get_scheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a8d3bbd67c2625e757221f0d7ed61ba8b</anchor>
      <arglist>(const RTOS_TASK *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_task_set_period</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>aed049c50d4196acb7e8fd18173f17a5a</anchor>
      <arglist>(RTOS_TASK *mytask, NANO_TIME nanosecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_task_set_wait_period_policy</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ac1ccb6a3b312871524744cba9872fe6e</anchor>
      <arglist>(RTOS_TASK *task, int policy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_wait_period</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>adbb2de6b7e0f9b404d92162095511528</anchor>
      <arglist>(RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rtos_task_delete</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ad70c7f423aab28b0d75cf4d124f4b2b3</anchor>
      <arglist>(RTOS_TASK *mytask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_check_scheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a10cd773604c82f6bd44adbd91a6d7ac5</anchor>
      <arglist>(int *sched_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_set_priority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a9473decdf2a1119eeba68486701e61b7</anchor>
      <arglist>(RTOS_TASK *task, int priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_get_priority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a2d1e79384fef5400db0cc6d3f8b2a621</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_set_cpu_affinity</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a8cca55292cd209cd35936a92a0fc7ede</anchor>
      <arglist>(RTOS_TASK *task, unsigned cpu_affinity)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>rtos_task_get_cpu_affinity</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a1eafae3a1b7a4151fc63bcf64f939861</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>rtos_task_get_name</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a72a4a1e7cfe5a457476e9308c76c8a7c</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rtos_task_is_self</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a05b4c086c593b54c5b81b83d525fe20d</anchor>
      <arglist>(const RTOS_TASK *task)</arglist>
    </member>
    <member kind="function">
      <type>basic_ostreams &amp;</type>
      <name>endl</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a336aa8fb4f6d18c6f78913d81c8e133d</anchor>
      <arglist>(basic_ostreams &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>thread_function</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ae5c55f71daad6ab2b1cdf1252a259ffe</anchor>
      <arglist>(void *t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckScheduler</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a91acc22431452ba3f8b6b177b40bb088</anchor>
      <arglist>(int &amp;sched_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckPriority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>af5d0eebf0c77db458a1e73fb9fae7e9b</anchor>
      <arglist>(int &amp;sched_type, int &amp;priority)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LowestPriority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a75db7ced70acfd4beac6b7dcc96396b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HighestPriority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a0bb8c7d9c2d1bab2e81f62b251c9c8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>IncreasePriority</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>a31169e5cbdce6a160c8b13f69d950310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>printstream</type>
      <name>cout</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>aecdc266f16fa25fd32d79ec7e977a933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AtomicInt</type>
      <name>threads</name>
      <anchorfile>namespaceRTT_1_1os.html</anchorfile>
      <anchor>ae6e8bb6fecf005ff4ecf3b57db4b26c8</anchor>
      <arglist>(0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::AtomicInt</name>
    <filename>classRTT_1_1os_1_1AtomicInt.html</filename>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classRTT_1_1os_1_1AtomicInt.html</anchorfile>
      <anchor>a278817ee29aed7c546d141ce7a873807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classRTT_1_1os_1_1AtomicInt.html</anchorfile>
      <anchor>ac24d9d13aeabbbaa8807c475a247f099</anchor>
      <arglist>(int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::Condition</name>
    <filename>classRTT_1_1os_1_1Condition.html</filename>
    <member kind="function">
      <type></type>
      <name>Condition</name>
      <anchorfile>classRTT_1_1os_1_1Condition.html</anchorfile>
      <anchor>aa6c10d0b46292e317076b5ab89e6fa56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Condition</name>
      <anchorfile>classRTT_1_1os_1_1Condition.html</anchorfile>
      <anchor>ac2344c51c3cd8d52a292a483ae2b6bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classRTT_1_1os_1_1Condition.html</anchorfile>
      <anchor>a6c63f6f6eb2971b2b9482e5e3aa6fd53</anchor>
      <arglist>(Mutex &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classRTT_1_1os_1_1Condition.html</anchorfile>
      <anchor>ac84badb1a8000d35035d6d97fd87eb14</anchor>
      <arglist>(Mutex &amp;m, Predicate &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>classRTT_1_1os_1_1Condition.html</anchorfile>
      <anchor>a5da8419ebf008795e415e9f044225476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait_until</name>
      <anchorfile>classRTT_1_1os_1_1Condition.html</anchorfile>
      <anchor>a9001cfb9f6642e6168117bc88885d4da</anchor>
      <arglist>(Mutex &amp;m, nsecs abs_time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::MainThread</name>
    <filename>classRTT_1_1os_1_1MainThread.html</filename>
    <base>RTT::os::ThreadInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>ad0031894ba924be690f9a4de79ce0687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a84f1c70762ba203cb2a02219fc3064e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a28b67bbfcdbbf698f7d04eafc2414d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a2335f6196650900c280d967b29a21b80</anchor>
      <arglist>(Seconds period)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual nsecs</type>
      <name>getPeriodNS</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>af2e01f4dfb685f61f12ee781ed5d8a4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>aacce99adbc39941a75d29dd026ffb4c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a21c549b352c49902f26fc4e1c782d793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a6860a18d036b28ca8769f388533a2634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTOS_TASK *</type>
      <name>getTask</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a169daea0cd8577045e36dbcf772e7ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RTOS_TASK *</type>
      <name>getTask</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a93c1f84349499f248a18b6c008bd04aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setScheduler</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a467ff43eb46b8ed80db65b2cc9fabb4a</anchor>
      <arglist>(int sched_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getScheduler</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>ac28b736ae2b92a2cde1fb77b16756ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPriority</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a77870a40c3f6b85c7aa5322501853a71</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a7dec1a1a45022d09c0d226527a03437c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPid</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a433b55eed631c0747aed5dfa20319abb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWaitPeriodPolicy</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a066ec5f59c01e754ae1bddbd45739295</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>ae9d5f2e6886b9cc9d095e36133bbd083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>threadNumber</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a2177721993d6693e5a24446dd30af585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadInterface *</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>aea2ffbfc1774c1704a4b467037eec45f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1os_1_1MainThread.html</anchorfile>
      <anchor>a024eeabfcf32382ddc2d4969094a326e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::MutexInterface</name>
    <filename>classRTT_1_1os_1_1MutexInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::os::Mutex</name>
    <filename>classRTT_1_1os_1_1Mutex.html</filename>
    <base>RTT::os::MutexInterface</base>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classRTT_1_1os_1_1Mutex.html</anchorfile>
      <anchor>aec99f92bf7f01b6c25842437ac3dc037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mutex</name>
      <anchorfile>classRTT_1_1os_1_1Mutex.html</anchorfile>
      <anchor>af9570de9397110ecdc8cc9b8eca2e833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trylock</name>
      <anchorfile>classRTT_1_1os_1_1Mutex.html</anchorfile>
      <anchor>a512fd3946fa673c0e0822c5e7d40064f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>timedlock</name>
      <anchorfile>classRTT_1_1os_1_1Mutex.html</anchorfile>
      <anchor>af4d12bffcf0440f29a0b24ec47ba9998</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::MutexRecursive</name>
    <filename>classRTT_1_1os_1_1MutexRecursive.html</filename>
    <base>RTT::os::MutexInterface</base>
    <member kind="function">
      <type></type>
      <name>MutexRecursive</name>
      <anchorfile>classRTT_1_1os_1_1MutexRecursive.html</anchorfile>
      <anchor>a7ae41348823c11d24c088ef89fd453a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MutexRecursive</name>
      <anchorfile>classRTT_1_1os_1_1MutexRecursive.html</anchorfile>
      <anchor>aca1169b344c686e429b2ca748d0f8410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trylock</name>
      <anchorfile>classRTT_1_1os_1_1MutexRecursive.html</anchorfile>
      <anchor>ae5068ded7c88f1af43f2e3b834bd3590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>timedlock</name>
      <anchorfile>classRTT_1_1os_1_1MutexRecursive.html</anchorfile>
      <anchor>a36a384b9712981cef800cdbbe8614838</anchor>
      <arglist>(Seconds s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::MutexLock</name>
    <filename>classRTT_1_1os_1_1MutexLock.html</filename>
    <member kind="function">
      <type></type>
      <name>MutexLock</name>
      <anchorfile>classRTT_1_1os_1_1MutexLock.html</anchorfile>
      <anchor>a6b908e3c2d43b9f4d2f4c4229ff15de8</anchor>
      <arglist>(MutexInterface &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutexLock</name>
      <anchorfile>classRTT_1_1os_1_1MutexLock.html</anchorfile>
      <anchor>ae02a3b5d9bb759468e7ad4045a999178</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::MutexTryLock</name>
    <filename>classRTT_1_1os_1_1MutexTryLock.html</filename>
    <member kind="function">
      <type></type>
      <name>MutexTryLock</name>
      <anchorfile>classRTT_1_1os_1_1MutexTryLock.html</anchorfile>
      <anchor>a4030b78560b5b3fea2d429d61b44c6d0</anchor>
      <arglist>(MutexInterface &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSuccessful</name>
      <anchorfile>classRTT_1_1os_1_1MutexTryLock.html</anchorfile>
      <anchor>a47a13b399ada815a6d36a7e4c7ab1a04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutexTryLock</name>
      <anchorfile>classRTT_1_1os_1_1MutexTryLock.html</anchorfile>
      <anchor>a5f85d88aeee193bdcbbbfd0135addb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MutexInterface *</type>
      <name>_mutex</name>
      <anchorfile>classRTT_1_1os_1_1MutexTryLock.html</anchorfile>
      <anchor>a3159caa6487fdfc615a1729504ac9a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::MutexTimedLock</name>
    <filename>classRTT_1_1os_1_1MutexTimedLock.html</filename>
    <member kind="function">
      <type></type>
      <name>MutexTimedLock</name>
      <anchorfile>classRTT_1_1os_1_1MutexTimedLock.html</anchorfile>
      <anchor>af00ca1bc810c201509549d938e673cdf</anchor>
      <arglist>(MutexInterface &amp;mutex, Seconds timeout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSuccessful</name>
      <anchorfile>classRTT_1_1os_1_1MutexTimedLock.html</anchorfile>
      <anchor>a99ef5054a017fd7913d2acd4424945f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutexTimedLock</name>
      <anchorfile>classRTT_1_1os_1_1MutexTimedLock.html</anchorfile>
      <anchor>a20a4586875d83ba3dd1b5b1af4e41d70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MutexInterface *</type>
      <name>_mutex</name>
      <anchorfile>classRTT_1_1os_1_1MutexTimedLock.html</anchorfile>
      <anchor>a0423dd40c5c0e8c581db80d7325caa58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::local_allocator</name>
    <filename>classRTT_1_1os_1_1local__allocator.html</filename>
    <templarg>T</templarg>
    <templarg>Alloc</templarg>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classRTT_1_1os_1_1local__allocator.html</anchorfile>
      <anchor>aa2db108aa629d11d41d55b73dbb02f80</anchor>
      <arglist>(size_type n, const_pointer hint=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink</name>
      <anchorfile>classRTT_1_1os_1_1local__allocator.html</anchorfile>
      <anchor>aa5491239803d475780424a29fab1c56d</anchor>
      <arglist>(size_type n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::rt_allocator</name>
    <filename>classRTT_1_1os_1_1rt__allocator.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::os::rt_list</name>
    <filename>structRTT_1_1os_1_1rt__list.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>rt_grow</name>
      <anchorfile>structRTT_1_1os_1_1rt__list.html</anchorfile>
      <anchor>a616893645abb8a3372f9e5eb213fc86a</anchor>
      <arglist>(std::size_t items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_shrink</name>
      <anchorfile>structRTT_1_1os_1_1rt__list.html</anchorfile>
      <anchor>ae45cf7e57d4e5b338e3546055073d441</anchor>
      <arglist>(std::size_t items)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::streambufs</name>
    <filename>classRTT_1_1os_1_1streambufs.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::os::stringbufs</name>
    <filename>classRTT_1_1os_1_1stringbufs.html</filename>
    <base>RTT::os::streambufs</base>
  </compound>
  <compound kind="class">
    <name>RTT::os::basic_streams</name>
    <filename>classRTT_1_1os_1_1basic__streams.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::os::basic_istreams</name>
    <filename>classRTT_1_1os_1_1basic__istreams.html</filename>
    <base virtualness="virtual">RTT::os::basic_streams</base>
  </compound>
  <compound kind="class">
    <name>RTT::os::basic_ostreams</name>
    <filename>classRTT_1_1os_1_1basic__ostreams.html</filename>
    <base virtualness="virtual">RTT::os::basic_streams</base>
    <member kind="function">
      <type>basic_ostreams &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classRTT_1_1os_1_1basic__ostreams.html</anchorfile>
      <anchor>a888a9c06c92f0813b9cd3e1dad2dd472</anchor>
      <arglist>(int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::basic_iostreams</name>
    <filename>classRTT_1_1os_1_1basic__iostreams.html</filename>
    <base>RTT::os::basic_istreams</base>
    <base>RTT::os::basic_ostreams</base>
  </compound>
  <compound kind="class">
    <name>RTT::os::printstream</name>
    <filename>classRTT_1_1os_1_1printstream.html</filename>
    <base>RTT::os::basic_ostreams</base>
  </compound>
  <compound kind="class">
    <name>RTT::os::stringstreams</name>
    <filename>classRTT_1_1os_1_1stringstreams.html</filename>
    <base>RTT::os::basic_iostreams</base>
  </compound>
  <compound kind="class">
    <name>RTT::os::Semaphore</name>
    <filename>classRTT_1_1os_1_1Semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>Semaphore</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>a537164d221bb50d50798c8c2a5b8babf</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Semaphore</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>acbe6ab5f2bf41e122fb639fb3b02d07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>a606523f1996e806d489cdada84b3aa79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>abca82a1da819a4d19264eefb2805b23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trywait</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>a805375e0561af4478168bc6df96b319c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitUntil</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>a841946e02072fcb8710e04d2af7b0072</anchor>
      <arglist>(Seconds abs_time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitUntil</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>a9362178ac6312f24433a3326f97ff2cb</anchor>
      <arglist>(nsecs abs_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>value</name>
      <anchorfile>classRTT_1_1os_1_1Semaphore.html</anchorfile>
      <anchor>aa602f2d61a401033f270089338e8856e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::StartStopManager</name>
    <filename>classRTT_1_1os_1_1StartStopManager.html</filename>
    <member kind="function">
      <type>void</type>
      <name>startFunction</name>
      <anchorfile>classRTT_1_1os_1_1StartStopManager.html</anchorfile>
      <anchor>adfea50303adb9c56ba64053ce8c7c9e9</anchor>
      <arglist>(start_fun t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopFunction</name>
      <anchorfile>classRTT_1_1os_1_1StartStopManager.html</anchorfile>
      <anchor>a8e2a92b397df31e4bdde72c326b31738</anchor>
      <arglist>(stop_fun t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1os_1_1StartStopManager.html</anchorfile>
      <anchor>af5928c36f291a75d7f7dedd056f4df1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1os_1_1StartStopManager.html</anchorfile>
      <anchor>a023d76fa07c4d1c6ab87eccde8acc47c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::os::InitFunction</name>
    <filename>structRTT_1_1os_1_1InitFunction.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::os::CleanupFunction</name>
    <filename>structRTT_1_1os_1_1CleanupFunction.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::os::Thread</name>
    <filename>classRTT_1_1os_1_1Thread.html</filename>
    <base>RTT::os::ThreadInterface</base>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>a105c5739f2637b3c7a47b895343e20c1</anchor>
      <arglist>(int scheduler, int priority, double period, unsigned cpu_affinity, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>aa818917a1c75631736a079246328d9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ae0bb09587d00b05756967a99965920c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>af98c0f4547b9ad24aa1bc11ac0af96f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void *</type>
      <name>thread_function</name>
      <anchorfile>classRTT_1_1os_1_1Thread.html</anchorfile>
      <anchor>ad1a363e2bd376583a3ce973e080084fb</anchor>
      <arglist>(void *t)</arglist>
    </member>
    <docanchor file="classRTT_1_1os_1_1Thread" title="behavior">Periodic</docanchor>
    <docanchor file="classRTT_1_1os_1_1Thread" title="periodic behaviour">Non</docanchor>
    <docanchor file="classRTT_1_1os_1_1Thread" title=", priorities, schedulers and stack sizes">Periodicities</docanchor>
  </compound>
  <compound kind="class">
    <name>RTT::os::ThreadInterface</name>
    <filename>classRTT_1_1os_1_1ThreadInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ab765d02370a055cecb1d72eb7f3aa238</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a98597c76ec0c7fe2a75117242e9ef69a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Seconds</type>
      <name>getPeriod</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a800e278c9d8e32725c89da70814c3419</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPeriod</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>aa18297e789a806cf5d18fb41df887256</anchor>
      <arglist>(Seconds new_period)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual nsecs</type>
      <name>getPeriodNS</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>aca0568b8c2bfef6edfdb9c220ea22d1c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a59a983b1d3a0ae374a555890e24580e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ab1c555c69bb8a53681c163852af5ca69</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a21d1e14930cdc18b36b5122242b6aa14</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RTOS_TASK *</type>
      <name>getTask</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ab1d1abcb68728cd30853437905dfa6e5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RTOS_TASK *</type>
      <name>getTask</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ac5c8cc24649a8109d3584461c820dd46</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setScheduler</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a8d83a5959a80319f6b1a430ad7ef8963</anchor>
      <arglist>(int sched_type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getScheduler</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ac54032ab0bc786556f476b2a6121d143</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPriority</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a1769893d3b001a665ccbb494f9b9f2a6</anchor>
      <arglist>(int priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a2484021f1aa3c1b4cab6d8ab76472921</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getPid</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ace21c38e1a5dca14df53b95c05cb0b27</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWaitPeriodPolicy</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>a14584665c85d0217fbcd7b8510fc8716</anchor>
      <arglist>(int p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>classRTT_1_1os_1_1ThreadInterface.html</anchorfile>
      <anchor>ad241b1ba9de51462ffdbcf043dae68b7</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::Timer</name>
    <filename>classRTT_1_1os_1_1Timer.html</filename>
    <base>RTT::base::RunnableInterface</base>
    <member kind="typedef">
      <type>int</type>
      <name>TimerId</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>af40115442f2f261296ab9e8f270317ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a8538a80e574baa2c0d150ec97a92d9ee</anchor>
      <arglist>(TimerId max_timers, int scheduler=-1, int priority=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>timeout</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a8e2f92009c78fa7f734a6e06ca6bf97e</anchor>
      <arglist>(TimerId timer_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxTimers</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a93711c391b98e1a602ffc9a29e4119d2</anchor>
      <arglist>(TimerId max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startTimer</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a8f79f2345416de593f91df8c908dac90</anchor>
      <arglist>(TimerId timer_id, Seconds period)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arm</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a4ae9fe0cce076bfbf7c6ae4345d9327b</anchor>
      <arglist>(TimerId timer_id, Seconds wait_time)</arglist>
    </member>
    <member kind="function">
      <type>TimeService::Seconds</type>
      <name>timeRemaining</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>ab8130920f19dbb7ebf190a2834455134</anchor>
      <arglist>(TimerId timer_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArmed</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a5f4c6af23b66acdbaa96f1f54130f54d</anchor>
      <arglist>(TimerId timer_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>killTimer</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>abe2fe753bebb97102d899a45d02e19ac</anchor>
      <arglist>(TimerId timer_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitFor</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>ae9ee7f93fc4d75399db85aefb9998c60</anchor>
      <arglist>(RTT::os::Timer::TimerId id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForUntil</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>acf5c802d3faa9f3f6b8d700b8b3ddf43</anchor>
      <arglist>(RTT::os::Timer::TimerId id, nsecs abs_time)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; TimerInfo &gt;</type>
      <name>TimerIds</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>aaf02e89f4fb03702b2979dd699edde40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>a2606193d96db504b4b52df3dcb8d631b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>abfc2e3a95a863e1105e05b983f23f50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>step</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>ab5d7104ef70085ddf0880cf429a540f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loop</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>adfbcfa7d6da2bc548f6a4f5275caf0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>breakLoop</name>
      <anchorfile>classRTT_1_1os_1_1Timer.html</anchorfile>
      <anchor>ac7278dc8d64e602d5981d8d268dbcde4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::os::TimeService</name>
    <filename>classRTT_1_1os_1_1TimeService.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Seconds</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a6a81b0776c820895f3b0c4184f83eedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>secs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>ab0b36f62c5f5de4f6488e02b7c0555c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>msecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a8cea66f6cb3a7a8da0442e7b25876bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>usecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a0d565873d799a772d18fa4129e6bd983</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>nsecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>accd937aad8cd6db7c1752dc1d70809cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>ticks</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a2e8960143216d66ea753fe4d8fa7e962</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeService</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a50a6012f409032056f89e7ad44f691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ticks</type>
      <name>ticksGet</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a56a9c6d556021dc33103e19f0727abb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ticks</type>
      <name>getTicks</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a15e124e676084af02be37d75cc2bc6a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ticks</type>
      <name>ticksGet</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>acd9aaf5fb325e9060283285c82c8c91a</anchor>
      <arglist>(ticks &amp;relativeTime) const </arglist>
    </member>
    <member kind="function">
      <type>ticks</type>
      <name>getTicks</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a58cadaf98dd80dc257557e919105021e</anchor>
      <arglist>(ticks &amp;relativeTime) const </arglist>
    </member>
    <member kind="function">
      <type>ticks</type>
      <name>ticksSince</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a65679ad48f6d2ecb8cb77ab7966efbb6</anchor>
      <arglist>(ticks relativeTime) const </arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>secondsGet</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>afff29ce8c8fb003156c4ce0554139374</anchor>
      <arglist>(ticks &amp;relativeTime) const </arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>getSeconds</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a6ebcc623d670e2de26121c2945cc948f</anchor>
      <arglist>(ticks &amp;relativeTime) const </arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>secondsSince</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>aa0b69f005e53b55319a1057877eeb5fe</anchor>
      <arglist>(ticks relativeTime) const </arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>secondsChange</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>abb250e01887a0bdbcdd0b5259228ec1c</anchor>
      <arglist>(Seconds delta)</arglist>
    </member>
    <member kind="function">
      <type>ticks</type>
      <name>ticksChange</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a8c74e294b87fc39efa710d012784fec7</anchor>
      <arglist>(ticks delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSystemClock</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a6c1a48136c60160007de4d5c58db1d7e</anchor>
      <arglist>(bool yes_no)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>systemClockEnabled</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>ad395a55ed214178f72e539dcef257d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>nsecs</type>
      <name>getNSecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>ae3e907b43d53335bb659743095e505a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>nsecs</type>
      <name>getNSecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>aed70ca8986f16857bd2914351796459a</anchor>
      <arglist>(nsecs &amp;relativeTime) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>aad9d681804d7358311fbc7f72a7b9ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ticks</type>
      <name>nsecs2ticks</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>afe54683fe68e9b54973f560d57925c16</anchor>
      <arglist>(const nsecs m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static nsecs</type>
      <name>ticks2nsecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a68c14598d153b60b9beb4a011bedcf2e</anchor>
      <arglist>(const ticks t)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ticks</type>
      <name>InfiniteTicks</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a80d2ce14c11196fbbf8a18def3f2666b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const nsecs</type>
      <name>InfiniteNSecs</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a41a6b60f87487e8a97f679bf661199af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Seconds</type>
      <name>InfiniteSeconds</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>a63e756e3702f40dd9361e46bc8cbbd5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeService</name>
      <anchorfile>classRTT_1_1os_1_1TimeService.html</anchorfile>
      <anchor>ae62da62d1f1c0b6705c22eb4f23bc30e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RTT::plugin</name>
    <filename>namespaceRTT_1_1plugin.html</filename>
    <class kind="class">RTT::plugin::PluginLoader</class>
  </compound>
  <compound kind="class">
    <name>RTT::plugin::PluginLoader</name>
    <filename>classRTT_1_1plugin_1_1PluginLoader.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>loadLibrary</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a67325eae7633200f7b510f0d41f72e8d</anchor>
      <arglist>(std::string const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadTypekits</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a3003d30d9ce0ac91427e07da8c025883</anchor>
      <arglist>(std::string const &amp;path_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadTypekit</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>afa6666a89501ce2295a5d2ada5a2365c</anchor>
      <arglist>(std::string const &amp;name, std::string const &amp;path_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPlugins</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a2e1c39d1a0233849ef217252026409dc</anchor>
      <arglist>(std::string const &amp;path_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>aceed0d2e7845869dbb66d21b55cbc4d2</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPlugin</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a99cf69732d9c7aa6aa518a43d5b7e648</anchor>
      <arglist>(std::string const &amp;name, std::string const &amp;path_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadService</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a5890211035d0bacdedcd81a0067a8397</anchor>
      <arglist>(std::string const &amp;servicename, TaskContext *tc)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>listServices</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>aa67c8086d497d2a130c56561786b2ff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>listPlugins</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a9f7579ebe787d63523a05659d80f0b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>listTypekits</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a5b17168a60dde55d7da4fe0a960abe8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginPath</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>ad72fadb21014f7692592e6ac840783b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPluginPath</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a9866f047104c34033d70c2c57181fcc3</anchor>
      <arglist>(std::string const &amp;newpath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::shared_ptr&lt; PluginLoader &gt;</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>a0dd68434e280e0112ef3d8646b12e941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1plugin_1_1PluginLoader.html</anchorfile>
      <anchor>ad6a74611da438d3026a3def0db02b61d</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classRTT_1_1plugin_1_1PluginLoader" title="Plugin Paths">paths</docanchor>
  </compound>
  <compound kind="namespace">
    <name>RTT::scripting</name>
    <filename>namespaceRTT_1_1scripting.html</filename>
    <class kind="class">RTT::scripting::ArgumentsParser</class>
    <class kind="class">RTT::scripting::CallFunction</class>
    <class kind="class">RTT::scripting::CommandComposite</class>
    <class kind="class">RTT::scripting::CommandCounter</class>
    <class kind="struct">RTT::scripting::CommandDataSource</class>
    <class kind="struct">RTT::scripting::CommandDataSourceBool</class>
    <class kind="class">RTT::scripting::CommandFunction</class>
    <class kind="class">RTT::scripting::ConditionFunction</class>
    <class kind="class">RTT::scripting::CommandIllegal</class>
    <class kind="class">RTT::scripting::CommandNOP</class>
    <class kind="class">RTT::scripting::CommandString</class>
    <class kind="class">RTT::scripting::CommonParser</class>
    <class kind="class">RTT::scripting::ConditionBoolDataSource</class>
    <class kind="class">RTT::scripting::ConditionBoolProperty</class>
    <class kind="class">RTT::scripting::ConditionCache</class>
    <class kind="class">RTT::scripting::ConditionCompare</class>
    <class kind="class">RTT::scripting::ConditionBinaryCompositeAND</class>
    <class kind="class">RTT::scripting::ConditionDSDuration</class>
    <class kind="class">RTT::scripting::ConditionDuration</class>
    <class kind="class">RTT::scripting::ConditionExpire</class>
    <class kind="class">RTT::scripting::ConditionFalse</class>
    <class kind="class">RTT::scripting::ConditionInterface</class>
    <class kind="class">RTT::scripting::ConditionInvert</class>
    <class kind="class">RTT::scripting::ConditionOnce</class>
    <class kind="class">RTT::scripting::ConditionParser</class>
    <class kind="class">RTT::scripting::ConditionTrue</class>
    <class kind="class">RTT::scripting::DataSourceCondition</class>
    <class kind="class">RTT::scripting::DataSourceTime</class>
    <class kind="class">RTT::scripting::EdgeCondition</class>
    <class kind="class">RTT::scripting::DataCallParser</class>
    <class kind="class">RTT::scripting::ConstructorParser</class>
    <class kind="class">RTT::scripting::ExpressionParser</class>
    <class kind="class">RTT::scripting::FunctionFactory</class>
    <class kind="class">RTT::scripting::FunctionGraph</class>
    <class kind="class">RTT::scripting::FunctionGraphBuilder</class>
    <class kind="class">RTT::scripting::semantic_parse_exception</class>
    <class kind="class">RTT::scripting::fatal_syntactic_parse_exception</class>
    <class kind="class">RTT::scripting::fatal_semantic_parse_exception</class>
    <class kind="class">RTT::scripting::syntactic_parse_exception</class>
    <class kind="class">RTT::scripting::parse_exception_semantic_error</class>
    <class kind="class">RTT::scripting::parse_exception_fatal_semantic_error</class>
    <class kind="class">RTT::scripting::parse_exception_parser_fail</class>
    <class kind="class">RTT::scripting::parse_exception_syntactic_error</class>
    <class kind="class">RTT::scripting::ParsedStateMachine</class>
    <class kind="struct">RTT::scripting::eol_skip_functor</class>
    <class kind="class">RTT::scripting::Parser</class>
    <class kind="class">RTT::scripting::PeerParser</class>
    <class kind="class">RTT::scripting::program_load_exception</class>
    <class kind="class">RTT::scripting::program_unload_exception</class>
    <class kind="class">RTT::scripting::ProgramGraphParser</class>
    <class kind="class">RTT::scripting::ProgramInterface</class>
    <class kind="class">RTT::scripting::ProgramService</class>
    <class kind="class">RTT::scripting::PropertyParser</class>
    <class kind="class">RTT::scripting::ScriptingService</class>
    <class kind="class">RTT::scripting::ScriptParser</class>
    <class kind="class">RTT::scripting::SendHandleAlias</class>
    <class kind="class">RTT::scripting::StateDescription</class>
    <class kind="class">RTT::scripting::StateGraphParser</class>
    <class kind="class">RTT::scripting::StateInterface</class>
    <class kind="class">RTT::scripting::StateMachine</class>
    <class kind="class">RTT::scripting::StateMachineService</class>
    <class kind="class">RTT::scripting::StatementProcessor</class>
    <class kind="class">RTT::scripting::TryCommand</class>
    <class kind="class">RTT::scripting::TryCommandResult</class>
    <class kind="class">RTT::scripting::EvalCommand</class>
    <class kind="class">RTT::scripting::EvalCommandResult</class>
    <class kind="class">RTT::scripting::ValueChangeParser</class>
    <class kind="class">RTT::scripting::ValueParser</class>
    <class kind="class">RTT::scripting::VertexNode</class>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ArgumentsParser</name>
    <filename>classRTT_1_1scripting_1_1ArgumentsParser.html</filename>
    <member kind="function">
      <type></type>
      <name>ArgumentsParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ArgumentsParser.html</anchorfile>
      <anchor>a9ee694bb5129dcd12ba72b7dc5f7562c</anchor>
      <arglist>(ExpressionParser &amp;p, TaskContext *peer, Service::shared_ptr tobject, const std::string &amp;object, const std::string &amp;method)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::DataSourceBase::shared_ptr &gt;</type>
      <name>result</name>
      <anchorfile>classRTT_1_1scripting_1_1ArgumentsParser.html</anchorfile>
      <anchor>a6b4907d9c58732fe12f4f3ef4a7fecff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parsed</name>
      <anchorfile>classRTT_1_1scripting_1_1ArgumentsParser.html</anchorfile>
      <anchor>ace4aab049a5e2640f71ddaa110a52f0e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CallFunction</name>
    <filename>classRTT_1_1scripting_1_1CallFunction.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type></type>
      <name>CallFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>a3a81ef749442f2cfbe75ed82dacb96b8</anchor>
      <arglist>(base::ActionInterface *init_com, boost::shared_ptr&lt; ProgramInterface &gt; foo, ExecutionEngine *p, ExecutionEngine *caller, internal::AssignableDataSource&lt; ProgramInterface * &gt; *v=0, internal::AssignableDataSource&lt; bool &gt; *a=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>afb07fbc8d362bcef372364d241c39b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>a2eae3d09c2b1a0aa5a781cc8c0ba5507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valid</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>abdf5178529eb9291ef423f3e77b824b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>ad2de596d6e3f9146c4c7a393540e56c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>af88bf918f5c434900d61cf6657384b0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1CallFunction.html</anchorfile>
      <anchor>ab829dc27aea494f70a529a4aa93f8beb</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommandComposite</name>
    <filename>classRTT_1_1scripting_1_1CommandComposite.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type></type>
      <name>CommandComposite</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>acc6fd4d74dd252c7d31684ed111142b1</anchor>
      <arglist>(const CommandComposite &amp;orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>ace5e5df6e1a7fc6b8289b5ac23e0e46b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>a4150fe594a1bbc72d7728f6e8515755f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>ab846bc5ba750ff7cee69214e4313488e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>adf5e363d4571d6c50ad4ec3d6980efb3</anchor>
      <arglist>(base::ActionInterface *com)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>ad10d972932fd9318effc1cee95fd0031</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandComposite.html</anchorfile>
      <anchor>adc0c6761270c393876b39dbc18ba7d8a</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommandCounter</name>
    <filename>classRTT_1_1scripting_1_1CommandCounter.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandCounter.html</anchorfile>
      <anchor>ac8c834e1ffe86b1d9db3aff56854df11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandCounter.html</anchorfile>
      <anchor>aab33a9bc59b65fadd32482ee24fdfe6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandCounter.html</anchorfile>
      <anchor>a8e03413941b0bef1a0b268ef96b7c4fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCounter</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandCounter.html</anchorfile>
      <anchor>a632b604762d2d90c912fb53951048de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandCounter.html</anchorfile>
      <anchor>a8d4f2cf632270726e636bf12bd4bffb7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::scripting::CommandDataSource</name>
    <filename>structRTT_1_1scripting_1_1CommandDataSource.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSource.html</anchorfile>
      <anchor>a54fb31c9065a7090886bb308c1653bc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSource.html</anchorfile>
      <anchor>a320cb287d1e163e1fc810d5f255bd201</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSource.html</anchorfile>
      <anchor>a5e599728ec3b24ca2f159a5d9da721b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSource.html</anchorfile>
      <anchor>a060fe959b38f536fa0e81235207ebd43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>copy</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSource.html</anchorfile>
      <anchor>a0268de85e9fb52dba9ab21a59831f778</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::scripting::CommandDataSourceBool</name>
    <filename>structRTT_1_1scripting_1_1CommandDataSourceBool.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSourceBool.html</anchorfile>
      <anchor>ad54f43075c7aa928ba19b1f968a59ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSourceBool.html</anchorfile>
      <anchor>ac1e6f270fb5b61ddd013af1ec965672b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSourceBool.html</anchorfile>
      <anchor>aed2745ac53e40a6770161ae44ce38cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSourceBool.html</anchorfile>
      <anchor>a172b4dd612a1910916bcd1e2451acb4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>copy</name>
      <anchorfile>structRTT_1_1scripting_1_1CommandDataSourceBool.html</anchorfile>
      <anchor>a2f204e33813346579f544130ab3f9622</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommandFunction</name>
    <filename>classRTT_1_1scripting_1_1CommandFunction.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandFunction.html</anchorfile>
      <anchor>a123546075cc127212d05df375bffd55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandFunction.html</anchorfile>
      <anchor>ad9cd2e21cd03a834d42ae5cc6256b6d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommandFunction *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandFunction.html</anchorfile>
      <anchor>ae5e54bc60891ae0140d6edf366feac6a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionFunction</name>
    <filename>classRTT_1_1scripting_1_1ConditionFunction.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionFunction.html</anchorfile>
      <anchor>a60b819487a51565bda13d5d74cc494cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionFunction *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionFunction.html</anchorfile>
      <anchor>a623ca207d3edc83738ce4693f10d3f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInterface.html</anchorfile>
      <anchor>ad12c167e8bb2db100fb8ccc9738f5d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInterface.html</anchorfile>
      <anchor>af5c4a212c313e0ac16c950f740408a47</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommandIllegal</name>
    <filename>classRTT_1_1scripting_1_1CommandIllegal.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type></type>
      <name>CommandIllegal</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandIllegal.html</anchorfile>
      <anchor>a8aa916f5538fd3d29ec68032a4405a8f</anchor>
      <arglist>(const std::string &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommandIllegal</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandIllegal.html</anchorfile>
      <anchor>a74c5954b2412ec577566e2564554a785</anchor>
      <arglist>(const std::string &amp;cmd, const std::string &amp;descr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandIllegal.html</anchorfile>
      <anchor>ab1130569e884e1e40ce55058c3b890b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandIllegal.html</anchorfile>
      <anchor>a0b1eec9623b179f2601d0943d58f9204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>warn</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandIllegal.html</anchorfile>
      <anchor>ad6e7507e526825b1895cae4b034096ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandIllegal.html</anchorfile>
      <anchor>a7f04bccc8ae7e24d56bfe8edb8a67cdf</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommandNOP</name>
    <filename>classRTT_1_1scripting_1_1CommandNOP.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type></type>
      <name>CommandNOP</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandNOP.html</anchorfile>
      <anchor>a7ea28d3b1a1e4b6406d9ea1fb8f60b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandNOP.html</anchorfile>
      <anchor>ac7c0274ea83c62543664f727d29e86d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandNOP.html</anchorfile>
      <anchor>a71262bb8c93de75fe983af8684cead3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandNOP.html</anchorfile>
      <anchor>a6a261ccbd98eeff3bb7e5f71f830ed14</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommandString</name>
    <filename>classRTT_1_1scripting_1_1CommandString.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandString.html</anchorfile>
      <anchor>a8ed1fb2f44577eedf5f731f787733b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandString.html</anchorfile>
      <anchor>ac0d2f720ad6782bd912c87357662956e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1CommandString.html</anchorfile>
      <anchor>ada076db26a23662f86548e8055b24c6a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::CommonParser</name>
    <filename>classRTT_1_1scripting_1_1CommonParser.html</filename>
    <member kind="variable">
      <type>rule_t</type>
      <name>templ</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a52be1832a4204325fb35d4ba05470e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rule_t</type>
      <name>tidentifier</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a4a38dabda1847c5a6b3a34671201ab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rule_t</type>
      <name>notassertingidentifier</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>aece0c3c91054726d5e036b30127b94ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lexeme_rule_t</type>
      <name>lexeme_identifier</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>aa5992fdef63320e9ba2b8b08af2c0166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lexeme_rule_t</type>
      <name>lexeme_notassertingidentifier</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a4b003ee3c1a6c9f676082c13e3a806cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rule_t</type>
      <name>type_name</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>ad054aaff1abf7ad4b39f80e45e175eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rule_t</type>
      <name>eos</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a880a0b773052e78b2717a1f7ba10c684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rule_t</type>
      <name>notassertingeos</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a286dec31a5b2c81730b9b0c1fb9309c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lexeme_rule_t</type>
      <name>leos</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a11c7531e724713399b37cc106e5d0152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>skipeol</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>a886510ef7ca6c803eccf40763e854c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>functor_parser&lt; eol_skip_functor &gt;</type>
      <name>skipper</name>
      <anchorfile>classRTT_1_1scripting_1_1CommonParser.html</anchorfile>
      <anchor>adc6935a95051b82d7f4c4f71b3f31625</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionBoolDataSource</name>
    <filename>classRTT_1_1scripting_1_1ConditionBoolDataSource.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>ConditionBoolDataSource</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolDataSource.html</anchorfile>
      <anchor>ae6877eb5f4d4459ed77d241eb5557163</anchor>
      <arglist>(internal::DataSource&lt; bool &gt; *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolDataSource.html</anchorfile>
      <anchor>a1d2c31c91cb4aa15936cf835f2ab1abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionBoolDataSource *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolDataSource.html</anchorfile>
      <anchor>aa54074729d6e87b94184444593484a0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolDataSource.html</anchorfile>
      <anchor>aa1cd6a8ef60fbf276fe5b46e516e4d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionBoolDataSource *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolDataSource.html</anchorfile>
      <anchor>ac47e67e2ef41637662f2f0f9fa1f3303</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionBoolProperty</name>
    <filename>classRTT_1_1scripting_1_1ConditionBoolProperty.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolProperty.html</anchorfile>
      <anchor>afda7e2fbdb8f1713c863f772e4bb4e34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionBoolProperty *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBoolProperty.html</anchorfile>
      <anchor>a4eb2fde6df8b40b76f1f7c58d377ce6f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionCache</name>
    <filename>classRTT_1_1scripting_1_1ConditionCache.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCache.html</anchorfile>
      <anchor>a38658b6815d787b88f6005c9a8f8f96e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCache.html</anchorfile>
      <anchor>ae867c373c5b28d7cec48e7bde6429425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCache.html</anchorfile>
      <anchor>aecc8b8908c4ea79036017573149de4ca</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCache.html</anchorfile>
      <anchor>ad9be5542194215e4c22aa308e6381459</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionCompare</name>
    <filename>classRTT_1_1scripting_1_1ConditionCompare.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCompare.html</anchorfile>
      <anchor>a35e237affa0abe483a097e88c8d22d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConditionCompare *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCompare.html</anchorfile>
      <anchor>a20cd83b48fda025720c8ccd44493509e</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionCompare.html</anchorfile>
      <anchor>a22adf5c1d9112d17f2946b55f39839ad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionBinaryCompositeAND</name>
    <filename>classRTT_1_1scripting_1_1ConditionBinaryCompositeAND.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>ConditionBinaryCompositeAND</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBinaryCompositeAND.html</anchorfile>
      <anchor>ac926893666f806704bd97debaf1b6372</anchor>
      <arglist>(ConditionInterface *l, ConditionInterface *r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBinaryCompositeAND.html</anchorfile>
      <anchor>a5993e3b7de0281e6369866773037583f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConditionBinaryCompositeAND *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBinaryCompositeAND.html</anchorfile>
      <anchor>ab1b7a0499309dc19ff3f439b45544da5</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBinaryCompositeAND.html</anchorfile>
      <anchor>a30022ea3f1a2e6481f55f1a2cd3f46d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionBinaryCompositeAND.html</anchorfile>
      <anchor>a65899830f92dbb6263b0d8f2aa2cec28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionDSDuration</name>
    <filename>classRTT_1_1scripting_1_1ConditionDSDuration.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>ConditionDSDuration</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDSDuration.html</anchorfile>
      <anchor>a450d21811989b0fe20914ad51ce98e57</anchor>
      <arglist>(internal::DataSource&lt; double &gt;::shared_ptr ds, bool invert=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDSDuration.html</anchorfile>
      <anchor>a6b327137150946e4aa99a10aedadfc92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDSDuration.html</anchorfile>
      <anchor>a946f96e74748d3c8c4c646f5081dd1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDSDuration.html</anchorfile>
      <anchor>a6a82d7a4a96673e1af068116efb39ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDSDuration.html</anchorfile>
      <anchor>ada4f98e16b10d84e921203fa22309a36</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionDuration</name>
    <filename>classRTT_1_1scripting_1_1ConditionDuration.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>ConditionDuration</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDuration.html</anchorfile>
      <anchor>a98d01a30b55cf9c0b664d80c69055a94</anchor>
      <arglist>(nsecs t, bool invert=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDuration.html</anchorfile>
      <anchor>a25fd890887637c0327b152793f1996e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDuration.html</anchorfile>
      <anchor>a1e8dd951f52bd02a1fe399bfcd3c7819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionDuration.html</anchorfile>
      <anchor>a0f61a52618ea5589d438832900e27b28</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionExpire</name>
    <filename>classRTT_1_1scripting_1_1ConditionExpire.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>ConditionExpire</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionExpire.html</anchorfile>
      <anchor>a807c8e753e386361b7cb21ddb71416ce</anchor>
      <arglist>(ticks t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionExpire.html</anchorfile>
      <anchor>ad1895a4d19ba574e0026436de1ac05a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionExpire.html</anchorfile>
      <anchor>a5ed32f366935542d9a25e07c4fbb2759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionExpire.html</anchorfile>
      <anchor>a7374141e8720e5d9d3291cb04e1577bc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionFalse</name>
    <filename>classRTT_1_1scripting_1_1ConditionFalse.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionFalse.html</anchorfile>
      <anchor>a3a49f63d58284c31a35edbfe742f75b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionFalse.html</anchorfile>
      <anchor>aa96ea84f7089fcec585b71d1e4b66391</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionInterface</name>
    <filename>classRTT_1_1scripting_1_1ConditionInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInterface.html</anchorfile>
      <anchor>a23baaceee26d7191efd77111ebdc2ad9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInterface.html</anchorfile>
      <anchor>a51a71508ecee5a0d9e988df21dea0f3c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionInvert</name>
    <filename>classRTT_1_1scripting_1_1ConditionInvert.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInvert.html</anchorfile>
      <anchor>a913db88ddc875e6bd0e169c28bec40a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInvert.html</anchorfile>
      <anchor>a3a4154965f9f0bf7dab3f1fff06c6466</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionInvert.html</anchorfile>
      <anchor>a89d38619119e1bfdcbcb6cd3503bfb7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionOnce</name>
    <filename>classRTT_1_1scripting_1_1ConditionOnce.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>ConditionOnce</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionOnce.html</anchorfile>
      <anchor>a870fa8435db221278426ebd00ba67f21</anchor>
      <arglist>(bool what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionOnce.html</anchorfile>
      <anchor>acf5663c5c7559904d0802ed3cf345029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionOnce.html</anchorfile>
      <anchor>a97110853d88c546688c72457d81d4ef4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionOnce.html</anchorfile>
      <anchor>a8f09feeca85dfc578cb6455d8dcd6a01</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionParser</name>
    <filename>classRTT_1_1scripting_1_1ConditionParser.html</filename>
    <member kind="function">
      <type></type>
      <name>ConditionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionParser.html</anchorfile>
      <anchor>a68be8b8bdc85fd07c9329185ff279d0a</anchor>
      <arglist>(TaskContext *context, ExecutionEngine *caller, CommonParser &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>getParseResult</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionParser.html</anchorfile>
      <anchor>a164883e65f4a0c4170b3760ed634a8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; base::ActionInterface *, ConditionInterface * &gt;</type>
      <name>getParseResultAsCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionParser.html</anchorfile>
      <anchor>aa4d1aebc3e10aea90d544a83d9c8df55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConditionTrue</name>
    <filename>classRTT_1_1scripting_1_1ConditionTrue.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionTrue.html</anchorfile>
      <anchor>ac2ff76239230e7d54fc74d60945f2e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1ConditionTrue.html</anchorfile>
      <anchor>a32ee7fcf6827660403e86c91d7818486</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::DataSourceCondition</name>
    <filename>classRTT_1_1scripting_1_1DataSourceCondition.html</filename>
    <base>DataSource&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DataSourceCondition</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>ad1e27fd23440565d5b6b67acad9568f7</anchor>
      <arglist>(ConditionInterface *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>a9160fc23a465573da95de95e8dcb9b81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>value</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>a5aff6e9c159501276b448353701861bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool const &amp;</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>a323e8d4831fd68e21582c6d1417a5f6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>a1fe73d7a887c1b293009e38658d67405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataSourceCondition *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>aac81b32acc73d9cd5e39f7ec7e22651d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataSourceCondition *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceCondition.html</anchorfile>
      <anchor>a2c3cb72fbdaa5ccf89878714dbe556bd</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::DataSourceTime</name>
    <filename>classRTT_1_1scripting_1_1DataSourceTime.html</filename>
    <base>DataSource&lt; os::TimeService::Seconds &gt;</base>
    <member kind="typedef">
      <type>os::TimeService::Seconds</type>
      <name>value_t</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab7d4ab0d9eef6da77f667e26a14a5c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>os::TimeService::Seconds</type>
      <name>get</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceTime.html</anchorfile>
      <anchor>ab05a20cbf80f137b88d85a02852bbd75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>os::TimeService::Seconds</type>
      <name>value</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceTime.html</anchorfile>
      <anchor>ae2c5f942e99f2de3c55fa0d741a3dec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>os::TimeService::Seconds const &amp;</type>
      <name>rvalue</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceTime.html</anchorfile>
      <anchor>af86e8a9b1f8cfde39389b42c985d13fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceTime.html</anchorfile>
      <anchor>adaaafc66b880675edbc2df3dfb65c88e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataSourceTime *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceTime.html</anchorfile>
      <anchor>a8ca9f90e84bb1f39a7be8d06be7fe374</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSourceTime *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1DataSourceTime.html</anchorfile>
      <anchor>ae0e940f16aedd02eaef6cc1ebe40ae6f</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8d2a559b969c87e256a8f13386af7d91</anchor>
      <arglist>(!details::HasConst&lt; os::TimeService::Seconds &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>getRawConstPointer</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a6f83ec1433a0eab4a86c162ec15ee314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a3d52c8b009bce254b70582f7e6946b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a8ab3133e4c44e685c20cb0b89545d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const types::TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aef3a81aa4d70305b7ac4f9413db93b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aae5e9522e0119094179eebbf5db1cfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetType</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>ab2d384c8b26e1e8767530f6f819c8d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const types::TypeInfo *</type>
      <name>GetTypeInfo</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a1a51a524a26a2ecc57c6601a053864a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetTypeName</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>aba21a204dda5f619f0a49db240edd3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSource&lt; os::TimeService::Seconds &gt; *</type>
      <name>narrow</name>
      <anchorfile>classRTT_1_1internal_1_1DataSource.html</anchorfile>
      <anchor>a210243bf3e7a61884b0ace99aea8d823</anchor>
      <arglist>(base::DataSourceBase *db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::EdgeCondition</name>
    <filename>classRTT_1_1scripting_1_1EdgeCondition.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeCondition</name>
      <anchorfile>classRTT_1_1scripting_1_1EdgeCondition.html</anchorfile>
      <anchor>ac6340ce27c63749f145c1cf5c34525c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeCondition</name>
      <anchorfile>classRTT_1_1scripting_1_1EdgeCondition.html</anchorfile>
      <anchor>a38976c10ad2916616c097d989de704fd</anchor>
      <arglist>(ConditionInterface *cond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1EdgeCondition.html</anchorfile>
      <anchor>ab51ecb11bee6e22c6d08b89dca226950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1EdgeCondition.html</anchorfile>
      <anchor>a648bfc2f93640c68a58e76f172a64d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>getCondition</name>
      <anchorfile>classRTT_1_1scripting_1_1EdgeCondition.html</anchorfile>
      <anchor>a25185549e236cd8af982dbcfb0051722</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::DataCallParser</name>
    <filename>classRTT_1_1scripting_1_1DataCallParser.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ConstructorParser</name>
    <filename>classRTT_1_1scripting_1_1ConstructorParser.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ExpressionParser</name>
    <filename>classRTT_1_1scripting_1_1ExpressionParser.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; base::AttributeBase &gt;</type>
      <name>getHandle</name>
      <anchorfile>classRTT_1_1scripting_1_1ExpressionParser.html</anchorfile>
      <anchor>a4399601d970ac8c6043e4c6bd1d663c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::FunctionFactory</name>
    <filename>classRTT_1_1scripting_1_1FunctionFactory.html</filename>
    <base>RTT::OperationInterfacePart</base>
    <member kind="function">
      <type>std::string</type>
      <name>resultType</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a45c6c2b5cbbac75f9c51e5598e935ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>arity</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a84e089866aee0d723f1029bb23fa6225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>collectArity</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>ac77868efe141ca569eb34c6cc596d6db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getArgumentType</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a5024af7e29abb78874e8706741f371df</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>const types::TypeInfo *</type>
      <name>getCollectType</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a3d2a467c8e2cef40b0ddc464d66bbcd3</anchor>
      <arglist>(unsigned int arg) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a02c89af895b4604e7eb249e24a9d0eec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>ac9a80cd1b43e6d3ec205d6ac6323a83b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ArgumentDescription &gt;</type>
      <name>getArgumentList</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a29657a38fbb15d21abfb27fb1066c48b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produce</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>aa3e41ae1d5b025dad996f4adef904810</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produceHandle</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>aa88a750bcc61de0ffc49acc004d1fbf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produceSend</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a3951961a760bc3b06d742632af4a4b4c</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, ExecutionEngine *caller) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>produceCollect</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionFactory.html</anchorfile>
      <anchor>a6d63e83cb8ab216f7f770b1524f8c5d1</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args, internal::DataSource&lt; bool &gt;::shared_ptr blocking) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::FunctionGraph</name>
    <filename>classRTT_1_1scripting_1_1FunctionGraph.html</filename>
    <base>RTT::scripting::ProgramInterface</base>
    <member kind="function">
      <type></type>
      <name>FunctionGraph</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a38a3f879b6a6a964572b0b71099b9f7c</anchor>
      <arglist>(const std::string &amp;name, bool unload_on_stop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionGraph</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>af0ec2339ca6593e97234e605eb085ebf</anchor>
      <arglist>(const FunctionGraph &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgramService</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a4f21ceaa2b7e40060917c3361b5f9728</anchor>
      <arglist>(ServicePtr myservice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnloadOnStop</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a72d14afd76f9bdc04b89474dc01a89a1</anchor>
      <arglist>(bool unload_on_stop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>needsStart</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ac1f52a1a5ab4238dbffdae88b5e1f2f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ab55e1a9d81c204cbecee5447c5d1e7d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ad98ff399e80ee95626f01eeb28801ab3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a7293011e7230b8e0d05901dd052b10fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loading</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a6987d75afe39988f9b16867a4945b59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unloading</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ab278366b96add79a897d09f9787086ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a2348d716b70cef3b7b7c53f1bf68db00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pause</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a305a104dbe60a773cf37ff522540b2b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>step</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>aeb7a12ca4c93f652b68db3c052f84b94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a06e4afcfdfe4703cab9f6a1e1635c006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLineNumber</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a392b2fd326d09b63320bcefd8b6ee9a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ab09759aed0be126c76571733cf14f979</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionGraph *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a9222750ad8e54387b8d7dfd37afb0a90</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacementdss) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>aed4936693873642d75b4c0d45c20806c</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a960215672a15620b8efb167ef95cde34</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a1635699afd61898142bbbcde623feab0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::AttributeBase * &gt;</type>
      <name>getArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ab0dca915506416aa091944f902397b3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>getResult</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>aa8efdef575631305f9bb58272efbae7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResult</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>acbafd886bab50cc051b8479fbb52230a</anchor>
      <arglist>(base::AttributeBase *r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>abd8f1042bd015ee2e03b187cf95784b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>aac6e08f27bfd9a7ca9a484546bf33ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a9c08fc9a5decbc6284fae5369209f96c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a1a0ddce21a2d763ea8aece36d6804a68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inError</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a4b0e9ec8f91c4c5c0e078080c32aface</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status::ProgramStatus</type>
      <name>getStatus</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>aadcb5dc0a1008c6991da6a6f9251fc1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>program</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a81cec416b8668dea60b06a83102b5e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>a559c24d142f0e9b49a45e16d3839b7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_text</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>ab7c1359d964c3568b97c1e015432bc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::AttributeBase * &gt;</type>
      <name>args</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraph.html</anchorfile>
      <anchor>af0176eac52332ba555c520abf204a701</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::FunctionGraphBuilder</name>
    <filename>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</filename>
    <member kind="typedef">
      <type>FunctionGraph::Vertex</type>
      <name>CommandNode</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>aee899ffbb0c944b2b3a28a56bbe4f6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FunctionGraph::Edge</type>
      <name>ConditionEdge</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a030ce176a6991a21309feb99294faeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionGraphBuilder</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a84c1cd0810f342e9487aacaf91defde3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineNumber</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>ac5dc4da4eb5722dd9f59b0e68e742e14</anchor>
      <arglist>(int ln)</arglist>
    </member>
    <member kind="function">
      <type>FunctionGraphPtr</type>
      <name>startFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a4f9350f520cde56bfa65bf112c438fb7</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a011e904bc560deed93e08719be4e887c</anchor>
      <arglist>(ConditionInterface *cond, int line)</arglist>
    </member>
    <member kind="function">
      <type>FunctionGraphPtr</type>
      <name>endFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a83cd040ea906ba7ed869d26d41dae812</anchor>
      <arglist>(int line=0)</arglist>
    </member>
    <member kind="function">
      <type>FunctionGraphPtr</type>
      <name>getFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>aee4df34d47de15e7063a367621227695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>addCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a86aa1c643fb8b2d099ecd0eeb2b45206</anchor>
      <arglist>(ConditionInterface *cond, base::ActionInterface *com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConditionEdge</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>ac8e8dbff663c7eb7b05a4f690b334aa1</anchor>
      <arglist>(ConditionInterface *cond, CommandNode vert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeConditionEdge</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a09183f21fa4497d2811e4b488de65d4b</anchor>
      <arglist>(CommandNode vert, ConditionInterface *cond)</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>moveTo</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a1eb72ba68f88df43d8528ad41a4ddf0c</anchor>
      <arglist>(CommandNode _build, CommandNode _next, int linenr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>ab0416a1bfe404124282564bc6f772439</anchor>
      <arglist>(base::ActionInterface *comm)</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>getCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>ac66bffbf18c8625dca09e1498431b316</anchor>
      <arglist>(CommandNode cn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>accc0cf21a5f8a44713cdc66abb18f842</anchor>
      <arglist>(CommandNode vert, base::ActionInterface *comm)</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>appendFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a02219205635cfc131314af0ee63315b8</anchor>
      <arglist>(ConditionInterface *cond, FunctionGraphPtr fn, std::vector&lt; base::DataSourceBase::shared_ptr &gt; fnargs)</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>setFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a5885118185c8694013e17519a57b23d4</anchor>
      <arglist>(FunctionGraphPtr fn, std::vector&lt; base::DataSourceBase::shared_ptr &gt; fnargs)</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>proceedToNext</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>aa7eeca02a9d44629098996c0426635e2</anchor>
      <arglist>(int line_nr=0)</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>proceedToNext</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a2df06b838dd34edab1337087ec798fed</anchor>
      <arglist>(ConditionInterface *cond, int line_nr=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectToNext</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a08dc151ad26c101747590dd121915966</anchor>
      <arglist>(CommandNode v, ConditionInterface *cond)</arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>buildNode</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a297f4ff9d83f52a96cbb3cda3e90d4cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>buildEdges</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>aaaacb413519c115214672886c25b8396</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CommandNode</type>
      <name>nextNode</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>ae190470f29083e6f6454280a4b1d82a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>CommandNode</type>
      <name>build</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>a08417d65e43de3a3b488308a5845d308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CommandNode</type>
      <name>next</name>
      <anchorfile>classRTT_1_1scripting_1_1FunctionGraphBuilder.html</anchorfile>
      <anchor>aa2595513db92a0812f4e4722dcfb3fe7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::semantic_parse_exception</name>
    <filename>classRTT_1_1scripting_1_1semantic__parse__exception.html</filename>
    <base>RTT::parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::fatal_syntactic_parse_exception</name>
    <filename>classRTT_1_1scripting_1_1fatal__syntactic__parse__exception.html</filename>
    <base>RTT::parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::fatal_semantic_parse_exception</name>
    <filename>classRTT_1_1scripting_1_1fatal__semantic__parse__exception.html</filename>
    <base>RTT::parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::syntactic_parse_exception</name>
    <filename>classRTT_1_1scripting_1_1syntactic__parse__exception.html</filename>
    <base>RTT::parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::parse_exception_semantic_error</name>
    <filename>classRTT_1_1scripting_1_1parse__exception__semantic__error.html</filename>
    <base>RTT::scripting::semantic_parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::parse_exception_fatal_semantic_error</name>
    <filename>classRTT_1_1scripting_1_1parse__exception__fatal__semantic__error.html</filename>
    <base>RTT::scripting::fatal_semantic_parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::parse_exception_parser_fail</name>
    <filename>classRTT_1_1scripting_1_1parse__exception__parser__fail.html</filename>
    <base>RTT::parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::parse_exception_syntactic_error</name>
    <filename>classRTT_1_1scripting_1_1parse__exception__syntactic__error.html</filename>
    <base>RTT::scripting::syntactic_parse_exception</base>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ParsedStateMachine</name>
    <filename>classRTT_1_1scripting_1_1ParsedStateMachine.html</filename>
    <base>RTT::scripting::StateMachine</base>
    <member kind="function">
      <type>ParsedStateMachinePtr</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ParsedStateMachine.html</anchorfile>
      <anchor>acf5459aef5b705e80efde415f367f0b0</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacements, bool instantiate=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classRTT_1_1scripting_1_1ParsedStateMachine.html</anchorfile>
      <anchor>a77a45c6c6a46796cf0858dc83f0b5469</anchor>
      <arglist>(const std::string &amp;name, bool recursive)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classRTT_1_1scripting_1_1ParsedStateMachine.html</anchorfile>
      <anchor>ac63a8c7d416edaac0669bcdc3f397ab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classRTT_1_1scripting_1_1ParsedStateMachine.html</anchorfile>
      <anchor>a5c396b111d50c0d07e44c11beabb63b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a0accd1ae3aed9dcc774feb4f7bc7e27b</anchor>
      <arglist>(bool on_off)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ac4643bbc259c2d2f46e869d586614f2b</anchor>
      <arglist>(const std::string &amp;statename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>adfb20e2904c834a36ab74bf1905ed2ba</anchor>
      <arglist>(const std::string &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inStrictState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>adfbbca70f6e590f444e16b8fa48e91ac</anchor>
      <arglist>(const std::string &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getCurrentStateName</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a7c4f377eea28645c9641e01ca9501411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStrictlyActive</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>af6bf920e4a601cf8391621f5e19e27a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inInitialState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>adf1b14b5a588e5c114a516f41e9c0b8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inFinalState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a546e2eaabf3c7dfc86d659af1f6192b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepDone</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a4145908f3cd438cad38cc0d6ca86d664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>aec0fb552a9f91c34b75abecf9d5bfcc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a3beeafb780324212d617e5566dbac104</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inError</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ade1d3c92bb4225712600f49cbc3d9281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReactive</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a00d9ee8a609e7f1dbaebb6b7900a5205</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAutomatic</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ad74aaae5902ef49b883a2439842c6986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ae0eec7d628b53b7d619535c04b950b8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activate</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a5012840528310176ffa45d88e124e581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a1ddc30c18ded95bbf65f00bb56e871b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>step</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a3bb3c69e0ffd5eb4f24482f5254f0757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>automatic</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a32375cd2123d33e87bc57011196998dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a7c5df33a039c902730e68be336ee21df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ac009b04289095368719882c653a64f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>aa164d2bd4f0884f8fb1fda8d7a728cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reactive</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ae04e0ab4a877f8df6c99ffd09549f5e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deactivate</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a2ccad86d38165e07e56fb360bf02d81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>af0bdf9b380482a39182c8aeccf55dd57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loading</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a81e75bbc8e202a6d3cf9eb77a8ef6c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>requestNextState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a7f8c25da6ef0992ba1d379e814172256</anchor>
      <arglist>(bool stepping=false)</arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>requestNextStateStep</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a4192ae79de77859f9d05b4bfedb70024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestFinalState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a7a90c95313c6a6cb911ec0991d082cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestInitialState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ae4d769a3603df28fbc28ee94e8779591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>nextState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a28e4744fb7af043247ba046d7ad4213d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getStateList</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a0217f716829404555200df5f84e1b300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>getState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ab27a836a98edf088fc0fdbbaa094ce90</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Status::StateMachineStatus</type>
      <name>getStatus</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>abea101cfc6ec76edd7b953b64ec88b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStatusStr</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ad88e855d92892fd462ce6174013ae761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a004abf6c40ec450ffc042151f92bd7d6</anchor>
      <arglist>(StateInterface *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestStateChange</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a590e696ecd493047cd7e7c0dccd356b0</anchor>
      <arglist>(StateInterface *s_n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>executePending</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ad1057f37217d03984c5d53e80da1460c</anchor>
      <arglist>(bool stepping=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preconditionSet</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>aab3f8e415ea4065468c610c41f39120b</anchor>
      <arglist>(StateInterface *state, ConditionInterface *cnd, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transitionSet</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a1a03e7b496d5d54c0cfe5f91fbe85155</anchor>
      <arglist>(StateInterface *from, StateInterface *to, ConditionInterface *cnd, int priority, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transitionSet</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>aaff2efdde8c2f5693fa1421f70d42ea6</anchor>
      <arglist>(StateInterface *from, StateInterface *to, ConditionInterface *cnd, boost::shared_ptr&lt; ProgramInterface &gt; transprog, int priority, int line)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createEventTransition</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ac1c768db93ef41133a213c0e9703ca7b</anchor>
      <arglist>(ServicePtr sp, ExecutionEngine *target_engine, const std::string &amp;ename, std::vector&lt; base::DataSourceBase::shared_ptr &gt; args, StateInterface *from, StateInterface *to, ConditionInterface *guard, boost::shared_ptr&lt; ProgramInterface &gt; transprog, StateInterface *elseto=0, boost::shared_ptr&lt; ProgramInterface &gt; elseprog=boost::shared_ptr&lt; ProgramInterface &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ae4ce5291b73e57a723a253f58cb8a010</anchor>
      <arglist>(StateInterface *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinalState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a02d7909b6138c21bee49c60d3e07525a</anchor>
      <arglist>(StateInterface *s)</arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>currentState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a6a20b2fd3e620fc7f0c327e45599d390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProgramInterface *</type>
      <name>currentProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a694d7781935850e1486a79b3b4d1944f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>getInitialState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ab0d830457c32b5be1c7c08f600ac5590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateInterface *</type>
      <name>getFinalState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>af03dc53be269be3e7e1b9c20a02505e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ae914c55ca18125a827c84607a4bc83c1</anchor>
      <arglist>(base::ActionInterface *c)</arglist>
    </member>
    <member kind="function">
      <type>StateMachinePtr</type>
      <name>getParent</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a8c1232064ae9d85ad64850b145fcf7ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChildList &amp;</type>
      <name>getChildren</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a837c3082bab099b9159673189121fe88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a932b58b32c874eadcca3db2598f401f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineNumber</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>af372492f2452eb8d84839b2964875297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inTransition</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a9ac29013ae2f1fdacd3c5e359e850f75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>interruptible</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ad5be91bf313562068d4fcfbb6a7b9476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; boost::tuple&lt; ConditionInterface *, StateInterface *, int, int, boost::shared_ptr&lt; ProgramInterface &gt; &gt; &gt;</type>
      <name>TransList</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a77c3fa1aa2bc14ea857971753fb89715</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unloading</name>
      <anchorfile>classRTT_1_1scripting_1_1ParsedStateMachine.html</anchorfile>
      <anchor>a12a0126009f5f68809d09cc2bf525a58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransitionMap</type>
      <name>stateMap</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>ab5c1b02564ce9cc8c029fb24a3fb52ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PreConditionMap</type>
      <name>precondMap</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a6df11282089c03c7310f6a590f78b60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventMap</type>
      <name>eventMap</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>adf7e1b6bfc2e9a0d6984b5cc5e9a0ac9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::scripting::eol_skip_functor</name>
    <filename>structRTT_1_1scripting_1_1eol__skip__functor.html</filename>
    <member kind="function">
      <type></type>
      <name>eol_skip_functor</name>
      <anchorfile>structRTT_1_1scripting_1_1eol__skip__functor.html</anchorfile>
      <anchor>a825801288fc3815270cb6e493027c7d2</anchor>
      <arglist>(bool &amp;skipref)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::Parser</name>
    <filename>classRTT_1_1scripting_1_1Parser.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; ProgramInterfacePtr &gt;</type>
      <name>ParsedFunctions</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a829bed32ac6bc32ce7a8a47cd50a8865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ProgramInterfacePtr &gt;</type>
      <name>ParsedPrograms</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a4857d2b081a1e26efd00c42a876d15bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ParsedStateMachinePtr &gt;</type>
      <name>ParsedStateMachines</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a9973cf46ef3f91d8ec97d689e0521aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parser</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>ab717f097560cd46458a2149f9b367258</anchor>
      <arglist>(ExecutionEngine *caller=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runScript</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>ae4f311d6961c3a784a64ba6dcb610999</anchor>
      <arglist>(std::string const &amp;code, TaskContext *mowner, ScriptingService *service, std::string const &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>ParsedFunctions</type>
      <name>parseFunction</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a7576e8802fbf640cef1c2455c9d17783</anchor>
      <arglist>(const std::string &amp;s, TaskContext *, const std::string &amp;filename=&quot;stream&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ParsedPrograms</type>
      <name>parseProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a0b869d4a3fc3e5c0a7ce17c334ea7ef6</anchor>
      <arglist>(const std::string &amp;s, TaskContext *, const std::string &amp;filename=&quot;stream&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ParsedStateMachines</type>
      <name>parseStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a5d228e4b084570a923574329ee02a579</anchor>
      <arglist>(const std::string &amp;s, TaskContext *, const std::string &amp;filename=&quot;stream&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>parseCondition</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>ad249059f3ddb40bff23404fed54aa9e4</anchor>
      <arglist>(const std::string &amp;s, TaskContext *)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>parseExpression</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a5ace8ac8a7a4c0c5f6b0a15e6e6aeb60</anchor>
      <arglist>(const std::string &amp;s, TaskContext *)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>parseValueChange</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a73c55548ce77c4d05b75f72bb1ca2fbb</anchor>
      <arglist>(const std::string &amp;s, TaskContext *)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>parseValueStatement</name>
      <anchorfile>classRTT_1_1scripting_1_1Parser.html</anchorfile>
      <anchor>a1ad7f9c06d887a3341b740eb3bda7dba</anchor>
      <arglist>(const std::string &amp;s, TaskContext *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::PeerParser</name>
    <filename>classRTT_1_1scripting_1_1PeerParser.html</filename>
    <member kind="function">
      <type></type>
      <name>PeerParser</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>a83fbeb8b292f22c21d9a1018d7048957</anchor>
      <arglist>(TaskContext *c, CommonParser &amp;cp, bool fullpath=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>a7b18669279e68a8c3d92bfdb3719c21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>parser</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>a2d9e65b9e988de96e65f472849e6eb65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>locator</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>ac62a45e123ac184b2857b2c711feb54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TaskContext *</type>
      <name>peer</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>afe3521e54411fe0679096a1dbe0168d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>object</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>a1546ea7134f58c78696b977e6df894be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ServicePtr</type>
      <name>taskObject</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>a519e95b2977dfde5a0e361c0dc590985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>foundPath</name>
      <anchorfile>classRTT_1_1scripting_1_1PeerParser.html</anchorfile>
      <anchor>aab66b577f98e4cf830356a1975879365</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::program_load_exception</name>
    <filename>classRTT_1_1scripting_1_1program__load__exception.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::program_unload_exception</name>
    <filename>classRTT_1_1scripting_1_1program__unload__exception.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ProgramGraphParser</name>
    <filename>classRTT_1_1scripting_1_1ProgramGraphParser.html</filename>
    <member kind="function">
      <type>std::vector&lt; ProgramInterfacePtr &gt;</type>
      <name>parse</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>a07196adbd7293630327c33a0bf9ac0ce</anchor>
      <arglist>(iter_t &amp;begin, iter_t end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBodyParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>a3baa31212393a4cb548bee37aded23e0</anchor>
      <arglist>(const std::string &amp;name, Service::shared_ptr stck, int offset)</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>bodyParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>a975bead7c65e211935e9575bed1534b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>statementParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>ae07b09bdde398c256628208f6a5eb819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>programParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>a7e6ec5e863608c92f803dc6cdf4f621f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProgramInterfacePtr</type>
      <name>programParserResult</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>afa293a40efd28722d6e1c4e5e399502b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>functionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>a71bc54fc4a5799f213f043aaeefd80b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parserUsed</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramGraphParser.html</anchorfile>
      <anchor>a8981680d5a5780bdb6dc4131257e7719</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ProgramInterface</name>
    <filename>classRTT_1_1scripting_1_1ProgramInterface.html</filename>
    <base>RTT::base::ExecutableInterface</base>
    <class kind="struct">RTT::scripting::ProgramInterface::Status</class>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>start</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>aaa989ac6b68d3fe3a93b6c1d7c5842fa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pause</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a04e721ce9e8b8c0f928e8ee26ec4f535</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>step</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a0ca0597a7720b3804280ecc9716d064e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>stop</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a71446a053963133120e7993f9ba108e8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>aaa33f09ad435ccb8d1ec8c2d18243195</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a8c053fcd19730fd9c97bac86debb9d71</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLineNumber</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>ae830dd65dd9bc4ddd5eb47ccc769e4c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getText</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a333727adb16f6534ee038810b2954774</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>adce55f5b58b6d7010bde7c565edcb943</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; base::AttributeBase * &gt;</type>
      <name>getArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a471f3807039f516998154ee0a87d872c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::AttributeBase *</type>
      <name>getResult</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a44b3bc038436913548894b2173337196</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProgramInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>ab470e83273ed3db9ee2a897eb47a8a7b</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacementdss) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>needsStart</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramInterface.html</anchorfile>
      <anchor>a158623a6c30bccf093462f319580de4c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::scripting::ProgramInterface::Status</name>
    <filename>structRTT_1_1scripting_1_1ProgramInterface_1_1Status.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ProgramStatus</name>
      <anchorfile>structRTT_1_1scripting_1_1ProgramInterface_1_1Status.html</anchorfile>
      <anchor>a5f5d22f30275dcccfbc31fa92fa9cbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>stopped</name>
      <anchorfile>structRTT_1_1scripting_1_1ProgramInterface_1_1Status.html</anchorfile>
      <anchor>a5f5d22f30275dcccfbc31fa92fa9cbd5ab90555d853092fedc5b1d6f28b28ff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>paused</name>
      <anchorfile>structRTT_1_1scripting_1_1ProgramInterface_1_1Status.html</anchorfile>
      <anchor>a5f5d22f30275dcccfbc31fa92fa9cbd5afb3ed9ed4d7524975f2ec8555a244cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>running</name>
      <anchorfile>structRTT_1_1scripting_1_1ProgramInterface_1_1Status.html</anchorfile>
      <anchor>a5f5d22f30275dcccfbc31fa92fa9cbd5a9b651c82aa338609b5bc87d5d93e45b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>error</name>
      <anchorfile>structRTT_1_1scripting_1_1ProgramInterface_1_1Status.html</anchorfile>
      <anchor>a5f5d22f30275dcccfbc31fa92fa9cbd5a02d4403523d85b4de7c7dfae42437460</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ProgramService</name>
    <filename>classRTT_1_1scripting_1_1ProgramService.html</filename>
    <base>RTT::Service</base>
    <member kind="function">
      <type></type>
      <name>ProgramService</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramService.html</anchorfile>
      <anchor>ac7819edbe4b07019f8eec5d0291e93e4</anchor>
      <arglist>(FunctionGraphPtr prog, TaskContext *tc=0)</arglist>
    </member>
    <member kind="function">
      <type>ProgramInterfacePtr</type>
      <name>getProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ProgramService.html</anchorfile>
      <anchor>a90940839ae634fabe4f8ec58ce3e798c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::PropertyParser</name>
    <filename>classRTT_1_1scripting_1_1PropertyParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setPropertyBag</name>
      <anchorfile>classRTT_1_1scripting_1_1PropertyParser.html</anchorfile>
      <anchor>a871cad0b2534ea686fe476acc8c1f071</anchor>
      <arglist>(PropertyBag *pb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1PropertyParser.html</anchorfile>
      <anchor>aa0690b4d6a8d95739d2420d98203d3bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>locator</name>
      <anchorfile>classRTT_1_1scripting_1_1PropertyParser.html</anchorfile>
      <anchor>acc9a708c6b93df8736e70a603f265f77</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ScriptingService</name>
    <filename>classRTT_1_1scripting_1_1ScriptingService.html</filename>
    <base>RTT::Service</base>
    <member kind="typedef">
      <type>std::vector&lt; ProgramInterfacePtr &gt;</type>
      <name>Functions</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a2bf6bc0ca8c71c8adca5c6d7704effec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScriptingService</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a23fda81c44b316b4a3f89d004fb73f7d</anchor>
      <arglist>(TaskContext *parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ac81002792f0eca6519ec3957d4da834d</anchor>
      <arglist>(ProgramInterfacePtr pi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a11efeaf063bd432bbb984d493765e3af</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unloadProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ab04fa17a4bcdef3db67c9a32d0215e8e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>afbcf840de71318e48c93f43acd306351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProgramStatus::ProgramStatus</type>
      <name>getProgramStatus</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a7f5e9223f010402c4438c43c62273b3e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getProgramStatusStr</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ae14d60d8494174cb0ccaf8912e524e71</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getProgramList</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>aa1f5dc06bd4951e5a0673e2aecc6c270</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProgramInterfacePtr</type>
      <name>getProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a80b6ba1edcdd55a83905b0df08a45db9</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a922e3780a355dffbddaeaf1a9751e60e</anchor>
      <arglist>(StateMachinePtr sc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unloadStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a6cdb2e0968bc1cf3d8f6a5c881888779</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a6cd922a48aa10dd095784fbb088fbf38</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StateMachineStatus::StateMachineStatus</type>
      <name>getStateMachineStatus</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>aab2e23a10f2799661ccdb61d01303b0f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStateMachineStatusStr</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a0d5be94a755ad7074215603fe4b48185</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getStateMachineList</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a04efac173f68d50b9aa2d8dfce0b9b29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StateMachinePtr</type>
      <name>getStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a641a0e87601dc61ed6f98237347a6fcd</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>StateMachinePtr</type>
      <name>getStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ad5db1fbdce313f660e493ff56be339a8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a6a9a6a5839b6e4f68208d7cf459f69f8</anchor>
      <arglist>(const std::string &amp;code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a88f73349bd50a08b4b5c7a5c9ec57017</anchor>
      <arglist>(const std::string &amp;code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runScript</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a96dc5113e9b145533bf80eb930562680</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Functions</type>
      <name>loadFunctions</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ac573554ce00ba9d253641b2289c50504</anchor>
      <arglist>(const std::string &amp;filename, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Functions</type>
      <name>loadFunctions</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a55511aa804e3f48ddb3425de9ff3ce5e</anchor>
      <arglist>(const std::string &amp;code, const std::string &amp;filename, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadPrograms</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a0d03334bfa73577ea8614bef10fd90c0</anchor>
      <arglist>(const std::string &amp;filename, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadPrograms</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a09c00d2d6e17f44959130feb964777ed</anchor>
      <arglist>(const std::string &amp;code, const std::string &amp;filename, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>unloadProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ab6e6398654e15b57fcc3a4fcbd3e0416</anchor>
      <arglist>(const std::string &amp;name, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProgramLine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a3e6e80d4671a2ea2b328404913fe9b9e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getProgramText</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a66c686fccb01d2c15a02d585f3264b70</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadStateMachines</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a919500022dd464153f17d448c4105e3a</anchor>
      <arglist>(const std::string &amp;filename, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadStateMachines</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a6d4d99d2c55de4576c7c25109f5d2c04</anchor>
      <arglist>(const std::string &amp;code, const std::string &amp;filename, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>unloadStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>aa5f59da46e4d99ae2bdc40453cfbc2e6</anchor>
      <arglist>(const std::string &amp;name, bool do_throw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStateMachineText</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a2d0ced640cb470bdbb5b7dfc5e9e4933</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStateMachineLine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ad30d8ee9fcd73e99ac2b24dcdac6bb1e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ad56f2ff1a89268e19fb8dd0cdc77bc3c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stopProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ac783683d2cba0d754a4be0e6d7b2f948</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pauseProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a403604b4b93781da89dbf9a57aed8852</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a4d3fd2570776af06572c6c6e4e127f9c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ad804bc876613133788360104a9a3320b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramRunning</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a51f037fdf3c8804e5b324aba80f858c7</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgramPaused</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a327fc8635a748f71feaa4dc460cbafe2</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inProgramError</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a5f71d27fc40f0dc5f02168f636d537b2</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activateStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a37f4fdda7a8552f7fbae7fd0ef27f6d2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deactivateStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>af72bf4f02f6e12fe5cc913aabfe643d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a1388b4818b6f7ae77ed6672184fd1606</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pauseStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ac0cf3d699c7041a9e37db8b006ec4ece</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stopStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ac9011017c1e581bbf3a6581fe998c63d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a24e51e5294a6d5c301383b11559532cf</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestStateMachineState</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a16891562896e8eefcf350c1f71aa40c0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a31ef85c1119891d6bdc22eb03d481c41</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateMachineActive</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a63f85a1b785018fbda739dd15f3e9d25</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateMachineRunning</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>aef21f0b08cc13eeafd891f00b68fd9a6</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inStateMachineError</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a16d7f4bc0303092b7728e7e2a7b8b332</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateMachinePaused</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a6c3beb44a99f80275f694b22286c5529</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStateMachineState</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>ac1f608f78e1fca04226294999818c351</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inStateMachineState</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a22ac16f174c89c40cf2fad7e4cb0e57e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;state) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Create</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>aeab7214ca7db34715c1dc26e62720558</anchor>
      <arglist>(TaskContext *parent)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ZeroPeriodWarning</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptingService.html</anchorfile>
      <anchor>a29ae65f5dc83e5f5266f37b8d68dbaaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ScriptParser</name>
    <filename>classRTT_1_1scripting_1_1ScriptParser.html</filename>
    <member kind="function">
      <type></type>
      <name>ScriptParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptParser.html</anchorfile>
      <anchor>ada2e0a5cafc630ad134838925131cc26</anchor>
      <arglist>(iter_t &amp;positer, TaskContext *tc, ExecutionEngine *caller)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptParser.html</anchorfile>
      <anchor>a72928b3eaea355893a61f5e58f958727</anchor>
      <arglist>(iter_t &amp;begin, iter_t end)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>parseExcerpt</name>
      <anchorfile>classRTT_1_1scripting_1_1ScriptParser.html</anchorfile>
      <anchor>a0b0c0dfe10d434b678a24e786dd6fba6</anchor>
      <arglist>(iter_t &amp;begin, iter_t end)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::SendHandleAlias</name>
    <filename>classRTT_1_1scripting_1_1SendHandleAlias.html</filename>
    <base>RTT::base::AttributeBase</base>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getDataSource</name>
      <anchorfile>classRTT_1_1scripting_1_1SendHandleAlias.html</anchorfile>
      <anchor>a6ee04fc2e7ffee74dddece5c6f807635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SendHandleAlias *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1SendHandleAlias.html</anchorfile>
      <anchor>a3d27a28d6f90bd9690b444bc04436512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SendHandleAlias *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1SendHandleAlias.html</anchorfile>
      <anchor>ad80d986332183ad92ede3622081ce458</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;replacements, bool)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::StateDescription</name>
    <filename>classRTT_1_1scripting_1_1StateDescription.html</filename>
    <base>RTT::scripting::StateInterface</base>
    <member kind="function">
      <type></type>
      <name>StateDescription</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>a1098932a01a0ab4917fc93801da2802c</anchor>
      <arglist>(const std::string &amp;_name, int linenr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>af2a816637159de17fb161e116545744e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEntryPoint</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>aba7b9794c77018f71c59c929b3881a77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateDescription *</type>
      <name>postponeState</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>aa054ee6367d95e5087e4854aec6a3986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProgramInterface *</type>
      <name>getEntryProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>ac140a6b8ad13017c7d3f0044852bf645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProgramInterface *</type>
      <name>getRunProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>a58f8d6673a188265206880830fe50267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProgramInterface *</type>
      <name>getHandleProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>ab41e80308c2e9ea729319de0ec557ac2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProgramInterface *</type>
      <name>getExitProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateDescription.html</anchorfile>
      <anchor>ae6cb475e3dffa1b8a4924d4c1008ac06</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::StateGraphParser</name>
    <filename>classRTT_1_1scripting_1_1StateGraphParser.html</filename>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>parser</name>
      <anchorfile>classRTT_1_1scripting_1_1StateGraphParser.html</anchorfile>
      <anchor>a8e56ce84cf9de693b22f2a7f50d2c5b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParsedStateMachinePtr</type>
      <name>getParserResult</name>
      <anchorfile>classRTT_1_1scripting_1_1StateGraphParser.html</anchorfile>
      <anchor>a1810881a5c3556fa9f39ffe446154222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeOffset</name>
      <anchorfile>classRTT_1_1scripting_1_1StateGraphParser.html</anchorfile>
      <anchor>a23c6193ba6d58432951b150ecb7f7bb3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::StateInterface</name>
    <filename>classRTT_1_1scripting_1_1StateInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1scripting_1_1StateInterface.html</anchorfile>
      <anchor>adb81ccfdaac79e0a0c4dc56b9aef5879</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProgramInterface *</type>
      <name>getEntryProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateInterface.html</anchorfile>
      <anchor>a3b1f92df5dfc1165f775b58569933546</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProgramInterface *</type>
      <name>getRunProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateInterface.html</anchorfile>
      <anchor>a89402f07aa70350ec1d095e74b85d03f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProgramInterface *</type>
      <name>getHandleProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateInterface.html</anchorfile>
      <anchor>a9b94786d595b6d3d25af66c494949861</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProgramInterface *</type>
      <name>getExitProgram</name>
      <anchorfile>classRTT_1_1scripting_1_1StateInterface.html</anchorfile>
      <anchor>af5076e596ae167cbc4238244efadb159</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getEntryPoint</name>
      <anchorfile>classRTT_1_1scripting_1_1StateInterface.html</anchorfile>
      <anchor>ac43bd4c22f31e09ede73249e97d8eb7f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::StateMachine</name>
    <filename>classRTT_1_1scripting_1_1StateMachine.html</filename>
    <base>RTT::base::ExecutableInterface</base>
    <class kind="struct">RTT::scripting::StateMachine::Status</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>aedf801816201e7efcdf79596341d1863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateMachine</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a1fdf031ef3b6ac5bf4d329843e3a4c5d</anchor>
      <arglist>(StateMachinePtr parent, const std::string &amp;name=&quot;Default&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unloading</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>acb6e31dddfbc5dc4375bc2a9c42fee2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getText</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachine.html</anchorfile>
      <anchor>a87f9ff9896f5d5959f1fa39cb68500da</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::scripting::StateMachine::Status</name>
    <filename>structRTT_1_1scripting_1_1StateMachine_1_1Status.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::StateMachineService</name>
    <filename>classRTT_1_1scripting_1_1StateMachineService.html</filename>
    <base>RTT::Service</base>
    <member kind="function">
      <type></type>
      <name>StateMachineService</name>
      <anchorfile>classRTT_1_1scripting_1_1StateMachineService.html</anchorfile>
      <anchor>a5fdc1579a66c3c39a565f99c92e5e7cd</anchor>
      <arglist>(ParsedStateMachinePtr statemachine, TaskContext *tc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::StatementProcessor</name>
    <filename>classRTT_1_1scripting_1_1StatementProcessor.html</filename>
    <member kind="function">
      <type>int</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1StatementProcessor.html</anchorfile>
      <anchor>a1135180ddbc424f208b84bc0059738e6</anchor>
      <arglist>(const std::string &amp;code)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::TryCommand</name>
    <filename>classRTT_1_1scripting_1_1TryCommand.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type></type>
      <name>TryCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>a7393cd0c45a5519838a7a4800a4f0a1d</anchor>
      <arglist>(base::ActionInterface *command, internal::AssignableDataSource&lt; bool &gt;::shared_ptr storage=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>a7e8f8be4b9fdb09a236e817c19f01c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>a6820902afd88202a02cfb6bb10932c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>aae06cdb938b53461cfd0bb2625582014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>afe59c9e0307a2cb9bc573f1874c23fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TryCommand *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>a8bd18a29f1522f5e2e4c93e4a82abda7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TryCommand *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommand.html</anchorfile>
      <anchor>ad96ba947fd9b2e2f9e877a5a84606842</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::TryCommandResult</name>
    <filename>classRTT_1_1scripting_1_1TryCommandResult.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type></type>
      <name>TryCommandResult</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommandResult.html</anchorfile>
      <anchor>aae44f6b4221122d255ed40ae4ef29e55</anchor>
      <arglist>(internal::DataSource&lt; bool &gt;::shared_ptr ec, bool invert)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommandResult.html</anchorfile>
      <anchor>a6366ea8a76fc3b64ec9b5b26c6c75fa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommandResult.html</anchorfile>
      <anchor>ae6205954cf27acc66cf1d01972f349d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1TryCommandResult.html</anchorfile>
      <anchor>a4119f42270f7db2c416af5daa17479e8</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::EvalCommand</name>
    <filename>classRTT_1_1scripting_1_1EvalCommand.html</filename>
    <base>RTT::base::ActionInterface</base>
    <member kind="function">
      <type>void</type>
      <name>readArguments</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommand.html</anchorfile>
      <anchor>acffa5e9109c799d79081703059ad2067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommand.html</anchorfile>
      <anchor>ab38cafef5176150c4cc176c329253b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommand.html</anchorfile>
      <anchor>a59e3de6db2e7e8f22697840eecd35452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommand.html</anchorfile>
      <anchor>a7bd732ed01272d36bd5e5fdf619e81dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommand.html</anchorfile>
      <anchor>a65941b4904a8d9d567e30b1768e8b548</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::EvalCommandResult</name>
    <filename>classRTT_1_1scripting_1_1EvalCommandResult.html</filename>
    <base>RTT::scripting::ConditionInterface</base>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommandResult.html</anchorfile>
      <anchor>a314d853031735f48ee43106257a1716b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>clone</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommandResult.html</anchorfile>
      <anchor>ae37f6d844ba219881df06934401c2689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConditionInterface *</type>
      <name>copy</name>
      <anchorfile>classRTT_1_1scripting_1_1EvalCommandResult.html</anchorfile>
      <anchor>a7f5a2cd1f68b1f8957beb30b2a9c69da</anchor>
      <arglist>(std::map&lt; const base::DataSourceBase *, base::DataSourceBase * &gt; &amp;alreadyCloned) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ValueChangeParser</name>
    <filename>classRTT_1_1scripting_1_1ValueChangeParser.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueChangeParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>ac4c03a653f3507345d094a7c902431db</anchor>
      <arglist>(TaskContext *tc, CommonParser &amp;cp, Service::shared_ptr storage, ExecutionEngine *caller)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a5429f65ba1abe7bf65c713b494a44677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a85d87cd2c0cdab994feda9fa8177e01c</anchor>
      <arglist>(Service::shared_ptr other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a5e4ee2b367649b91009b34c8eeb707e8</anchor>
      <arglist>(Service::shared_ptr source)</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>assignCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a68f173c84f66d02c71eed3b31dceb1ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>parser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>af9a9d8f145f508dee2cea6391341ef56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>constantDefinitionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a4c857db51ee501c11d5996d7b19070da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>variableDefinitionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a2322230cd02ed1aba998d548a1f0e721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>aliasDefinitionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a63853ffe6f823415bd82cf3f2c92fcd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>paramDefinitionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a766d6394b0c57984e1de8388975aa032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rule_t &amp;</type>
      <name>bareDefinitionParser</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a212e98d58c9335351148dd2f895216f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueChangeParser.html</anchorfile>
      <anchor>a6314a53177667878351b26a5da58cd7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::ValueParser</name>
    <filename>classRTT_1_1scripting_1_1ValueParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRTT_1_1scripting_1_1ValueParser.html</anchorfile>
      <anchor>a92020f6cd75efb5a2f68982b0768f2b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::scripting::VertexNode</name>
    <filename>classRTT_1_1scripting_1_1VertexNode.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>NodeTypes</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>acf287c188d5d4b6001d0d8fa2720b0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexNode</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>af7d1baf8b1f08c334476f680c9049166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexNode</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a40e9279c0708332e0da2ecd554ae9e89</anchor>
      <arglist>(base::ActionInterface *cmd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexNode</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a52b6c57f642fd4fa998e4b2b9093a740</anchor>
      <arglist>(const VertexNode &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VertexNode</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>add90d7cbced1075c2c832c1a914ee418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startExecution</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a74ab116b51526bf152713a9ce8677e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a88993c47643f91c25456437f12af2bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>aaad54c5bcb3bb5f917e85e66cb63117e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>setCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>abbdd1e4bd2d1283e7931dc0d654b6c1b</anchor>
      <arglist>(base::ActionInterface *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineNumber</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a108984245ab8815247533deb3f35cbca</anchor>
      <arglist>(int ln)</arglist>
    </member>
    <member kind="function">
      <type>base::ActionInterface *</type>
      <name>getCommand</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a1682497979eb6575c74d33e4e9f900da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineNumber</name>
      <anchorfile>classRTT_1_1scripting_1_1VertexNode.html</anchorfile>
      <anchor>a7beeb0717373be52da53a7452c9f9751</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::SendHandleC::E::OperationKeeper</name>
    <filename>structRTT_1_1SendHandleC_1_1E_1_1OperationKeeper.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RTT::types</name>
    <filename>namespaceRTT_1_1types.html</filename>
    <class kind="struct">RTT::types::BoolTypeInfo</class>
    <class kind="class">RTT::types::RealTimeTypekitPlugin</class>
    <class kind="struct">RTT::types::EmptySendHandle</class>
    <class kind="struct">RTT::types::RTStringTypeInfo</class>
    <class kind="struct">RTT::types::StdStringTypeInfo</class>
    <class kind="struct">RTT::types::StdTypeInfo</class>
    <class kind="struct">RTT::types::StdVectorTypeInfo</class>
    <class kind="class">RTT::types::BoostArrayTypeInfo</class>
    <class kind="class">RTT::types::carray</class>
    <class kind="class">RTT::types::CArrayTypeInfo</class>
    <class kind="class">RTT::types::CompositionFactory</class>
    <class kind="struct">RTT::types::EnumTypeInfo</class>
    <class kind="class">RTT::types::GlobalsRepository</class>
    <class kind="class">RTT::types::UnaryOp</class>
    <class kind="class">RTT::types::OperatorRepository</class>
    <class kind="class">RTT::types::UnaryOperator</class>
    <class kind="class">RTT::types::BinaryOperator</class>
    <class kind="class">RTT::types::PrimitiveSequenceTypeInfo</class>
    <class kind="class">RTT::types::PrimitiveTypeInfo</class>
    <class kind="struct">RTT::types::StdVectorTemplateTypeInfo</class>
    <class kind="struct">RTT::types::TemplateConstructor</class>
    <class kind="class">RTT::types::SequenceTypeInfo</class>
    <class kind="class">RTT::types::StructTypeInfo</class>
    <class kind="class">RTT::types::TemplateTypeInfo</class>
    <class kind="struct">RTT::types::TypeInfoName</class>
    <class kind="struct">RTT::types::sequence_ctor</class>
    <class kind="struct">RTT::types::sequence_varargs_ctor</class>
    <class kind="struct">RTT::types::sequence_constructor_datasource</class>
    <class kind="struct">RTT::types::SequenceBuilder</class>
    <class kind="struct">RTT::types::sequence_ctor2</class>
    <class kind="class">RTT::types::SequenceTypeInfoBase</class>
    <class kind="class">RTT::types::TransportPlugin</class>
    <class kind="class">RTT::types::type_discovery</class>
    <class kind="struct">RTT::types::TypeConstructor</class>
    <class kind="class">RTT::types::TypeInfo</class>
    <class kind="class">RTT::types::TypeInfoGenerator</class>
    <class kind="class">RTT::types::EmptyTypeInfo</class>
    <class kind="class">RTT::types::TypeInfoRepository</class>
    <class kind="class">RTT::types::TypekitPlugin</class>
    <class kind="class">RTT::types::TypekitRepository</class>
    <class kind="class">RTT::types::TypeMarshaller</class>
    <class kind="class">RTT::types::TypeTransporter</class>
    <class kind="class">RTT::types::ValueFactory</class>
    <member kind="function">
      <type>RTT_API OperatorRepository::shared_ptr</type>
      <name>operators</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a392a189a6f0424bf29e29d16f9ca187e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnaryOperator&lt; function &gt; *</type>
      <name>newUnaryOperator</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>ae8c2ab9b5a306d8927e62625e3418bdd</anchor>
      <arglist>(const char *op, function f)</arglist>
    </member>
    <member kind="function">
      <type>BinaryOperator&lt; function &gt; *</type>
      <name>newBinaryOperator</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>ad425f739fe840a86629938c80eff875e</anchor>
      <arglist>(const char *op, function f)</arglist>
    </member>
    <member kind="function">
      <type>bool RTT_API</type>
      <name>composePropertyBag</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a0a5b03e098a7a90c431e885076ab3dd3</anchor>
      <arglist>(PropertyBag const &amp;sourcebag, PropertyBag &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>bool RTT_API</type>
      <name>decomposePropertyBag</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>aea865bc70e02568b615dac086b00cc32</anchor>
      <arglist>(PropertyBag const &amp;sourcebag, PropertyBag &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>propertyDecomposition</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a23773014261904a984359984a28b13a8</anchor>
      <arglist>(base::PropertyBase *source, PropertyBag &amp;targetbag, bool recurse=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>typeDecomposition</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>ab7883d9a1fe2ac6f3599641199e05a46</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, PropertyBag &amp;targetbag, bool recurse=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_container_item</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>ad0a86a2c5e924f1eb273d96e442e2e83</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;cont, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_capacity</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a764774ce659b7a55217088201a4e30ee</anchor>
      <arglist>(T const &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_size</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a08cee59bbf5a555f9806021ac2f080d9</anchor>
      <arglist>(T const &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>T::reference</type>
      <name>get_container_item</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a0bfdf5148ece54de7361bb2a9fb1814f</anchor>
      <arglist>(T &amp;cont, int index)</arglist>
    </member>
    <member kind="function">
      <type>T::value_type</type>
      <name>get_container_item_copy</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>ad1beb76f0d339bcfde07be00ae09b8c5</anchor>
      <arglist>(const T &amp;cont, int index)</arglist>
    </member>
    <member kind="function">
      <type>TypeConstructor *</type>
      <name>newConstructor</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a2c8a3cdeee25589b4283dc60a28a9b95</anchor>
      <arglist>(Function *foo, bool automatic=false)</arglist>
    </member>
    <member kind="function">
      <type>TypeConstructor *</type>
      <name>newConstructor</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a201408cef52456f3d237fd144247a50a</anchor>
      <arglist>(Object obj, bool automatic=false)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfoRepository::shared_ptr</type>
      <name>Types</name>
      <anchorfile>namespaceRTT_1_1types.html</anchorfile>
      <anchor>a22d379bb9503d45c1a13c5e8597dd11d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::BoolTypeInfo</name>
    <filename>structRTT_1_1types_1_1BoolTypeInfo.html</filename>
    <base>StdTypeInfo&lt; bool &gt;</base>
    <member kind="typedef">
      <type>bool</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>structRTT_1_1types_1_1StdTypeInfo.html</anchorfile>
      <anchor>a2ecec92fca75cdae23bfa9feeb9a1f3c</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>acfb38d78ad2b612e6b931b28c029768b</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>convertType</name>
      <anchorfile>classRTT_1_1types_1_1CompositionFactory.html</anchorfile>
      <anchor>aab902f2632a5e7e2ead0566efd2c86e5</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::AttributeBase *</type>
      <name>buildConstant</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a5cba474801278553963825c9710b52ca</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr, int sizehint) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a6d709da702fee37b43c38e58cc93ea96</anchor>
      <arglist>(std::string name, int sizehint) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::RealTimeTypekitPlugin</name>
    <filename>classRTT_1_1types_1_1RealTimeTypekitPlugin.html</filename>
    <base>RTT::types::TypekitPlugin</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1types_1_1RealTimeTypekitPlugin.html</anchorfile>
      <anchor>a7473f41eb303b1736ec009f04bad6585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadTypes</name>
      <anchorfile>classRTT_1_1types_1_1RealTimeTypekitPlugin.html</anchorfile>
      <anchor>a37b8ca093cae8b64a4a90119bf601616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadOperators</name>
      <anchorfile>classRTT_1_1types_1_1RealTimeTypekitPlugin.html</anchorfile>
      <anchor>a9775ca3dcbcd7c8afda6019d144fdfce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadConstructors</name>
      <anchorfile>classRTT_1_1types_1_1RealTimeTypekitPlugin.html</anchorfile>
      <anchor>ad7984c59d12588203b7e04032ec977d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadGlobals</name>
      <anchorfile>classRTT_1_1types_1_1RealTimeTypekitPlugin.html</anchorfile>
      <anchor>a4713e5aa154272c2fd7e932823fdf0ec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::EmptySendHandle</name>
    <filename>structRTT_1_1types_1_1EmptySendHandle.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTT::types::RTStringTypeInfo</name>
    <filename>structRTT_1_1types_1_1RTStringTypeInfo.html</filename>
    <base>SequenceTypeInfo&lt; rt_string, true &gt;</base>
    <member kind="typedef">
      <type>rt_string</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rt_string</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>structRTT_1_1types_1_1RTStringTypeInfo.html</anchorfile>
      <anchor>a1e5b93e8700462ebbdb33205b15a42c2</anchor>
      <arglist>(std::string name, int size) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>structRTT_1_1types_1_1RTStringTypeInfo.html</anchorfile>
      <anchor>aa9b361f88845b657b3048b119fc2f678</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a6f56e889598f4357c93165e939dcabfd</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::StdStringTypeInfo</name>
    <filename>structRTT_1_1types_1_1StdStringTypeInfo.html</filename>
    <base>SequenceTypeInfo&lt; std::string, true &gt;</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>structRTT_1_1types_1_1StdStringTypeInfo.html</anchorfile>
      <anchor>ab5dcc36207c510388c84148ac9043df6</anchor>
      <arglist>(std::string name, int size) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>structRTT_1_1types_1_1StdStringTypeInfo.html</anchorfile>
      <anchor>a748e90950086c19613e0cde09e46f4b1</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a6f56e889598f4357c93165e939dcabfd</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::StdTypeInfo</name>
    <filename>structRTT_1_1types_1_1StdTypeInfo.html</filename>
    <templarg>T</templarg>
    <base>TemplateTypeInfo&lt; T, true &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>structRTT_1_1types_1_1StdTypeInfo.html</anchorfile>
      <anchor>a2ecec92fca75cdae23bfa9feeb9a1f3c</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>acfb38d78ad2b612e6b931b28c029768b</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::StdVectorTypeInfo</name>
    <filename>structRTT_1_1types_1_1StdVectorTypeInfo.html</filename>
    <base>SequenceTypeInfo&lt; std::vector&lt; double &gt;, true &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>structRTT_1_1types_1_1StdVectorTypeInfo.html</anchorfile>
      <anchor>a1097b3f79e94a10d364ae8700f633326</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dssource, base::DataSourceBase::shared_ptr dsresult) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a6f56e889598f4357c93165e939dcabfd</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a2518a1e93e118721d35b34a106570e03</anchor>
      <arglist>(std::string name, int size) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>ae0686ea74e44c32eb51df9b7095c20fb</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::BoostArrayTypeInfo</name>
    <filename>classRTT_1_1types_1_1BoostArrayTypeInfo.html</filename>
    <templarg></templarg>
    <templarg>has_ostream</templarg>
    <base>PrimitiveTypeInfo&lt; T, has_ostream &gt;</base>
    <base>RTT::types::CompositionFactory</base>
    <member kind="typedef">
      <type>T</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1BoostArrayTypeInfo.html</anchorfile>
      <anchor>a0f481f313f6532b2d12d10bfba0136e2</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1BoostArrayTypeInfo.html</anchorfile>
      <anchor>af62cca9d49dc2754eba1795173d55552</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>classRTT_1_1types_1_1BoostArrayTypeInfo.html</anchorfile>
      <anchor>ad4a06e2a774bc6d0d3bae1de73956b8b</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dssource, base::DataSourceBase::shared_ptr dsresult) const </arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::carray</name>
    <filename>classRTT_1_1types_1_1carray.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>carray</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>adae6340ed7ef1885009fd45789782c92</anchor>
      <arglist>(value_type *t, std::size_t s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>carray</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>aea0af3d2cf9c5ce70be7a52af3a94898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>carray</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a89aa3f144788972df5fc1ece30b52427</anchor>
      <arglist>(boost::serialization::array&lt; T &gt; const &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>carray</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a33f0a61ef6085712c33d967df20ecc1e</anchor>
      <arglist>(boost::array&lt; T, N &gt; &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a17ad56f442a334e89241fae2be709a3d</anchor>
      <arglist>(value_type *t, std::size_t s)</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>address</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a78a3a0573006bd59012d9df5710527ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>acc0b155f6c4fa7ba722cca4a7711a6fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const carray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a6945fb052b80502d43d831010ea50a7f</anchor>
      <arglist>(const carray&lt; OtherT &gt; &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>const carray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a1671afa369185d9a1036db97a591dc84</anchor>
      <arglist>(boost::serialization::array&lt; OtherT &gt; const &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>const carray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classRTT_1_1types_1_1carray.html</anchorfile>
      <anchor>a60449d71d0a3014ac618c590acaee649</anchor>
      <arglist>(const boost::array&lt; OtherT, OtherN &gt; &amp;orig)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::CArrayTypeInfo</name>
    <filename>classRTT_1_1types_1_1CArrayTypeInfo.html</filename>
    <templarg></templarg>
    <templarg>has_ostream</templarg>
    <base>PrimitiveTypeInfo&lt; T, has_ostream &gt;</base>
    <base>RTT::types::CompositionFactory</base>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1CArrayTypeInfo.html</anchorfile>
      <anchor>a03a14707208dc0c0f7de35a7cf84fae4</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1CArrayTypeInfo.html</anchorfile>
      <anchor>a2ba0e8f80f2dd17c359ec61e92ebfa42</anchor>
      <arglist>(std::string name, int sizehint) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1CArrayTypeInfo.html</anchorfile>
      <anchor>ab0088a4896c084937c7eb7c3c589252a</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>classRTT_1_1types_1_1CArrayTypeInfo.html</anchorfile>
      <anchor>a0c1fb6f42be1d648dc25e696a79b539b</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dssource, base::DataSourceBase::shared_ptr dsresult) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::CompositionFactory</name>
    <filename>classRTT_1_1types_1_1CompositionFactory.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>classRTT_1_1types_1_1CompositionFactory.html</anchorfile>
      <anchor>a491a1ea3b86d713dd0209b0939573a46</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, base::DataSourceBase::shared_ptr target) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1CompositionFactory.html</anchorfile>
      <anchor>aea6099823a252c74cda6c0fc0b9d2421</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::EnumTypeInfo</name>
    <filename>structRTT_1_1types_1_1EnumTypeInfo.html</filename>
    <templarg></templarg>
    <base>TemplateTypeInfo&lt; T, false &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>structRTT_1_1types_1_1EnumTypeInfo.html</anchorfile>
      <anchor>aa45ac42d9020fd8477015c63552b4b57</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>structRTT_1_1types_1_1EnumTypeInfo.html</anchorfile>
      <anchor>a521854d995af218323691fb679f4c735</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, base::DataSourceBase::shared_ptr result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>structRTT_1_1types_1_1EnumTypeInfo.html</anchorfile>
      <anchor>aea3e9f8f4a3fd4f5b6ef180849205bcb</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::GlobalsRepository</name>
    <filename>classRTT_1_1types_1_1GlobalsRepository.html</filename>
    <base>RTT::ConfigurationInterface</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1types_1_1GlobalsRepository.html</anchorfile>
      <anchor>a85e25a9837cae3d3c92466746325dc0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::UnaryOp</name>
    <filename>classRTT_1_1types_1_1UnaryOp.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase *</type>
      <name>build</name>
      <anchorfile>classRTT_1_1types_1_1UnaryOp.html</anchorfile>
      <anchor>a2de63cd0f028e3fddfaf6b69d6c950d3</anchor>
      <arglist>(const std::string &amp;op, base::DataSourceBase *a)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::OperatorRepository</name>
    <filename>classRTT_1_1types_1_1OperatorRepository.html</filename>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Instance</name>
      <anchorfile>classRTT_1_1types_1_1OperatorRepository.html</anchorfile>
      <anchor>a24b7a406c7b5333ecb769a2104ff3587</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::UnaryOperator</name>
    <filename>classRTT_1_1types_1_1UnaryOperator.html</filename>
    <templarg>function</templarg>
    <base>RTT::types::UnaryOp</base>
    <member kind="function">
      <type>internal::DataSource&lt; result_t &gt; *</type>
      <name>build</name>
      <anchorfile>classRTT_1_1types_1_1UnaryOperator.html</anchorfile>
      <anchor>a7ded662801612498cfcf967fe06470ec</anchor>
      <arglist>(const std::string &amp;op, base::DataSourceBase *a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::BinaryOperator</name>
    <filename>classRTT_1_1types_1_1BinaryOperator.html</filename>
    <templarg>function</templarg>
  </compound>
  <compound kind="class">
    <name>RTT::types::PrimitiveSequenceTypeInfo</name>
    <filename>classRTT_1_1types_1_1PrimitiveSequenceTypeInfo.html</filename>
    <templarg></templarg>
    <templarg>has_ostream</templarg>
    <base>PrimitiveTypeInfo&lt; T, has_ostream &gt;</base>
    <base>RTT::types::SequenceTypeInfoBase</base>
    <base>RTT::types::CompositionFactory</base>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveSequenceTypeInfo.html</anchorfile>
      <anchor>a3a400581717f7d21f697e61f695716a4</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveSequenceTypeInfo.html</anchorfile>
      <anchor>a392017c2660d03a123c559887cde04f2</anchor>
      <arglist>(std::string name, int size) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveSequenceTypeInfo.html</anchorfile>
      <anchor>acb49abf6fd86b0b2ace5538585535e98</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dssource, base::DataSourceBase::shared_ptr dsresult) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveSequenceTypeInfo.html</anchorfile>
      <anchor>a27e2ac82c36477bf1431e1b3aabd7cd9</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::PrimitiveTypeInfo</name>
    <filename>classRTT_1_1types_1_1PrimitiveTypeInfo.html</filename>
    <templarg>T</templarg>
    <templarg>use_ostream</templarg>
    <base>RTT::types::TypeInfoGenerator</base>
    <member kind="function">
      <type></type>
      <name>PrimitiveTypeInfo</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a7d556ef05f65578d5e1dc1b27a0faef7</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>af1e886eb6b7b4ae98f28540782b540ff</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3c1741f01a173d2e3fb51fcb66b22144</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::StdVectorTemplateTypeInfo</name>
    <filename>structRTT_1_1types_1_1StdVectorTemplateTypeInfo.html</filename>
    <templarg></templarg>
    <templarg>has_ostream</templarg>
    <base>SequenceTypeInfo&lt; std::vector&lt; T &gt;, has_ostream &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>DataType</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac985979cc563f06d6360a23966a6f2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeType</name>
      <anchorfile>structRTT_1_1types_1_1StdVectorTemplateTypeInfo.html</anchorfile>
      <anchor>aaf35e1b77fea9a26f5dc83617ecf3d7e</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dssource, base::DataSourceBase::shared_ptr dsresult) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a6f56e889598f4357c93165e939dcabfd</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a2518a1e93e118721d35b34a106570e03</anchor>
      <arglist>(std::string name, int size) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>ae0686ea74e44c32eb51df9b7095c20fb</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>a3e5ef1a2707b54e4b2e40f3327715905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1PrimitiveTypeInfo.html</anchorfile>
      <anchor>ac96c9d976f5f18113638cc4e87ab4bcd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::TemplateConstructor</name>
    <filename>structRTT_1_1types_1_1TemplateConstructor.html</filename>
    <templarg>S</templarg>
    <base>RTT::types::TypeConstructor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>build</name>
      <anchorfile>structRTT_1_1types_1_1TemplateConstructor.html</anchorfile>
      <anchor>aeb845d09282ebc754ed9ff3778fd2a8e</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>convert</name>
      <anchorfile>structRTT_1_1types_1_1TemplateConstructor.html</anchorfile>
      <anchor>a4aeaab8a38384cf6f12c4982c6ccc56d</anchor>
      <arglist>(base::DataSourceBase::shared_ptr arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::SequenceTypeInfo</name>
    <filename>classRTT_1_1types_1_1SequenceTypeInfo.html</filename>
    <templarg>T</templarg>
    <templarg>has_ostream</templarg>
    <base>TemplateTypeInfo&lt; T, has_ostream &gt;</base>
    <base>RTT::types::SequenceTypeInfoBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a6f56e889598f4357c93165e939dcabfd</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>a2518a1e93e118721d35b34a106570e03</anchor>
      <arglist>(std::string name, int size) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfo.html</anchorfile>
      <anchor>ae0686ea74e44c32eb51df9b7095c20fb</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::StructTypeInfo</name>
    <filename>classRTT_1_1types_1_1StructTypeInfo.html</filename>
    <templarg></templarg>
    <templarg>has_ostream</templarg>
    <base>TemplateTypeInfo&lt; T, has_ostream &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1StructTypeInfo.html</anchorfile>
      <anchor>a163302e3909657fbc5e1f3715b556167</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>composeTypeImpl</name>
      <anchorfile>classRTT_1_1types_1_1StructTypeInfo.html</anchorfile>
      <anchor>ab5755bb62242074a9b4a810b5ab74311</anchor>
      <arglist>(const PropertyBag &amp;source, typename internal::AssignableDataSource&lt; T &gt;::reference_t result) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TemplateTypeInfo</name>
    <filename>classRTT_1_1types_1_1TemplateTypeInfo.html</filename>
    <templarg>T</templarg>
    <templarg>use_ostream</templarg>
    <base>RTT::types::PrimitiveTypeInfo</base>
    <member kind="typedef">
      <type>T</type>
      <name>UserType</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>aa6d26b24f8eadba73aadf8bce5cfa501</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemplateTypeInfo</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>a4b585e34166b17b1e84dc6b09f1bbe18</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1TemplateTypeInfo.html</anchorfile>
      <anchor>acfb38d78ad2b612e6b931b28c029768b</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::TypeInfoName</name>
    <filename>structRTT_1_1types_1_1TypeInfoName.html</filename>
    <templarg></templarg>
    <base>RTT::types::EmptyTypeInfo</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoName</name>
      <anchorfile>structRTT_1_1types_1_1TypeInfoName.html</anchorfile>
      <anchor>a7f2e2614bc1495a39c1667732a2a9ff7</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>structRTT_1_1types_1_1TypeInfoName.html</anchorfile>
      <anchor>a4d568172f497f521577728ad2c252905</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>structRTT_1_1types_1_1TypeInfoName.html</anchorfile>
      <anchor>a30b51b5a79e8ec87a194f4fb9c8e82ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1EmptyTypeInfo.html</anchorfile>
      <anchor>ae7a04297039598aa6d89408da55e3beb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::sequence_ctor</name>
    <filename>structRTT_1_1types_1_1sequence__ctor.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::types::sequence_varargs_ctor</name>
    <filename>structRTT_1_1types_1_1sequence__varargs__ctor.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::types::sequence_constructor_datasource</name>
    <filename>structRTT_1_1types_1_1sequence__constructor__datasource.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>RTT::types::SequenceBuilder</name>
    <filename>structRTT_1_1types_1_1SequenceBuilder.html</filename>
    <templarg></templarg>
    <base>RTT::types::TypeConstructor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>build</name>
      <anchorfile>structRTT_1_1types_1_1SequenceBuilder.html</anchorfile>
      <anchor>a50b1dcde8ed664ec57ef1c83bdb3e52c</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>convert</name>
      <anchorfile>structRTT_1_1types_1_1TypeConstructor.html</anchorfile>
      <anchor>a2615c58c4b70d2da55ccf3ecdadad64a</anchor>
      <arglist>(base::DataSourceBase::shared_ptr arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::sequence_ctor2</name>
    <filename>structRTT_1_1types_1_1sequence__ctor2.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RTT::types::SequenceTypeInfoBase</name>
    <filename>classRTT_1_1types_1_1SequenceTypeInfoBase.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>bool</type>
      <name>composeType</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfoBase.html</anchorfile>
      <anchor>a739bd90a75af18a1afaa61a598bcf4d6</anchor>
      <arglist>(base::DataSourceBase::shared_ptr dssource, base::DataSourceBase::shared_ptr dsresult) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1SequenceTypeInfoBase.html</anchorfile>
      <anchor>a015d4b2b556aaff22495cf4e11cc07a5</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TransportPlugin</name>
    <filename>classRTT_1_1types_1_1TransportPlugin.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>registerTransport</name>
      <anchorfile>classRTT_1_1types_1_1TransportPlugin.html</anchorfile>
      <anchor>a3c91b6d936e3f45e5c89d0fb9c3de1b0</anchor>
      <arglist>(std::string type_name, TypeInfo *ti)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getTransportName</name>
      <anchorfile>classRTT_1_1types_1_1TransportPlugin.html</anchorfile>
      <anchor>a150d670e63a42e1b4a5643de6d7eec33</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getTypekitName</name>
      <anchorfile>classRTT_1_1types_1_1TransportPlugin.html</anchorfile>
      <anchor>ac69c00a3225fce03c05fb9a53d2a7821</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1types_1_1TransportPlugin.html</anchorfile>
      <anchor>ac3cc5aaec4e4715a392d4b424c7515f7</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::type_discovery</name>
    <filename>classRTT_1_1types_1_1type__discovery.html</filename>
    <member kind="typedef">
      <type>boost::mpl::bool_&lt; true &gt;</type>
      <name>is_loading</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a7ff6bd730684536c7743484476acd53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mpl::bool_&lt; false &gt;</type>
      <name>is_saving</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a5a908f1f68af0f54f06d3f174aa2e4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>type_discovery</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a7039d5b4377b837253c8f4a00fdb8b3d</anchor>
      <arglist>(base::DataSourceBase::shared_ptr parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>type_discovery</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>ad6b10e1d09086d2f11a9c0c9390612a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discover</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a1f65b7c94fe09f50be0b53038b6bae06</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>discoverMember</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a6728be6c7b9d66b99233e1ca534e71c5</anchor>
      <arglist>(T &amp;t, const std::string name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>referenceMember</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a9ad560fc5c0f4d0c2feb969e89c070b5</anchor>
      <arglist>(internal::Reference *ref, T &amp;t, const std::string name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_library_version</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>af03c33f2ee3bf4587c78644e8d6c0665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_object_address</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a7d632531cd11e6e07f52d96173adb421</anchor>
      <arglist>(const void *new_address, const void *old_address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_created_pointers</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a45d9ada945e60cf93ff29875b4da999f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const boost::archive::detail::basic_pointer_iserializer *</type>
      <name>register_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a83b3d0c891d1cdd51b6350907038d8c3</anchor>
      <arglist>(T *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_object</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a052f4cf14d1797a5d625f18e70a6f6e8</anchor>
      <arglist>(void *x, const boost::archive::detail::basic_oserializer &amp;bos)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>ab63b6f7930bd06d3b7b35f817a24f802</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>operator&amp;</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a7c87c68dbcac9b00c0a5825d7fb19f0f</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a90799ea80f0754c1d410b33bf5996f1b</anchor>
      <arglist>(T &amp;t, boost::mpl::true_)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>afbaee901b67b4ab33653fdc7bbe9d72c</anchor>
      <arglist>(T &amp;t, boost::mpl::false_)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>aaeb8d413e280a95a9b3bbb528971789c</anchor>
      <arglist>(const boost::serialization::array&lt; T &gt; &amp;t, boost::mpl::false_)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a441acb28cc58c153a0e73f2f4710ce45</anchor>
      <arglist>(boost::array&lt; T, N &gt; &amp;t, boost::mpl::false_)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a37f1240e3300f2e556482934eff8ab59</anchor>
      <arglist>(const T *&amp;, boost::mpl::false_)</arglist>
    </member>
    <member kind="function">
      <type>type_discovery &amp;</type>
      <name>load_a_type</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a13d44fc6b0a1d763eba62c59aa52a1f6</anchor>
      <arglist>(const boost::serialization::nvp&lt; T &gt; &amp;t, boost::mpl::false_)</arglist>
    </member>
    <member kind="variable">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>mparent</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a4ff55bcb90546409816ea60d4c9e503f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Parts</type>
      <name>mparts</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a78098644e99bf546178e9c2ab5946752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PartNames</type>
      <name>mnames</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a53f1c82fe032f1d0d6e5f7bdca08c13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>membername</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>ada0418704c4ccc423ba57a286fcf1c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::Reference *</type>
      <name>mref</name>
      <anchorfile>classRTT_1_1types_1_1type__discovery.html</anchorfile>
      <anchor>a357c705040baedb6aecf2ae6302416fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTT::types::TypeConstructor</name>
    <filename>structRTT_1_1types_1_1TypeConstructor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>build</name>
      <anchorfile>structRTT_1_1types_1_1TypeConstructor.html</anchorfile>
      <anchor>ad0605327f190bd1930c7643b9688e890</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypeInfo</name>
    <filename>classRTT_1_1types_1_1TypeInfo.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ad8144e74a603241ebf29ba51bf252525</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getTypeNames</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ac1a33089a767894589092e05c3a8a35d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAlias</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a333c1ce14cb2e50e355327e95d3001d2</anchor>
      <arglist>(const std::string &amp;alias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isType</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ae2d7f00b91e1c420e614d3b6191e7bcd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getTypeId</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>aec99b9791cbd3478898b5c5ff696493c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTypeIdName</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a018bf54c2acd493339cf82b700baa1bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>construct</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a27e98331862b9449ee96c5f19e1c99c7</anchor>
      <arglist>(const std::vector&lt; base::DataSourceBase::shared_ptr &gt; &amp;args) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>convert</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ae669aa2bc86854b889f988904b69851f</anchor>
      <arglist>(base::DataSourceBase::shared_ptr arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstructor</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a75656ca99e9e90d4a0a594430ca8379c</anchor>
      <arglist>(TypeConstructor *tb)</arglist>
    </member>
    <member kind="function">
      <type>base::InputPortInterface *</type>
      <name>inputPort</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>aec788a2aaad79fafff41793bcff417bd</anchor>
      <arglist>(std::string const &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::OutputPortInterface *</type>
      <name>outputPort</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a920baa69732dff27152408ab368b6bda</anchor>
      <arglist>(std::string const &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::ChannelElementBase::shared_ptr</type>
      <name>buildDataStorage</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a3c0e622e3e79002f38dafef18d8eb97c</anchor>
      <arglist>(ConnPolicy const &amp;policy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPortFactory</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>abf8f0f03cc70e7bfb57a4c39fe9bdaf3</anchor>
      <arglist>(ConnFactoryPtr cf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addProtocol</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a8fcc643caae2065853ff970f43789b63</anchor>
      <arglist>(int protocol_id, TypeTransporter *tt)</arglist>
    </member>
    <member kind="function">
      <type>TypeTransporter *</type>
      <name>getProtocol</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ad0b729e36b3b0dad208453d068ae26af</anchor>
      <arglist>(int protocol_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProtocol</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ae9c1d53e3889d04387a3b1b097f9b53b</anchor>
      <arglist>(int protocol_id) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>getTransportNames</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ad8900256e0e8d7de3164e48025f41015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildConstant</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a899229b00dc8f8f73d9cf5b3a8dac219</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr source, int sizehint) const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildConstant</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ace3b86f93953daa60e1db95a8facfa39</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>aeea302573a995a54dc722c09ebb1dd55</anchor>
      <arglist>(std::string name, int sizehint) const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a475a41576fbdd208cae941d897b56e0f</anchor>
      <arglist>(std::string name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resize</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a499ae64a8113cab87023bd9852116fd7</anchor>
      <arglist>(base::DataSourceBase::shared_ptr arg, int size) const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildAlias</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a6284c245b8011498c307ff09e40a09c1</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr b) const </arglist>
    </member>
    <member kind="function">
      <type>base::PropertyBase *</type>
      <name>buildProperty</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a9e36b8105f5ea83d51386bf0d23e33e0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;desc, base::DataSourceBase::shared_ptr source=0) const </arglist>
    </member>
    <member kind="function">
      <type>base::AttributeBase *</type>
      <name>buildAttribute</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ab4aa81e8820310850843d250730c9e1f</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr source=0) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>buildValue</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ae44d6fec774ae58d1115c7b7dd7dab82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>buildReference</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>adca0ad3bb64f377453b9be73a25b5ae4</anchor>
      <arglist>(void *ptr) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>buildActionAlias</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ad770db1e643632dbdf4f9c3196e2df63</anchor>
      <arglist>(base::ActionInterface *action, base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ac9d08b9a93d7fdea9ec6f3b74b7bdc86</anchor>
      <arglist>(std::ostream &amp;os, base::DataSourceBase::shared_ptr in) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>read</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a3aa3ed920a8bca00db172c74baab35de</anchor>
      <arglist>(std::istream &amp;os, base::DataSourceBase::shared_ptr out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a5b99d3c7c4707bab9c9fcbe8a926fc6f</anchor>
      <arglist>(base::DataSourceBase::shared_ptr in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromString</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>aca5c6af9797eab6cbf0dad093b419151</anchor>
      <arglist>(const std::string &amp;value, base::DataSourceBase::shared_ptr out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStreamable</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a14cc943a4e363ac78928d74bfebd1ba6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getMemberNames</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a3ef105cfabb29bb237c84e3b6d13ebc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getMember</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>aae55b906cd6079aa50c78bc30a019dd7</anchor>
      <arglist>(base::DataSourceBase::shared_ptr item, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMember</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>ac747659e3beea0a8454394638dd8fe4a</anchor>
      <arglist>(internal::Reference *ref, base::DataSourceBase::shared_ptr item, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>getMember</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a3303d50df99e51be0fc103026ce25d4b</anchor>
      <arglist>(base::DataSourceBase::shared_ptr item, base::DataSourceBase::shared_ptr id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>composeType</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>affa99b5b0fa9f9a4b252b42a422473e2</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source, base::DataSourceBase::shared_ptr target) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>decomposeType</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>a83cabdced96572bdb60e737e975ab1da</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
    <member kind="function">
      <type>base::DataSourceBase::shared_ptr</type>
      <name>convertType</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfo.html</anchorfile>
      <anchor>aa1b07b68ddd5636b926e3bbb310a7ef1</anchor>
      <arglist>(base::DataSourceBase::shared_ptr source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypeInfoGenerator</name>
    <filename>classRTT_1_1types_1_1TypeInfoGenerator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getTypeName</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoGenerator.html</anchorfile>
      <anchor>ac7678e34c359cb1ab1dfda9500a7dc6c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoGenerator.html</anchorfile>
      <anchor>aa27628858411ce36f8f11eb6952844b0</anchor>
      <arglist>(TypeInfo *ti)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoGenerator.html</anchorfile>
      <anchor>a2ac544c7d7a0993e7e1e8c639753095b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::EmptyTypeInfo</name>
    <filename>classRTT_1_1types_1_1EmptyTypeInfo.html</filename>
    <base>RTT::types::TypeInfoGenerator</base>
    <member kind="function">
      <type>bool</type>
      <name>installTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1EmptyTypeInfo.html</anchorfile>
      <anchor>a5de991ccc86bc9f2e93b15081fb23133</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfoObject</name>
      <anchorfile>classRTT_1_1types_1_1EmptyTypeInfo.html</anchorfile>
      <anchor>aeff3281377c10a2c0095b1d94fb7f07a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypeInfoRepository</name>
    <filename>classRTT_1_1types_1_1TypeInfoRepository.html</filename>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>type</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a866326a0a0436c7aa688fa1c180b7015</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addType</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a8de60807ab40114355121a6b23b743c5</anchor>
      <arglist>(TypeInfo *ti)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addType</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a22c45317dd48f765b50af84b3c2b21f6</anchor>
      <arglist>(TypeInfoGenerator *tig)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getTypes</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a442ed6fac2bccbd444a55d24f72c63f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getDottedTypes</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a79112ffff0ec3bf3eb55f13597a62515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toDot</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>ae9e91145e91a41a3c52112f9acb43174</anchor>
      <arglist>(const std::string &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeById</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>aa9dd41450edf38e20bd988d2be6d0397</anchor>
      <arglist>(TypeInfo::TypeId type_id) const </arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeById</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a823c5806dcde8960caab7d6755fe859c</anchor>
      <arglist>(const char *type_id_name) const </arglist>
    </member>
    <member kind="function">
      <type>TypeInfo *</type>
      <name>getTypeInfo</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>af380a210068aee4fc5eab455e4c9f5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTransport</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>a0f7d4de77245160acc6730e76e5bd760</anchor>
      <arglist>(TransportPlugin *tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logTypeInfo</name>
      <anchorfile>classRTT_1_1types_1_1TypeInfoRepository.html</anchorfile>
      <anchor>ac9374a0dc215732bccf1e3050f8c295e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypekitPlugin</name>
    <filename>classRTT_1_1types_1_1TypekitPlugin.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>loadTypes</name>
      <anchorfile>classRTT_1_1types_1_1TypekitPlugin.html</anchorfile>
      <anchor>a8f701807f130ea64b2c25daf7e4c3272</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>loadOperators</name>
      <anchorfile>classRTT_1_1types_1_1TypekitPlugin.html</anchorfile>
      <anchor>a92a8c980e5e06531cf2f57230c4be3e5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>loadConstructors</name>
      <anchorfile>classRTT_1_1types_1_1TypekitPlugin.html</anchorfile>
      <anchor>a9a2d19413a368723d952b9185e2c7324</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>loadGlobals</name>
      <anchorfile>classRTT_1_1types_1_1TypekitPlugin.html</anchorfile>
      <anchor>a2845a0e5a0bbc2f91b399f96dbf5d771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classRTT_1_1types_1_1TypekitPlugin.html</anchorfile>
      <anchor>adec67906e0f2d463b394b5c4832e362b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypekitRepository</name>
    <filename>classRTT_1_1types_1_1TypekitRepository.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Import</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>af8081a0e592c1e22c265f89e1f8d04bd</anchor>
      <arglist>(TypekitPlugin *tkp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Import</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>a0015856ac2214c30ad07f2ba1b79aeb7</anchor>
      <arglist>(TransportPlugin *tr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>getTypekits</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>acf4ab5979aa1d5c051605c4b2037cd0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>getTransports</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>af57e236914fd1db2e846f0eb133e02c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasTypekit</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>aa7e01f7165ac81aed4d9f9df2a060436</anchor>
      <arglist>(const std::string &amp;typekitname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasTransport</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>a2e7f2cfeb06ba3f7983cc009d69765e7</anchor>
      <arglist>(const std::string &amp;transportname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Release</name>
      <anchorfile>classRTT_1_1types_1_1TypekitRepository.html</anchorfile>
      <anchor>a6639e7c35ac5caf66b5d4dcede26c298</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypeMarshaller</name>
    <filename>classRTT_1_1types_1_1TypeMarshaller.html</filename>
    <base>RTT::types::TypeTransporter</base>
    <member kind="function" virtualness="pure">
      <type>virtual base::ChannelElementBase::shared_ptr</type>
      <name>createStream</name>
      <anchorfile>classRTT_1_1types_1_1TypeTransporter.html</anchorfile>
      <anchor>a26b001061c666f942058d1e84db7bbc6</anchor>
      <arglist>(base::PortInterface *port, const ConnPolicy &amp;policy, bool is_sender) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTT::types::TypeTransporter</name>
    <filename>classRTT_1_1types_1_1TypeTransporter.html</filename>
  </compound>
  <compound kind="class">
    <name>RTT::types::ValueFactory</name>
    <filename>classRTT_1_1types_1_1ValueFactory.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual base::AttributeBase *</type>
      <name>buildConstant</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a97dab449fb22671005c70994a8b71217</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::AttributeBase *</type>
      <name>buildVariable</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>ac101e81733f71ff8e52256e3bd2fc687</anchor>
      <arglist>(std::string name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::AttributeBase *</type>
      <name>buildAlias</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a711e5ff59143dfd8dac967b862e747fe</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr b) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::PropertyBase *</type>
      <name>buildProperty</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a1cab53b80a14c7f89b49d8b8a0057b0e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;desc, base::DataSourceBase::shared_ptr source=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::AttributeBase *</type>
      <name>buildAttribute</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>af73befe3df7c32726b74364a12343991</anchor>
      <arglist>(std::string name, base::DataSourceBase::shared_ptr source=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>buildValue</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a36d24d5d831d447251d947ae2584ebe4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>buildReference</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a119c4407aea769d9cece4ffb93dbfb6d</anchor>
      <arglist>(void *ptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual base::DataSourceBase::shared_ptr</type>
      <name>buildActionAlias</name>
      <anchorfile>classRTT_1_1types_1_1ValueFactory.html</anchorfile>
      <anchor>a1ebe8b6d44730f03463f7ae951bf3bfe</anchor>
      <arglist>(base::ActionInterface *action, base::DataSourceBase::shared_ptr source) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::not_equal_to&lt; const _Tp &amp; &gt;</name>
    <filename>structstd_1_1not__equal__to_3_01const_01__Tp_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::greater&lt; const _Tp &amp; &gt;</name>
    <filename>structstd_1_1greater_3_01const_01__Tp_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; const _Tp &amp; &gt;</name>
    <filename>structstd_1_1less_3_01const_01__Tp_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="dir">
    <name>rtt/base</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/base/</path>
    <filename>dir_0f500fff02495ab601476bc9c4d7c6cd.html</filename>
    <file>ActionInterface.cpp</file>
    <file>ActionInterface.hpp</file>
    <file>ActivityInterface.cpp</file>
    <file>ActivityInterface.hpp</file>
    <file>AttributeBase.hpp</file>
    <file>Buffer.hpp</file>
    <file>BufferBase.cpp</file>
    <file>BufferBase.hpp</file>
    <file>BufferInterface.hpp</file>
    <file>BufferLocked.hpp</file>
    <file>BufferLockFree.cpp</file>
    <file>BufferLockFree.hpp</file>
    <file>Buffers.hpp</file>
    <file>BufferUnSync.hpp</file>
    <file>ChannelElement.hpp</file>
    <file>ChannelElementBase.hpp</file>
    <file>ChannelInterface.cpp</file>
    <file>CoreRunnableInterface.cpp</file>
    <file>DataObject.hpp</file>
    <file>DataObjectInterface.hpp</file>
    <file>DataObjectLocked.hpp</file>
    <file>DataObjectLockFree.hpp</file>
    <file>DataObjectUnSync.hpp</file>
    <file>DataSourceBase.hpp</file>
    <file>DisposableInterface.hpp</file>
    <file>ExecutableInterface.hpp</file>
    <file>InputPortInterface.cpp</file>
    <file>InputPortInterface.hpp</file>
    <file>OperationBase.cpp</file>
    <file>OperationBase.hpp</file>
    <file>OperationCallerBase.hpp</file>
    <file>OperationCallerBaseInvoker.hpp</file>
    <file>OperationCallerInterface.cpp</file>
    <file>OperationCallerInterface.hpp</file>
    <file>OutputPortInterface.cpp</file>
    <file>OutputPortInterface.hpp</file>
    <file>PortInterface.cpp</file>
    <file>PortInterface.hpp</file>
    <file>PropertyBagVisitor.cpp</file>
    <file>PropertyBagVisitor.hpp</file>
    <file>PropertyBase.cpp</file>
    <file>PropertyBase.hpp</file>
    <file>PropertyIntrospection.hpp</file>
    <file>PropertyIntrospection.inl</file>
    <file>rtt-base-fwd.hpp</file>
    <file>RunnableInterface.hpp</file>
    <file>TaskCore.cpp</file>
    <file>TaskCore.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/transports/corba</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/transports/corba/</path>
    <filename>dir_f3f6681a27ae845c1f454bd8857129a6.html</filename>
    <file>AnyDataSource.cpp</file>
    <file>AnyDataSource.hpp</file>
    <file>ApplicationServer.cpp</file>
    <file>ApplicationServer.hpp</file>
    <file>ConfigurationInterface.idl</file>
    <file>ConfigurationInterfaceI.cpp</file>
    <file>ConfigurationInterfaceI.h</file>
    <file>corba.h</file>
    <file>Corba.hpp</file>
    <file>CorbaConnPolicy.cpp</file>
    <file>CorbaConnPolicy.hpp</file>
    <file>CorbaConversion.cpp</file>
    <file>CorbaConversion.hpp</file>
    <file>CorbaDispatcher.cpp</file>
    <file>CorbaDispatcher.hpp</file>
    <file>CorbaLib.cpp</file>
    <file>CorbaLib.hpp</file>
    <file>CorbaOperationCallerFactory.cpp</file>
    <file>CorbaOperationCallerFactory.hpp</file>
    <file>CorbaTemplateProtocol.hpp</file>
    <file>CorbaTypeTransporter.cpp</file>
    <file>CorbaTypeTransporter.hpp</file>
    <file>DataFlow.idl</file>
    <file>DataFlowI.cpp</file>
    <file>DataFlowI.h</file>
    <file>DataSourceProxy.hpp</file>
    <file>OperationCallerProxy.hpp</file>
    <file>OperationInterface.idl</file>
    <file>OperationInterfaceI.cpp</file>
    <file>OperationInterfaceI.h</file>
    <file>OrocosTypes.idl</file>
    <file>POAUtility.cpp</file>
    <file>POAUtility.h</file>
    <file>RemoteChannelElement.hpp</file>
    <file>RemoteConnID.cpp</file>
    <file>RemoteConnID.hpp</file>
    <file>RemotePorts.cpp</file>
    <file>RemotePorts.hpp</file>
    <file>rtt-corba-fwd.hpp</file>
    <file>RTTCorbaConversion.hpp</file>
    <file>Service.idl</file>
    <file>ServiceI.cpp</file>
    <file>ServiceI.h</file>
    <file>ServiceRequester.idl</file>
    <file>ServiceRequesterI.cpp</file>
    <file>ServiceRequesterI.h</file>
    <file>StdException.idl</file>
    <file>TaskContext.idl</file>
    <file>TaskContextFactory.cpp</file>
    <file>TaskContextFactory.hpp</file>
    <file>TaskContextI.cpp</file>
    <file>TaskContextI.h</file>
    <file>TaskContextProxy.cpp</file>
    <file>TaskContextProxy.hpp</file>
    <file>TaskContextServer.cpp</file>
    <file>TaskContextServer.hpp</file>
    <file>TransportPlugin.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/deployment</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/deployment/</path>
    <filename>dir_dbb501c301ce05dd98d1d78f7fe38a70.html</filename>
    <file>ComponentLoader.cpp</file>
    <file>ComponentLoader.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/deployment</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/deployment/</path>
    <filename>dir_a377f35cbcd0213dcd8c78eb1207bad7.html</filename>
    <file>comppath.cpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/extras/dev</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/extras/dev/</path>
    <filename>dir_566e5439e32eb7c4a23dfaef247ef252.html</filename>
    <file>AnalogInInterface.hpp</file>
    <file>AnalogInput.hpp</file>
    <file>AnalogOutInterface.hpp</file>
    <file>AnalogOutput.hpp</file>
    <file>AxisInterface.cpp</file>
    <file>AxisInterface.hpp</file>
    <file>CalibrationInterface.hpp</file>
    <file>DeviceInterface.hpp</file>
    <file>DigitalInInterface.hpp</file>
    <file>DigitalInput.hpp</file>
    <file>DigitalOutInterface.hpp</file>
    <file>DigitalOutput.hpp</file>
    <file>DriveInterface.hpp</file>
    <file>EncoderInterface.cpp</file>
    <file>EncoderInterface.hpp</file>
    <file>HomingInterface.cpp</file>
    <file>HomingInterface.hpp</file>
    <file>io.cpp</file>
    <file>NameServer.hpp</file>
    <file>NameServerRegistrator.hpp</file>
    <file>PulseTrainGeneratorInterface.cpp</file>
    <file>PulseTrainGeneratorInterface.hpp</file>
    <file>rtt-dev-fwd.hpp</file>
    <file>SensorInterface.cpp</file>
    <file>SensorInterface.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/ecos</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/ecos/</path>
    <filename>dir_5170e79b23992804bcb9ad1ebc67c77e.html</filename>
    <file>ecos.h</file>
    <file>ecos_rec_mutex.h</file>
    <file>ecosthreads.cpp</file>
    <file>fosi.h</file>
    <file>fosi_internal.cpp</file>
    <file>os_ecos.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/extras</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/extras/</path>
    <filename>dir_802e7e28d93ea657eb0058539ec5f42d.html</filename>
    <dir>rtt/extras/dev</dir>
    <file>Activities.hpp</file>
    <file>Execution.hpp</file>
    <file>FileDescriptorActivity.cpp</file>
    <file>FileDescriptorActivity.hpp</file>
    <file>FileDescriptorActivityInterface.hpp</file>
    <file>FileDescriptorSimulationActivity.cpp</file>
    <file>FileDescriptorSimulationActivity.hpp</file>
    <file>IRQActivity.cpp</file>
    <file>IRQActivity.hpp</file>
    <file>MultiVector.cpp</file>
    <file>MultiVector.hpp</file>
    <file>MultiVectorComposition.hpp</file>
    <file>Orocos.Main.hpp</file>
    <file>PeriodicActivity.cpp</file>
    <file>PeriodicActivity.hpp</file>
    <file>Properties.hpp</file>
    <file>ReadOnlyPointer.hpp</file>
    <file>rtt-extras-fwd.hpp</file>
    <file>SequentialActivity.cpp</file>
    <file>SequentialActivity.hpp</file>
    <file>SimulationActivity.cpp</file>
    <file>SimulationActivity.hpp</file>
    <file>SimulationThread.cpp</file>
    <file>SimulationThread.hpp</file>
    <file>SlaveActivity.cpp</file>
    <file>SlaveActivity.hpp</file>
    <file>TaskContexts.hpp</file>
    <file>TimerThread.cpp</file>
    <file>TimerThread.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/gnulinux</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/gnulinux/</path>
    <filename>dir_3cd020c5a7b4bc5bda03993c910f78e5.html</filename>
    <file>fosi.h</file>
    <file>fosi_internal.cpp</file>
    <file>gnulinux.h</file>
    <file>gnuthreads.cpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/internal</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/internal/</path>
    <filename>dir_89f49d1238ce6a42e58a3b20e7ecf7c2.html</filename>
    <file>ArrayPartDataSource.hpp</file>
    <file>AssignCommand.hpp</file>
    <file>AtomicMWSRQueue.hpp</file>
    <file>AtomicQueue.hpp</file>
    <file>BindStorage.hpp</file>
    <file>carray.hpp</file>
    <file>CatchConfig.cpp</file>
    <file>CatchConfig.hpp</file>
    <file>ChannelBufferElement.hpp</file>
    <file>ChannelDataElement.hpp</file>
    <file>Channels.hpp</file>
    <file>Collect.hpp</file>
    <file>CollectBase.hpp</file>
    <file>CollectSignature.hpp</file>
    <file>ConnectionManager.cpp</file>
    <file>ConnectionManager.hpp</file>
    <file>ConnFactory.cpp</file>
    <file>ConnFactory.hpp</file>
    <file>ConnID.cpp</file>
    <file>ConnID.hpp</file>
    <file>ConnInputEndPoint.hpp</file>
    <file>ConnOutputEndPoint.hpp</file>
    <file>CreateSequence.hpp</file>
    <file>DataObjectDataSource.hpp</file>
    <file>DataSource.cpp</file>
    <file>DataSource.hpp</file>
    <file>DataSource.inl</file>
    <file>DataSourceCommand.cpp</file>
    <file>DataSourceCommand.hpp</file>
    <file>DataSourceGenerator.hpp</file>
    <file>DataSources.cpp</file>
    <file>DataSources.hpp</file>
    <file>DataSources.inl</file>
    <file>DataSourceStorage.hpp</file>
    <file>DataSourceTypeInfo.hpp</file>
    <file>DataSourceTypeInfo.inl</file>
    <file>Exceptions.hpp</file>
    <file>FusedFunctorDataSource.hpp</file>
    <file>GetSignature.hpp</file>
    <file>GlobalEngine.cpp</file>
    <file>GlobalEngine.hpp</file>
    <file>GlobalService.cpp</file>
    <file>GlobalService.hpp</file>
    <file>InputPortSource.hpp</file>
    <file>Invoker.hpp</file>
    <file>InvokerBase.hpp</file>
    <file>InvokerSignature.hpp</file>
    <file>List.hpp</file>
    <file>ListLocked.hpp</file>
    <file>ListLockFree.cpp</file>
    <file>ListLockFree.hpp</file>
    <file>LocalOperationCaller.hpp</file>
    <file>LockedQueue.hpp</file>
    <file>MWSRQueue.hpp</file>
    <file>mystd.hpp</file>
    <file>NA.hpp</file>
    <file>OperationCallerBinder.hpp</file>
    <file>OperationCallerC.cpp</file>
    <file>OperationCallerC.hpp</file>
    <file>OperationInterfacePartFused.cpp</file>
    <file>OperationInterfacePartFused.hpp</file>
    <file>PartDataSource.hpp</file>
    <file>Processors.hpp</file>
    <file>Queue.hpp</file>
    <file>Reference.hpp</file>
    <file>RemoteOperationCaller.hpp</file>
    <file>Return.hpp</file>
    <file>ReturnBase.hpp</file>
    <file>ReturnSignature.hpp</file>
    <file>rtt-internal-fwd.hpp</file>
    <file>SendHandleC.cpp</file>
    <file>SendHandleC.hpp</file>
    <file>Signal.hpp</file>
    <file>signal0.hpp</file>
    <file>signal1.hpp</file>
    <file>signal2.hpp</file>
    <file>signal3.hpp</file>
    <file>signal4.hpp</file>
    <file>signal5.hpp</file>
    <file>signal6.hpp</file>
    <file>signal7.hpp</file>
    <file>signal_template.hpp</file>
    <file>SignalBase.cpp</file>
    <file>SignalBase.hpp</file>
    <file>signature0.hpp</file>
    <file>signature1.hpp</file>
    <file>signature2.hpp</file>
    <file>signature3.hpp</file>
    <file>signature4.hpp</file>
    <file>signature5.hpp</file>
    <file>signature6.hpp</file>
    <file>signature7.hpp</file>
    <file>signature_template.hpp</file>
    <file>TsPool.hpp</file>
    <file>UnMember.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/lxrt</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/lxrt/</path>
    <filename>dir_d07a1eb79136e4bb8122aeacaca9ee5d.html</filename>
    <file>fosi.h</file>
    <file>fosi_internal.cpp</file>
    <file>lxrt.h</file>
    <file>lxrtthreads.cpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/macosx</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/macosx/</path>
    <filename>dir_56f123c379d2cf5883cea096e669c151.html</filename>
    <file>fosi.h</file>
    <file>fosi_internal.cpp</file>
    <file>gnuthreads.cpp</file>
    <file>macosx.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/marsh</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/marsh/</path>
    <filename>dir_859e42028f6b97b0129002d4c809d6fb.html</filename>
    <file>CPFDemarshaller.cpp</file>
    <file>CPFDemarshaller.hpp</file>
    <file>CPFDTD.cpp</file>
    <file>CPFDTD.hpp</file>
    <file>CPFMarshaller.cpp</file>
    <file>CPFMarshaller.hpp</file>
    <file>Marshalling.cpp</file>
    <file>Marshalling.hpp</file>
    <file>MarshallingService.cpp</file>
    <file>MarshallingService.hpp</file>
    <file>MarshallInterface.hpp</file>
    <file>PropertyBagIntrospector.cpp</file>
    <file>PropertyBagIntrospector.hpp</file>
    <file>PropertyDemarshaller.cpp</file>
    <file>PropertyDemarshaller.hpp</file>
    <file>PropertyLoader.cpp</file>
    <file>PropertyLoader.hpp</file>
    <file>PropertyMarshaller.cpp</file>
    <file>PropertyMarshaller.hpp</file>
    <file>rtt-marsh-fwd.hpp</file>
    <file>StreamProcessor.hpp</file>
    <file>TinyDemarshaller.cpp</file>
    <file>TinyDemarshaller.hpp</file>
    <file>tinystr.cpp</file>
    <file>tinystr.h</file>
    <file>tinyxml.cpp</file>
    <file>tinyxml.h</file>
    <file>tinyxmlerror.cpp</file>
    <file>tinyxmlparser.cpp</file>
    <file>XMLRPCDemarshaller.hpp</file>
    <file>XMLRPCMarshaller.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/marsh</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/marsh/</path>
    <filename>dir_72491b0dd478b6c66968da4ae636727f.html</filename>
    <file>rtt-marsh-config.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/transports/mqueue</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/transports/mqueue/</path>
    <filename>dir_6a6b46231e80a379fe32f5e19608498d.html</filename>
    <file>binary_data_archive.hpp</file>
    <file>Dispatcher.cpp</file>
    <file>Dispatcher.hpp</file>
    <file>MQChannelElement.hpp</file>
    <file>MQLib.cpp</file>
    <file>MQLib.hpp</file>
    <file>MQSendRecv.cpp</file>
    <file>MQSendRecv.hpp</file>
    <file>MQSerializationProtocol.hpp</file>
    <file>MQTemplateProtocol.hpp</file>
    <file>MQTemplateProtocolBase.hpp</file>
    <file>rtt-mqueue-fwd.hpp</file>
    <file>TransportPlugin.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/transports/mqueue</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/transports/mqueue/</path>
    <filename>dir_0a52e55579b2f0597de76bf4d73694a1.html</filename>
    <file>rtt-mqueue-config.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/oro_gcc</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/oro_gcc/</path>
    <filename>dir_520aa56e271df493b025844a235ad846.html</filename>
    <file>oro_arch.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/oro_i386</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/oro_i386/</path>
    <filename>dir_5fe5a69be43c5a8fcb2f4f6e68fdae1f.html</filename>
    <file>oro_arch.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/oro_msvc</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/oro_msvc/</path>
    <filename>dir_4547405f5409876d1de2e951194f80d5.html</filename>
    <file>oro_arch.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/oro_noasm</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/oro_noasm/</path>
    <filename>dir_ed4f360ae8ed786b11ff4b5d01e68f80.html</filename>
    <file>oro_arch.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/oro_powerpc</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/oro_powerpc/</path>
    <filename>dir_1e7233a69300b2bc64966c44471cd335.html</filename>
    <file>oro_arch.h</file>
    <file>oro_atomic.h</file>
    <file>oro_system.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/oro_x86_64</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/oro_x86_64/</path>
    <filename>dir_fc123e687343a1084760fd063f06f5ba.html</filename>
    <file>oro_arch.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/</path>
    <filename>dir_d50dce9e3fe3818184897ffa2b376714.html</filename>
    <dir>rtt/os/ecos</dir>
    <dir>rtt/os/gnulinux</dir>
    <dir>rtt/os/lxrt</dir>
    <dir>rtt/os/macosx</dir>
    <dir>rtt/os/oro_gcc</dir>
    <dir>rtt/os/oro_i386</dir>
    <dir>rtt/os/oro_msvc</dir>
    <dir>rtt/os/oro_noasm</dir>
    <dir>rtt/os/oro_powerpc</dir>
    <dir>rtt/os/oro_x86_64</dir>
    <dir>rtt/os/tlsf</dir>
    <dir>rtt/os/win32</dir>
    <dir>rtt/os/xenomai</dir>
    <file>Atomic.hpp</file>
    <file>CAS.hpp</file>
    <file>Condition.hpp</file>
    <file>exceptions.cpp</file>
    <file>fosi.h</file>
    <file>fosi_interface.h</file>
    <file>fosi_internal_interface.hpp</file>
    <file>main.h</file>
    <file>MainThread.cpp</file>
    <file>MainThread.hpp</file>
    <file>Mutex.cpp</file>
    <file>Mutex.hpp</file>
    <file>MutexLock.hpp</file>
    <file>oro_allocator.hpp</file>
    <file>oro_arch.h</file>
    <file>oro_arch_interface.h</file>
    <file>oro_limits.h</file>
    <file>oro_malloc.h</file>
    <file>OS.hpp</file>
    <file>rint.cpp</file>
    <file>rint.h</file>
    <file>rt_list.hpp</file>
    <file>rtconversions.cpp</file>
    <file>rtconversions.hpp</file>
    <file>rtstreambufs.hpp</file>
    <file>rtstreams.cpp</file>
    <file>rtstreams.hpp</file>
    <file>rtt-os-fwd.hpp</file>
    <file>Semaphore.hpp</file>
    <file>startstop.cpp</file>
    <file>startstop.h</file>
    <file>StartStopManager.cpp</file>
    <file>StartStopManager.hpp</file>
    <file>Thread.cpp</file>
    <file>Thread.hpp</file>
    <file>ThreadInterface.cpp</file>
    <file>ThreadInterface.hpp</file>
    <file>threads.cpp</file>
    <file>threads.hpp</file>
    <file>Time.hpp</file>
    <file>Timer.cpp</file>
    <file>Timer.hpp</file>
    <file>TimeService.cpp</file>
    <file>TimeService.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/os/</path>
    <filename>dir_7a3c048edf96e72c05cb3f6a88511b55.html</filename>
    <dir>rtt/os/targets</dir>
  </compound>
  <compound kind="dir">
    <name>rtt/plugin</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/plugin/</path>
    <filename>dir_0419fafcaa4eef4fdb2400ea083b8d35.html</filename>
    <file>Plugin.cpp</file>
    <file>Plugin.hpp</file>
    <file>PluginLoader.cpp</file>
    <file>PluginLoader.hpp</file>
    <file>rtt-plugin-fwd.hpp</file>
    <file>ServicePlugin.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/plugin</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/plugin/</path>
    <filename>dir_fd7166d167c78caa3af4bf9c2af92ede.html</filename>
    <file>pluginpath.cpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/</path>
    <filename>dir_b17daf279c0947dd62d31c6271e174bf.html</filename>
    <dir>rtt/base</dir>
    <dir>rtt/deployment</dir>
    <dir>rtt/extras</dir>
    <dir>rtt/internal</dir>
    <dir>rtt/marsh</dir>
    <dir>rtt/os</dir>
    <dir>rtt/plugin</dir>
    <dir>rtt/scripting</dir>
    <dir>rtt/transports</dir>
    <dir>rtt/typekit</dir>
    <dir>rtt/types</dir>
    <file>Activity.cpp</file>
    <file>Activity.hpp</file>
    <file>ArgumentDescription.cpp</file>
    <file>ArgumentDescription.hpp</file>
    <file>Attribute.cpp</file>
    <file>Attribute.hpp</file>
    <file>Component.hpp</file>
    <file>ConfigurationInterface.cpp</file>
    <file>ConfigurationInterface.hpp</file>
    <file>ConnPolicy.cpp</file>
    <file>ConnPolicy.hpp</file>
    <file>DataFlowInterface.cpp</file>
    <file>DataFlowInterface.hpp</file>
    <file>ExecutionEngine.cpp</file>
    <file>ExecutionEngine.hpp</file>
    <file>FactoryExceptions.cpp</file>
    <file>FactoryExceptions.hpp</file>
    <file>FlowStatus.cpp</file>
    <file>FlowStatus.hpp</file>
    <file>Handle.cpp</file>
    <file>Handle.hpp</file>
    <file>InputPort.hpp</file>
    <file>Logger.cpp</file>
    <file>Logger.hpp</file>
    <file>Logger.inl</file>
    <file>Operation.cpp</file>
    <file>Operation.hpp</file>
    <file>OperationCaller.hpp</file>
    <file>OperationInterface.cpp</file>
    <file>OperationInterface.hpp</file>
    <file>OperationInterfacePart.hpp</file>
    <file>OutputPort.hpp</file>
    <file>Port.hpp</file>
    <file>Property.cpp</file>
    <file>Property.hpp</file>
    <file>PropertyBag.cpp</file>
    <file>PropertyBag.hpp</file>
    <file>rt_string.hpp</file>
    <file>rtt-detail-fwd.hpp</file>
    <file>rtt-fwd.hpp</file>
    <file>RTT.hpp</file>
    <file>SendHandle.hpp</file>
    <file>SendStatus.cpp</file>
    <file>SendStatus.hpp</file>
    <file>Service.cpp</file>
    <file>Service.hpp</file>
    <file>ServiceRequester.cpp</file>
    <file>ServiceRequester.hpp</file>
    <file>TaskContext.cpp</file>
    <file>TaskContext.hpp</file>
    <file>Time.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/</path>
    <filename>dir_86a70d8a2267483f8ea58e92a21d1a94.html</filename>
    <dir>rtt/deployment</dir>
    <dir>rtt/marsh</dir>
    <dir>rtt/os</dir>
    <dir>rtt/plugin</dir>
    <dir>rtt/scripting</dir>
    <dir>rtt/transports</dir>
    <dir>rtt/typekit</dir>
    <file>rtt-config.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/scripting</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/scripting/</path>
    <filename>dir_fc5c38997263489402b2f8ed3bd1e3b2.html</filename>
    <file>ArgumentsParser.cpp</file>
    <file>ArgumentsParser.hpp</file>
    <file>CallFunction.hpp</file>
    <file>CommandBinary.hpp</file>
    <file>CommandComposite.hpp</file>
    <file>CommandCounter.cpp</file>
    <file>CommandCounter.hpp</file>
    <file>CommandDataSource.hpp</file>
    <file>CommandFunctors.hpp</file>
    <file>CommandIllegal.cpp</file>
    <file>CommandIllegal.hpp</file>
    <file>CommandNOP.cpp</file>
    <file>CommandNOP.hpp</file>
    <file>CommandString.cpp</file>
    <file>CommandString.hpp</file>
    <file>CommonParser.cpp</file>
    <file>CommonParser.hpp</file>
    <file>ConditionBool.cpp</file>
    <file>ConditionBool.hpp</file>
    <file>ConditionBoolDataSource.cpp</file>
    <file>ConditionBoolDataSource.hpp</file>
    <file>ConditionBoolProperty.cpp</file>
    <file>ConditionBoolProperty.hpp</file>
    <file>ConditionCache.hpp</file>
    <file>ConditionCompare.hpp</file>
    <file>ConditionComposite.cpp</file>
    <file>ConditionComposite.hpp</file>
    <file>ConditionDSDuration.cpp</file>
    <file>ConditionDSDuration.hpp</file>
    <file>ConditionDuration.cpp</file>
    <file>ConditionDuration.hpp</file>
    <file>ConditionExpire.hpp</file>
    <file>ConditionFalse.hpp</file>
    <file>ConditionInterface.cpp</file>
    <file>ConditionInterface.hpp</file>
    <file>ConditionInvert.hpp</file>
    <file>ConditionOnce.cpp</file>
    <file>ConditionOnce.hpp</file>
    <file>ConditionParser.cpp</file>
    <file>ConditionParser.hpp</file>
    <file>ConditionTrue.hpp</file>
    <file>DataSourceCondition.cpp</file>
    <file>DataSourceCondition.hpp</file>
    <file>DataSourceTime.hpp</file>
    <file>DumpObject.cpp</file>
    <file>DumpObject.hpp</file>
    <file>EdgeCondition.cpp</file>
    <file>EdgeCondition.hpp</file>
    <file>ExpressionParser.cpp</file>
    <file>ExpressionParser.hpp</file>
    <file>FunctionFactory.cpp</file>
    <file>FunctionFactory.hpp</file>
    <file>FunctionGraph.cpp</file>
    <file>FunctionGraph.hpp</file>
    <file>FunctionGraphBuilder.cpp</file>
    <file>FunctionGraphBuilder.hpp</file>
    <file>GraphCopier.hpp</file>
    <file>parse_exception.cpp</file>
    <file>parse_exception.hpp</file>
    <file>ParsedStateMachine.cpp</file>
    <file>ParsedStateMachine.hpp</file>
    <file>parser-debug.hpp</file>
    <file>parser-types.hpp</file>
    <file>Parser.cpp</file>
    <file>Parser.hpp</file>
    <file>PeerParser.cpp</file>
    <file>PeerParser.hpp</file>
    <file>ProgramExceptions.hpp</file>
    <file>ProgramGraphParser.cpp</file>
    <file>ProgramGraphParser.hpp</file>
    <file>ProgramGraphParser2.cpp</file>
    <file>ProgramInterface.cpp</file>
    <file>ProgramInterface.hpp</file>
    <file>ProgramService.cpp</file>
    <file>ProgramService.hpp</file>
    <file>PropertyParser.cpp</file>
    <file>PropertyParser.hpp</file>
    <file>rtt-scripting-fwd.hpp</file>
    <file>Scripting.cpp</file>
    <file>Scripting.hpp</file>
    <file>ScriptingService.cpp</file>
    <file>ScriptingService.hpp</file>
    <file>ScriptParser.cpp</file>
    <file>ScriptParser.hpp</file>
    <file>SendHandleAlias.cpp</file>
    <file>SendHandleAlias.hpp</file>
    <file>StateDescription.cpp</file>
    <file>StateDescription.hpp</file>
    <file>StateGraphParser.cpp</file>
    <file>StateGraphParser.hpp</file>
    <file>StateInterface.cpp</file>
    <file>StateInterface.hpp</file>
    <file>StateMachine.cpp</file>
    <file>StateMachine.hpp</file>
    <file>StateMachineBuilder.cpp</file>
    <file>StateMachineBuilder.hpp</file>
    <file>StateMachineService.cpp</file>
    <file>StateMachineService.hpp</file>
    <file>StatementProcessor.cpp</file>
    <file>StatementProcessor.hpp</file>
    <file>TryCommand.cpp</file>
    <file>TryCommand.hpp</file>
    <file>ValueChangeParser.cpp</file>
    <file>ValueChangeParser.hpp</file>
    <file>ValueParser.cpp</file>
    <file>ValueParser.hpp</file>
    <file>VertexNode.cpp</file>
    <file>VertexNode.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/scripting</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/scripting/</path>
    <filename>dir_2694652722524a4fc96413debac2d10e.html</filename>
    <file>rtt-scripting-config.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/targets</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/os/targets/</path>
    <filename>dir_d62f165e1f6ed661fd83acf1c003e09a.html</filename>
    <file>gnulinux-config.h</file>
    <file>rtt-target.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/tlsf</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/tlsf/</path>
    <filename>dir_3f45da8fa6d56ab128cc57dc2b3e90ef.html</filename>
    <file>target.h</file>
    <file>tlsf.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/transports</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/transports/</path>
    <filename>dir_f255a2fdcf6904b73558a17575721bb8.html</filename>
    <dir>rtt/transports/corba</dir>
    <dir>rtt/transports/mqueue</dir>
  </compound>
  <compound kind="dir">
    <name>rtt/transports</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/transports/</path>
    <filename>dir_3fe2078e7cc98cfe65b7655c98a7c7e9.html</filename>
    <dir>rtt/transports/mqueue</dir>
  </compound>
  <compound kind="dir">
    <name>rtt/typekit</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/typekit/</path>
    <filename>dir_002b7ebfee31b44d0375b1bd0e120a73.html</filename>
    <file>BoolTypeInfo.hpp</file>
    <file>ConnPolicyType.hpp</file>
    <file>RealTimeTypekit.cpp</file>
    <file>RealTimeTypekit.hpp</file>
    <file>RealTimeTypekitConstructors.cpp</file>
    <file>RealTimeTypekitGlobals.cpp</file>
    <file>RealTimeTypekitOperators.cpp</file>
    <file>RealTimeTypekitStdTypes.cpp</file>
    <file>RealTimeTypekitTypes.cpp</file>
    <file>RealTimeTypekitTypes2.cpp</file>
    <file>RTStringTypeInfo.hpp</file>
    <file>RTTTypes.hpp</file>
    <file>StdStringTypeInfo.hpp</file>
    <file>StdTypeInfo.hpp</file>
    <file>StdVectorTypeInfo.hpp</file>
    <file>Types.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/typekit</name>
    <path>/home/jenkins/workspace/rtt-doc/build/rtt/typekit/</path>
    <filename>dir_f5203b584547817ec1db440c0732ec9f.html</filename>
    <file>rtt-typekit-config.h</file>
  </compound>
  <compound kind="dir">
    <name>rtt/types</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/types/</path>
    <filename>dir_91d27d93531d1672f26d208cfd0d0f3f.html</filename>
    <file>BoostArrayTypeInfo.hpp</file>
    <file>carray.hpp</file>
    <file>CArrayTypeInfo.hpp</file>
    <file>CompositionFactory.cpp</file>
    <file>CompositionFactory.hpp</file>
    <file>EnumTypeInfo.hpp</file>
    <file>GlobalsRepository.cpp</file>
    <file>GlobalsRepository.hpp</file>
    <file>MemberFactory.cpp</file>
    <file>MemberFactory.hpp</file>
    <file>Operators.cpp</file>
    <file>Operators.hpp</file>
    <file>OperatorTypes.hpp</file>
    <file>PrimitiveSequenceTypeInfo.hpp</file>
    <file>PrimitiveTypeInfo.hpp</file>
    <file>PropertyComposition.cpp</file>
    <file>PropertyComposition.hpp</file>
    <file>PropertyDecomposition.cpp</file>
    <file>PropertyDecomposition.hpp</file>
    <file>rtt-types-fwd.hpp</file>
    <file>SequenceConstructor.hpp</file>
    <file>SequenceTypeInfo.hpp</file>
    <file>SequenceTypeInfoBase.cpp</file>
    <file>SequenceTypeInfoBase.hpp</file>
    <file>StdVectorTemplateTypeInfo.hpp</file>
    <file>StreamFactory.cpp</file>
    <file>StreamFactory.hpp</file>
    <file>StructTypeInfo.hpp</file>
    <file>TemplateCompositionFactory.hpp</file>
    <file>TemplateConnFactory.hpp</file>
    <file>TemplateConstructor.hpp</file>
    <file>TemplateTypeInfo.hpp</file>
    <file>TemplateValueFactory.hpp</file>
    <file>TransportPlugin.hpp</file>
    <file>type_discovery.hpp</file>
    <file>TypeConstructor.cpp</file>
    <file>TypeConstructor.hpp</file>
    <file>TypeInfo.cpp</file>
    <file>TypeInfo.hpp</file>
    <file>TypeInfoGenerator.hpp</file>
    <file>TypeInfoName.hpp</file>
    <file>TypeInfoRepository.cpp</file>
    <file>TypeInfoRepository.hpp</file>
    <file>TypekitPlugin.hpp</file>
    <file>TypekitRepository.cpp</file>
    <file>TypekitRepository.hpp</file>
    <file>TypeMarshaller.hpp</file>
    <file>Types.cpp</file>
    <file>Types.hpp</file>
    <file>TypeStream-io.cpp</file>
    <file>TypeStream-io.hpp</file>
    <file>TypeStream.cpp</file>
    <file>TypeStream.hpp</file>
    <file>TypeStreamSelector.hpp</file>
    <file>TypeTransporter.hpp</file>
    <file>ValueFactory.cpp</file>
    <file>ValueFactory.hpp</file>
    <file>VectorTemplateComposition.hpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/win32</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/win32/</path>
    <filename>dir_4ee2114e57c60498cb310f4568f818fe.html</filename>
    <file>dlfcn.h</file>
    <file>fosi.cpp</file>
    <file>fosi.h</file>
    <file>fosi_internal.cpp</file>
    <file>win32.h</file>
    <file>winthreads.cpp</file>
  </compound>
  <compound kind="dir">
    <name>rtt/os/xenomai</name>
    <path>/home/jenkins/workspace/rtt-doc/rtt/os/xenomai/</path>
    <filename>dir_5c468deba7b716568ae8a6866d8eed2d.html</filename>
    <file>fosi.h</file>
    <file>fosi_internal.cpp</file>
    <file>xenomai.h</file>
    <file>xenothreads.cpp</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>RTT Online API Documentation</title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">intro</docanchor>
    <docanchor file="index" title="Recommendation">recom</docanchor>
    <docanchor file="index" title="Real-Time Toolkit classes (RTT)">corelib</docanchor>
    <docanchor file="index" title="Plugins">plugins</docanchor>
    <docanchor file="index" title="CORBA transport (network communication)">rttcorba</docanchor>
    <docanchor file="index" title="Posix MQueue transport (local inter-process communication)">mqueue</docanchor>
    <docanchor file="index" title="Hardware Access and Device Interface">devdrivers</docanchor>
  </compound>
</tagfile>
